/**

Generated by the following Solidity interface...
```solidity
interface FastTypes {
    struct Constant {
        bytes32 key;
    }
    struct Counter {
        bytes32 key;
    }
    struct Owned {
        bytes32 key;
        address owner;
    }
    struct Set {
        bytes32 key;
    }

    function get(Owned memory o) external view returns (bytes32);
    function requireExist(Set memory s, bytes32 value) external view;
    function requireGet(Constant memory c) external view returns (bytes32);
    function requireGte(Counter memory c, uint256 value) external view;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "get",
    "inputs": [
      {
        "name": "o",
        "type": "tuple",
        "internalType": "struct FastTypes.Owned",
        "components": [
          {
            "name": "key",
            "type": "bytes32",
            "internalType": "bytes32"
          },
          {
            "name": "owner",
            "type": "address",
            "internalType": "address"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "requireExist",
    "inputs": [
      {
        "name": "s",
        "type": "tuple",
        "internalType": "struct FastTypes.Set",
        "components": [
          {
            "name": "key",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "value",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "requireGet",
    "inputs": [
      {
        "name": "c",
        "type": "tuple",
        "internalType": "struct FastTypes.Constant",
        "components": [
          {
            "name": "key",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "requireGte",
    "inputs": [
      {
        "name": "c",
        "type": "tuple",
        "internalType": "struct FastTypes.Counter",
        "components": [
          {
            "name": "key",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod FastTypes {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x610c6661004d600b8282823980515f1a6073146041577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610610091575f3560e01c80635d4b516a116100645780635d4b516a14610131578063c23ea93f1461014d578063c351e50e14610175578063ce6121731461019d57610091565b806319a8a2ef1461009557806341b5d9d6146100c55780634f787429146100ed57806351be299814610109575b5f5ffd5b6100af60048036038101906100aa91906108d6565b6101cd565b6040516100bc9190610910565b60405180910390f35b8180156100d0575f5ffd5b506100eb60048036038101906100e69190610929565b6102e6565b005b610107600480360381019061010291906109a0565b6103eb565b005b818015610114575f5ffd5b5061012f600480360381019061012a9190610a4a565b61047b565b005b61014b60048036038101906101469190610a4a565b61050c565b005b818015610158575f5ffd5b50610173600480360381019061016e91906109a0565b61059c565b005b818015610180575f5ffd5b5061019b60048036038101906101969190610ac1565b61062d565b005b6101b760048036038101906101b29190610aff565b6106be565b6040516101c49190610910565b60405180910390f35b5f813273ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614610241576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023890610b84565b60405180910390fd5b7f7d2d1f8d84d195dcc899290eb18352040bd9223dd7d501e658c3bed6e0a6070e5f1c73ffffffffffffffffffffffffffffffffffffffff16638eaa6ac0845f01516040518263ffffffff1660e01b815260040161029f9190610bb1565b602060405180830381865afa1580156102ba573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102de9190610bde565b915050919050565b813273ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614610359576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035090610b84565b60405180910390fd5b7f7d2d1f8d84d195dcc899290eb18352040bd9223dd7d501e658c3bed6e0a6070e5f1c73ffffffffffffffffffffffffffffffffffffffff1663f71f7a25845f0151846040518363ffffffff1660e01b81526004016103b9929190610c09565b5f604051808303815f87803b1580156103d0575f5ffd5b505af11580156103e2573d5f5f3e3d5ffd5b50505050505050565b7f5d76ed4c69af2700c0f0549cc92f1d2de4161569993a5827febf0e87cd9d05c65f1c73ffffffffffffffffffffffffffffffffffffffff16638635a591835f0151836040518363ffffffff1660e01b815260040161044b929190610c09565b5f6040518083038186803b158015610461575f5ffd5b505afa158015610473573d5f5f3e3d5ffd5b505050505050565b7fa60b329c3b13cac404a59349a3c90de858eed5c9e20f3e57c0f7383ab62257955f1c73ffffffffffffffffffffffffffffffffffffffff16630affc437835f0151836040518363ffffffff1660e01b81526004016104db929190610c3f565b5f604051808303815f87803b1580156104f2575f5ffd5b505af1158015610504573d5f5f3e3d5ffd5b505050505050565b7fa60b329c3b13cac404a59349a3c90de858eed5c9e20f3e57c0f7383ab62257955f1c73ffffffffffffffffffffffffffffffffffffffff1663b14a2676835f0151836040518363ffffffff1660e01b815260040161056c929190610c3f565b5f6040518083038186803b158015610582575f5ffd5b505afa158015610594573d5f5f3e3d5ffd5b505050505050565b7f5d76ed4c69af2700c0f0549cc92f1d2de4161569993a5827febf0e87cd9d05c65f1c73ffffffffffffffffffffffffffffffffffffffff1663feac36d7835f0151836040518363ffffffff1660e01b81526004016105fc929190610c09565b5f604051808303815f87803b158015610613575f5ffd5b505af1158015610625573d5f5f3e3d5ffd5b505050505050565b7fdb435ac8f7748d114bf4e740895cb428cb79ea557ee94ab5d3f6b282fefe18b65f1c73ffffffffffffffffffffffffffffffffffffffff1663634bc7db835f0151836040518363ffffffff1660e01b815260040161068d929190610c09565b5f604051808303815f87803b1580156106a4575f5ffd5b505af11580156106b6573d5f5f3e3d5ffd5b505050505050565b5f7fdb435ac8f7748d114bf4e740895cb428cb79ea557ee94ab5d3f6b282fefe18b65f1c73ffffffffffffffffffffffffffffffffffffffff16635f55e928835f01516040518263ffffffff1660e01b815260040161071d9190610bb1565b602060405180830381865afa158015610738573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061075c9190610bde565b9050919050565b5f604051905090565b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6107ba82610774565b810181811067ffffffffffffffff821117156107d9576107d8610784565b5b80604052505050565b5f6107eb610763565b90506107f782826107b1565b919050565b5f819050919050565b61080e816107fc565b8114610818575f5ffd5b50565b5f8135905061082981610805565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6108588261082f565b9050919050565b6108688161084e565b8114610872575f5ffd5b50565b5f813590506108838161085f565b92915050565b5f6040828403121561089e5761089d610770565b5b6108a860406107e2565b90505f6108b78482850161081b565b5f8301525060206108ca84828501610875565b60208301525092915050565b5f604082840312156108eb576108ea61076c565b5b5f6108f884828501610889565b91505092915050565b61090a816107fc565b82525050565b5f6020820190506109235f830184610901565b92915050565b5f5f6060838503121561093f5761093e61076c565b5b5f61094c85828601610889565b925050604061095d8582860161081b565b9150509250929050565b5f6020828403121561097c5761097b610770565b5b61098660206107e2565b90505f6109958482850161081b565b5f8301525092915050565b5f5f604083850312156109b6576109b561076c565b5b5f6109c385828601610967565b92505060206109d48582860161081b565b9150509250929050565b5f602082840312156109f3576109f2610770565b5b6109fd60206107e2565b90505f610a0c8482850161081b565b5f8301525092915050565b5f819050919050565b610a2981610a17565b8114610a33575f5ffd5b50565b5f81359050610a4481610a20565b92915050565b5f5f60408385031215610a6057610a5f61076c565b5b5f610a6d858286016109de565b9250506020610a7e85828601610a36565b9150509250929050565b5f60208284031215610a9d57610a9c610770565b5b610aa760206107e2565b90505f610ab68482850161081b565b5f8301525092915050565b5f5f60408385031215610ad757610ad661076c565b5b5f610ae485828601610a88565b9250506020610af58582860161081b565b9150509250929050565b5f60208284031215610b1457610b1361076c565b5b5f610b2184828501610a88565b91505092915050565b5f82825260208201905092915050565b7f4e6f7420746865206f776e6572000000000000000000000000000000000000005f82015250565b5f610b6e600d83610b2a565b9150610b7982610b3a565b602082019050919050565b5f6020820190508181035f830152610b9b81610b62565b9050919050565b610bab816107fc565b82525050565b5f602082019050610bc45f830184610ba2565b92915050565b5f81519050610bd881610805565b92915050565b5f60208284031215610bf357610bf261076c565b5b5f610c0084828501610bca565b91505092915050565b5f604082019050610c1c5f830185610ba2565b610c296020830184610ba2565b9392505050565b610c3981610a17565b82525050565b5f604082019050610c525f830185610ba2565b610c5f6020830184610c30565b939250505056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"a\x0Cfa\0M`\x0B\x82\x82\x829\x80Q_\x1A`s\x14`AW\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R_`\x04R`$_\xFD[0_R`s\x81S\x82\x81\xF3\xFEs\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x000\x14`\x80`@R`\x046\x10a\0\x91W_5`\xE0\x1C\x80c]KQj\x11a\0dW\x80c]KQj\x14a\x011W\x80c\xC2>\xA9?\x14a\x01MW\x80c\xC3Q\xE5\x0E\x14a\x01uW\x80c\xCEa!s\x14a\x01\x9DWa\0\x91V[\x80c\x19\xA8\xA2\xEF\x14a\0\x95W\x80cA\xB5\xD9\xD6\x14a\0\xC5W\x80cOxt)\x14a\0\xEDW\x80cQ\xBE)\x98\x14a\x01\tW[__\xFD[a\0\xAF`\x04\x806\x03\x81\x01\x90a\0\xAA\x91\x90a\x08\xD6V[a\x01\xCDV[`@Qa\0\xBC\x91\x90a\t\x10V[`@Q\x80\x91\x03\x90\xF3[\x81\x80\x15a\0\xD0W__\xFD[Pa\0\xEB`\x04\x806\x03\x81\x01\x90a\0\xE6\x91\x90a\t)V[a\x02\xE6V[\0[a\x01\x07`\x04\x806\x03\x81\x01\x90a\x01\x02\x91\x90a\t\xA0V[a\x03\xEBV[\0[\x81\x80\x15a\x01\x14W__\xFD[Pa\x01/`\x04\x806\x03\x81\x01\x90a\x01*\x91\x90a\nJV[a\x04{V[\0[a\x01K`\x04\x806\x03\x81\x01\x90a\x01F\x91\x90a\nJV[a\x05\x0CV[\0[\x81\x80\x15a\x01XW__\xFD[Pa\x01s`\x04\x806\x03\x81\x01\x90a\x01n\x91\x90a\t\xA0V[a\x05\x9CV[\0[\x81\x80\x15a\x01\x80W__\xFD[Pa\x01\x9B`\x04\x806\x03\x81\x01\x90a\x01\x96\x91\x90a\n\xC1V[a\x06-V[\0[a\x01\xB7`\x04\x806\x03\x81\x01\x90a\x01\xB2\x91\x90a\n\xFFV[a\x06\xBEV[`@Qa\x01\xC4\x91\x90a\t\x10V[`@Q\x80\x91\x03\x90\xF3[_\x812s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81` \x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x02AW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x028\x90a\x0B\x84V[`@Q\x80\x91\x03\x90\xFD[\x7F}-\x1F\x8D\x84\xD1\x95\xDC\xC8\x99)\x0E\xB1\x83R\x04\x0B\xD9\"=\xD7\xD5\x01\xE6X\xC3\xBE\xD6\xE0\xA6\x07\x0E_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8E\xAAj\xC0\x84_\x01Q`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02\x9F\x91\x90a\x0B\xB1V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02\xBAW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xDE\x91\x90a\x0B\xDEV[\x91PP\x91\x90PV[\x812s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81` \x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x03YW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x03P\x90a\x0B\x84V[`@Q\x80\x91\x03\x90\xFD[\x7F}-\x1F\x8D\x84\xD1\x95\xDC\xC8\x99)\x0E\xB1\x83R\x04\x0B\xD9\"=\xD7\xD5\x01\xE6X\xC3\xBE\xD6\xE0\xA6\x07\x0E_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xF7\x1Fz%\x84_\x01Q\x84`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03\xB9\x92\x91\x90a\x0C\tV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x03\xD0W__\xFD[PZ\xF1\x15\x80\x15a\x03\xE2W=__>=_\xFD[PPPPPPPV[\x7F]v\xEDLi\xAF'\0\xC0\xF0T\x9C\xC9/\x1D-\xE4\x16\x15i\x99:X'\xFE\xBF\x0E\x87\xCD\x9D\x05\xC6_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x865\xA5\x91\x83_\x01Q\x83`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04K\x92\x91\x90a\x0C\tV[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x04aW__\xFD[PZ\xFA\x15\x80\x15a\x04sW=__>=_\xFD[PPPPPPV[\x7F\xA6\x0B2\x9C;\x13\xCA\xC4\x04\xA5\x93I\xA3\xC9\r\xE8X\xEE\xD5\xC9\xE2\x0F>W\xC0\xF78:\xB6\"W\x95_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\n\xFF\xC47\x83_\x01Q\x83`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04\xDB\x92\x91\x90a\x0C?V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x04\xF2W__\xFD[PZ\xF1\x15\x80\x15a\x05\x04W=__>=_\xFD[PPPPPPV[\x7F\xA6\x0B2\x9C;\x13\xCA\xC4\x04\xA5\x93I\xA3\xC9\r\xE8X\xEE\xD5\xC9\xE2\x0F>W\xC0\xF78:\xB6\"W\x95_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xB1J&v\x83_\x01Q\x83`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x05l\x92\x91\x90a\x0C?V[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x05\x82W__\xFD[PZ\xFA\x15\x80\x15a\x05\x94W=__>=_\xFD[PPPPPPV[\x7F]v\xEDLi\xAF'\0\xC0\xF0T\x9C\xC9/\x1D-\xE4\x16\x15i\x99:X'\xFE\xBF\x0E\x87\xCD\x9D\x05\xC6_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xFE\xAC6\xD7\x83_\x01Q\x83`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x05\xFC\x92\x91\x90a\x0C\tV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x06\x13W__\xFD[PZ\xF1\x15\x80\x15a\x06%W=__>=_\xFD[PPPPPPV[\x7F\xDBCZ\xC8\xF7t\x8D\x11K\xF4\xE7@\x89\\\xB4(\xCBy\xEAU~\xE9J\xB5\xD3\xF6\xB2\x82\xFE\xFE\x18\xB6_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16ccK\xC7\xDB\x83_\x01Q\x83`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x06\x8D\x92\x91\x90a\x0C\tV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x06\xA4W__\xFD[PZ\xF1\x15\x80\x15a\x06\xB6W=__>=_\xFD[PPPPPPV[_\x7F\xDBCZ\xC8\xF7t\x8D\x11K\xF4\xE7@\x89\\\xB4(\xCBy\xEAU~\xE9J\xB5\xD3\xF6\xB2\x82\xFE\xFE\x18\xB6_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c_U\xE9(\x83_\x01Q`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x07\x1D\x91\x90a\x0B\xB1V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x078W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07\\\x91\x90a\x0B\xDEV[\x90P\x91\x90PV[_`@Q\x90P\x90V[__\xFD[__\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x07\xBA\x82a\x07tV[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x07\xD9Wa\x07\xD8a\x07\x84V[[\x80`@RPPPV[_a\x07\xEBa\x07cV[\x90Pa\x07\xF7\x82\x82a\x07\xB1V[\x91\x90PV[_\x81\x90P\x91\x90PV[a\x08\x0E\x81a\x07\xFCV[\x81\x14a\x08\x18W__\xFD[PV[_\x815\x90Pa\x08)\x81a\x08\x05V[\x92\x91PPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x08X\x82a\x08/V[\x90P\x91\x90PV[a\x08h\x81a\x08NV[\x81\x14a\x08rW__\xFD[PV[_\x815\x90Pa\x08\x83\x81a\x08_V[\x92\x91PPV[_`@\x82\x84\x03\x12\x15a\x08\x9EWa\x08\x9Da\x07pV[[a\x08\xA8`@a\x07\xE2V[\x90P_a\x08\xB7\x84\x82\x85\x01a\x08\x1BV[_\x83\x01RP` a\x08\xCA\x84\x82\x85\x01a\x08uV[` \x83\x01RP\x92\x91PPV[_`@\x82\x84\x03\x12\x15a\x08\xEBWa\x08\xEAa\x07lV[[_a\x08\xF8\x84\x82\x85\x01a\x08\x89V[\x91PP\x92\x91PPV[a\t\n\x81a\x07\xFCV[\x82RPPV[_` \x82\x01\x90Pa\t#_\x83\x01\x84a\t\x01V[\x92\x91PPV[__``\x83\x85\x03\x12\x15a\t?Wa\t>a\x07lV[[_a\tL\x85\x82\x86\x01a\x08\x89V[\x92PP`@a\t]\x85\x82\x86\x01a\x08\x1BV[\x91PP\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\t|Wa\t{a\x07pV[[a\t\x86` a\x07\xE2V[\x90P_a\t\x95\x84\x82\x85\x01a\x08\x1BV[_\x83\x01RP\x92\x91PPV[__`@\x83\x85\x03\x12\x15a\t\xB6Wa\t\xB5a\x07lV[[_a\t\xC3\x85\x82\x86\x01a\tgV[\x92PP` a\t\xD4\x85\x82\x86\x01a\x08\x1BV[\x91PP\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\t\xF3Wa\t\xF2a\x07pV[[a\t\xFD` a\x07\xE2V[\x90P_a\n\x0C\x84\x82\x85\x01a\x08\x1BV[_\x83\x01RP\x92\x91PPV[_\x81\x90P\x91\x90PV[a\n)\x81a\n\x17V[\x81\x14a\n3W__\xFD[PV[_\x815\x90Pa\nD\x81a\n V[\x92\x91PPV[__`@\x83\x85\x03\x12\x15a\n`Wa\n_a\x07lV[[_a\nm\x85\x82\x86\x01a\t\xDEV[\x92PP` a\n~\x85\x82\x86\x01a\n6V[\x91PP\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\n\x9DWa\n\x9Ca\x07pV[[a\n\xA7` a\x07\xE2V[\x90P_a\n\xB6\x84\x82\x85\x01a\x08\x1BV[_\x83\x01RP\x92\x91PPV[__`@\x83\x85\x03\x12\x15a\n\xD7Wa\n\xD6a\x07lV[[_a\n\xE4\x85\x82\x86\x01a\n\x88V[\x92PP` a\n\xF5\x85\x82\x86\x01a\x08\x1BV[\x91PP\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\x0B\x14Wa\x0B\x13a\x07lV[[_a\x0B!\x84\x82\x85\x01a\n\x88V[\x91PP\x92\x91PPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FNot the owner\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_a\x0Bn`\r\x83a\x0B*V[\x91Pa\x0By\x82a\x0B:V[` \x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x0B\x9B\x81a\x0BbV[\x90P\x91\x90PV[a\x0B\xAB\x81a\x07\xFCV[\x82RPPV[_` \x82\x01\x90Pa\x0B\xC4_\x83\x01\x84a\x0B\xA2V[\x92\x91PPV[_\x81Q\x90Pa\x0B\xD8\x81a\x08\x05V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x0B\xF3Wa\x0B\xF2a\x07lV[[_a\x0C\0\x84\x82\x85\x01a\x0B\xCAV[\x91PP\x92\x91PPV[_`@\x82\x01\x90Pa\x0C\x1C_\x83\x01\x85a\x0B\xA2V[a\x0C)` \x83\x01\x84a\x0B\xA2V[\x93\x92PPPV[a\x0C9\x81a\n\x17V[\x82RPPV[_`@\x82\x01\x90Pa\x0CR_\x83\x01\x85a\x0B\xA2V[a\x0C_` \x83\x01\x84a\x0C0V[\x93\x92PPPV",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x7300000000000000000000000000000000000000003014608060405260043610610091575f3560e01c80635d4b516a116100645780635d4b516a14610131578063c23ea93f1461014d578063c351e50e14610175578063ce6121731461019d57610091565b806319a8a2ef1461009557806341b5d9d6146100c55780634f787429146100ed57806351be299814610109575b5f5ffd5b6100af60048036038101906100aa91906108d6565b6101cd565b6040516100bc9190610910565b60405180910390f35b8180156100d0575f5ffd5b506100eb60048036038101906100e69190610929565b6102e6565b005b610107600480360381019061010291906109a0565b6103eb565b005b818015610114575f5ffd5b5061012f600480360381019061012a9190610a4a565b61047b565b005b61014b60048036038101906101469190610a4a565b61050c565b005b818015610158575f5ffd5b50610173600480360381019061016e91906109a0565b61059c565b005b818015610180575f5ffd5b5061019b60048036038101906101969190610ac1565b61062d565b005b6101b760048036038101906101b29190610aff565b6106be565b6040516101c49190610910565b60405180910390f35b5f813273ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614610241576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023890610b84565b60405180910390fd5b7f7d2d1f8d84d195dcc899290eb18352040bd9223dd7d501e658c3bed6e0a6070e5f1c73ffffffffffffffffffffffffffffffffffffffff16638eaa6ac0845f01516040518263ffffffff1660e01b815260040161029f9190610bb1565b602060405180830381865afa1580156102ba573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102de9190610bde565b915050919050565b813273ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614610359576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035090610b84565b60405180910390fd5b7f7d2d1f8d84d195dcc899290eb18352040bd9223dd7d501e658c3bed6e0a6070e5f1c73ffffffffffffffffffffffffffffffffffffffff1663f71f7a25845f0151846040518363ffffffff1660e01b81526004016103b9929190610c09565b5f604051808303815f87803b1580156103d0575f5ffd5b505af11580156103e2573d5f5f3e3d5ffd5b50505050505050565b7f5d76ed4c69af2700c0f0549cc92f1d2de4161569993a5827febf0e87cd9d05c65f1c73ffffffffffffffffffffffffffffffffffffffff16638635a591835f0151836040518363ffffffff1660e01b815260040161044b929190610c09565b5f6040518083038186803b158015610461575f5ffd5b505afa158015610473573d5f5f3e3d5ffd5b505050505050565b7fa60b329c3b13cac404a59349a3c90de858eed5c9e20f3e57c0f7383ab62257955f1c73ffffffffffffffffffffffffffffffffffffffff16630affc437835f0151836040518363ffffffff1660e01b81526004016104db929190610c3f565b5f604051808303815f87803b1580156104f2575f5ffd5b505af1158015610504573d5f5f3e3d5ffd5b505050505050565b7fa60b329c3b13cac404a59349a3c90de858eed5c9e20f3e57c0f7383ab62257955f1c73ffffffffffffffffffffffffffffffffffffffff1663b14a2676835f0151836040518363ffffffff1660e01b815260040161056c929190610c3f565b5f6040518083038186803b158015610582575f5ffd5b505afa158015610594573d5f5f3e3d5ffd5b505050505050565b7f5d76ed4c69af2700c0f0549cc92f1d2de4161569993a5827febf0e87cd9d05c65f1c73ffffffffffffffffffffffffffffffffffffffff1663feac36d7835f0151836040518363ffffffff1660e01b81526004016105fc929190610c09565b5f604051808303815f87803b158015610613575f5ffd5b505af1158015610625573d5f5f3e3d5ffd5b505050505050565b7fdb435ac8f7748d114bf4e740895cb428cb79ea557ee94ab5d3f6b282fefe18b65f1c73ffffffffffffffffffffffffffffffffffffffff1663634bc7db835f0151836040518363ffffffff1660e01b815260040161068d929190610c09565b5f604051808303815f87803b1580156106a4575f5ffd5b505af11580156106b6573d5f5f3e3d5ffd5b505050505050565b5f7fdb435ac8f7748d114bf4e740895cb428cb79ea557ee94ab5d3f6b282fefe18b65f1c73ffffffffffffffffffffffffffffffffffffffff16635f55e928835f01516040518263ffffffff1660e01b815260040161071d9190610bb1565b602060405180830381865afa158015610738573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061075c9190610bde565b9050919050565b5f604051905090565b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6107ba82610774565b810181811067ffffffffffffffff821117156107d9576107d8610784565b5b80604052505050565b5f6107eb610763565b90506107f782826107b1565b919050565b5f819050919050565b61080e816107fc565b8114610818575f5ffd5b50565b5f8135905061082981610805565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6108588261082f565b9050919050565b6108688161084e565b8114610872575f5ffd5b50565b5f813590506108838161085f565b92915050565b5f6040828403121561089e5761089d610770565b5b6108a860406107e2565b90505f6108b78482850161081b565b5f8301525060206108ca84828501610875565b60208301525092915050565b5f604082840312156108eb576108ea61076c565b5b5f6108f884828501610889565b91505092915050565b61090a816107fc565b82525050565b5f6020820190506109235f830184610901565b92915050565b5f5f6060838503121561093f5761093e61076c565b5b5f61094c85828601610889565b925050604061095d8582860161081b565b9150509250929050565b5f6020828403121561097c5761097b610770565b5b61098660206107e2565b90505f6109958482850161081b565b5f8301525092915050565b5f5f604083850312156109b6576109b561076c565b5b5f6109c385828601610967565b92505060206109d48582860161081b565b9150509250929050565b5f602082840312156109f3576109f2610770565b5b6109fd60206107e2565b90505f610a0c8482850161081b565b5f8301525092915050565b5f819050919050565b610a2981610a17565b8114610a33575f5ffd5b50565b5f81359050610a4481610a20565b92915050565b5f5f60408385031215610a6057610a5f61076c565b5b5f610a6d858286016109de565b9250506020610a7e85828601610a36565b9150509250929050565b5f60208284031215610a9d57610a9c610770565b5b610aa760206107e2565b90505f610ab68482850161081b565b5f8301525092915050565b5f5f60408385031215610ad757610ad661076c565b5b5f610ae485828601610a88565b9250506020610af58582860161081b565b9150509250929050565b5f60208284031215610b1457610b1361076c565b5b5f610b2184828501610a88565b91505092915050565b5f82825260208201905092915050565b7f4e6f7420746865206f776e6572000000000000000000000000000000000000005f82015250565b5f610b6e600d83610b2a565b9150610b7982610b3a565b602082019050919050565b5f6020820190508181035f830152610b9b81610b62565b9050919050565b610bab816107fc565b82525050565b5f602082019050610bc45f830184610ba2565b92915050565b5f81519050610bd881610805565b92915050565b5f60208284031215610bf357610bf261076c565b5b5f610c0084828501610bca565b91505092915050565b5f604082019050610c1c5f830185610ba2565b610c296020830184610ba2565b9392505050565b610c3981610a17565b82525050565b5f604082019050610c525f830185610ba2565b610c5f6020830184610c30565b939250505056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"s\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x000\x14`\x80`@R`\x046\x10a\0\x91W_5`\xE0\x1C\x80c]KQj\x11a\0dW\x80c]KQj\x14a\x011W\x80c\xC2>\xA9?\x14a\x01MW\x80c\xC3Q\xE5\x0E\x14a\x01uW\x80c\xCEa!s\x14a\x01\x9DWa\0\x91V[\x80c\x19\xA8\xA2\xEF\x14a\0\x95W\x80cA\xB5\xD9\xD6\x14a\0\xC5W\x80cOxt)\x14a\0\xEDW\x80cQ\xBE)\x98\x14a\x01\tW[__\xFD[a\0\xAF`\x04\x806\x03\x81\x01\x90a\0\xAA\x91\x90a\x08\xD6V[a\x01\xCDV[`@Qa\0\xBC\x91\x90a\t\x10V[`@Q\x80\x91\x03\x90\xF3[\x81\x80\x15a\0\xD0W__\xFD[Pa\0\xEB`\x04\x806\x03\x81\x01\x90a\0\xE6\x91\x90a\t)V[a\x02\xE6V[\0[a\x01\x07`\x04\x806\x03\x81\x01\x90a\x01\x02\x91\x90a\t\xA0V[a\x03\xEBV[\0[\x81\x80\x15a\x01\x14W__\xFD[Pa\x01/`\x04\x806\x03\x81\x01\x90a\x01*\x91\x90a\nJV[a\x04{V[\0[a\x01K`\x04\x806\x03\x81\x01\x90a\x01F\x91\x90a\nJV[a\x05\x0CV[\0[\x81\x80\x15a\x01XW__\xFD[Pa\x01s`\x04\x806\x03\x81\x01\x90a\x01n\x91\x90a\t\xA0V[a\x05\x9CV[\0[\x81\x80\x15a\x01\x80W__\xFD[Pa\x01\x9B`\x04\x806\x03\x81\x01\x90a\x01\x96\x91\x90a\n\xC1V[a\x06-V[\0[a\x01\xB7`\x04\x806\x03\x81\x01\x90a\x01\xB2\x91\x90a\n\xFFV[a\x06\xBEV[`@Qa\x01\xC4\x91\x90a\t\x10V[`@Q\x80\x91\x03\x90\xF3[_\x812s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81` \x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x02AW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x028\x90a\x0B\x84V[`@Q\x80\x91\x03\x90\xFD[\x7F}-\x1F\x8D\x84\xD1\x95\xDC\xC8\x99)\x0E\xB1\x83R\x04\x0B\xD9\"=\xD7\xD5\x01\xE6X\xC3\xBE\xD6\xE0\xA6\x07\x0E_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x8E\xAAj\xC0\x84_\x01Q`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02\x9F\x91\x90a\x0B\xB1V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02\xBAW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xDE\x91\x90a\x0B\xDEV[\x91PP\x91\x90PV[\x812s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81` \x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x03YW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x03P\x90a\x0B\x84V[`@Q\x80\x91\x03\x90\xFD[\x7F}-\x1F\x8D\x84\xD1\x95\xDC\xC8\x99)\x0E\xB1\x83R\x04\x0B\xD9\"=\xD7\xD5\x01\xE6X\xC3\xBE\xD6\xE0\xA6\x07\x0E_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xF7\x1Fz%\x84_\x01Q\x84`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03\xB9\x92\x91\x90a\x0C\tV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x03\xD0W__\xFD[PZ\xF1\x15\x80\x15a\x03\xE2W=__>=_\xFD[PPPPPPPV[\x7F]v\xEDLi\xAF'\0\xC0\xF0T\x9C\xC9/\x1D-\xE4\x16\x15i\x99:X'\xFE\xBF\x0E\x87\xCD\x9D\x05\xC6_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x865\xA5\x91\x83_\x01Q\x83`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04K\x92\x91\x90a\x0C\tV[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x04aW__\xFD[PZ\xFA\x15\x80\x15a\x04sW=__>=_\xFD[PPPPPPV[\x7F\xA6\x0B2\x9C;\x13\xCA\xC4\x04\xA5\x93I\xA3\xC9\r\xE8X\xEE\xD5\xC9\xE2\x0F>W\xC0\xF78:\xB6\"W\x95_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\n\xFF\xC47\x83_\x01Q\x83`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04\xDB\x92\x91\x90a\x0C?V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x04\xF2W__\xFD[PZ\xF1\x15\x80\x15a\x05\x04W=__>=_\xFD[PPPPPPV[\x7F\xA6\x0B2\x9C;\x13\xCA\xC4\x04\xA5\x93I\xA3\xC9\r\xE8X\xEE\xD5\xC9\xE2\x0F>W\xC0\xF78:\xB6\"W\x95_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xB1J&v\x83_\x01Q\x83`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x05l\x92\x91\x90a\x0C?V[_`@Q\x80\x83\x03\x81\x86\x80;\x15\x80\x15a\x05\x82W__\xFD[PZ\xFA\x15\x80\x15a\x05\x94W=__>=_\xFD[PPPPPPV[\x7F]v\xEDLi\xAF'\0\xC0\xF0T\x9C\xC9/\x1D-\xE4\x16\x15i\x99:X'\xFE\xBF\x0E\x87\xCD\x9D\x05\xC6_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xFE\xAC6\xD7\x83_\x01Q\x83`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x05\xFC\x92\x91\x90a\x0C\tV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x06\x13W__\xFD[PZ\xF1\x15\x80\x15a\x06%W=__>=_\xFD[PPPPPPV[\x7F\xDBCZ\xC8\xF7t\x8D\x11K\xF4\xE7@\x89\\\xB4(\xCBy\xEAU~\xE9J\xB5\xD3\xF6\xB2\x82\xFE\xFE\x18\xB6_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16ccK\xC7\xDB\x83_\x01Q\x83`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x06\x8D\x92\x91\x90a\x0C\tV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x06\xA4W__\xFD[PZ\xF1\x15\x80\x15a\x06\xB6W=__>=_\xFD[PPPPPPV[_\x7F\xDBCZ\xC8\xF7t\x8D\x11K\xF4\xE7@\x89\\\xB4(\xCBy\xEAU~\xE9J\xB5\xD3\xF6\xB2\x82\xFE\xFE\x18\xB6_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c_U\xE9(\x83_\x01Q`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x07\x1D\x91\x90a\x0B\xB1V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x078W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07\\\x91\x90a\x0B\xDEV[\x90P\x91\x90PV[_`@Q\x90P\x90V[__\xFD[__\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x07\xBA\x82a\x07tV[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x07\xD9Wa\x07\xD8a\x07\x84V[[\x80`@RPPPV[_a\x07\xEBa\x07cV[\x90Pa\x07\xF7\x82\x82a\x07\xB1V[\x91\x90PV[_\x81\x90P\x91\x90PV[a\x08\x0E\x81a\x07\xFCV[\x81\x14a\x08\x18W__\xFD[PV[_\x815\x90Pa\x08)\x81a\x08\x05V[\x92\x91PPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x08X\x82a\x08/V[\x90P\x91\x90PV[a\x08h\x81a\x08NV[\x81\x14a\x08rW__\xFD[PV[_\x815\x90Pa\x08\x83\x81a\x08_V[\x92\x91PPV[_`@\x82\x84\x03\x12\x15a\x08\x9EWa\x08\x9Da\x07pV[[a\x08\xA8`@a\x07\xE2V[\x90P_a\x08\xB7\x84\x82\x85\x01a\x08\x1BV[_\x83\x01RP` a\x08\xCA\x84\x82\x85\x01a\x08uV[` \x83\x01RP\x92\x91PPV[_`@\x82\x84\x03\x12\x15a\x08\xEBWa\x08\xEAa\x07lV[[_a\x08\xF8\x84\x82\x85\x01a\x08\x89V[\x91PP\x92\x91PPV[a\t\n\x81a\x07\xFCV[\x82RPPV[_` \x82\x01\x90Pa\t#_\x83\x01\x84a\t\x01V[\x92\x91PPV[__``\x83\x85\x03\x12\x15a\t?Wa\t>a\x07lV[[_a\tL\x85\x82\x86\x01a\x08\x89V[\x92PP`@a\t]\x85\x82\x86\x01a\x08\x1BV[\x91PP\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\t|Wa\t{a\x07pV[[a\t\x86` a\x07\xE2V[\x90P_a\t\x95\x84\x82\x85\x01a\x08\x1BV[_\x83\x01RP\x92\x91PPV[__`@\x83\x85\x03\x12\x15a\t\xB6Wa\t\xB5a\x07lV[[_a\t\xC3\x85\x82\x86\x01a\tgV[\x92PP` a\t\xD4\x85\x82\x86\x01a\x08\x1BV[\x91PP\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\t\xF3Wa\t\xF2a\x07pV[[a\t\xFD` a\x07\xE2V[\x90P_a\n\x0C\x84\x82\x85\x01a\x08\x1BV[_\x83\x01RP\x92\x91PPV[_\x81\x90P\x91\x90PV[a\n)\x81a\n\x17V[\x81\x14a\n3W__\xFD[PV[_\x815\x90Pa\nD\x81a\n V[\x92\x91PPV[__`@\x83\x85\x03\x12\x15a\n`Wa\n_a\x07lV[[_a\nm\x85\x82\x86\x01a\t\xDEV[\x92PP` a\n~\x85\x82\x86\x01a\n6V[\x91PP\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\n\x9DWa\n\x9Ca\x07pV[[a\n\xA7` a\x07\xE2V[\x90P_a\n\xB6\x84\x82\x85\x01a\x08\x1BV[_\x83\x01RP\x92\x91PPV[__`@\x83\x85\x03\x12\x15a\n\xD7Wa\n\xD6a\x07lV[[_a\n\xE4\x85\x82\x86\x01a\n\x88V[\x92PP` a\n\xF5\x85\x82\x86\x01a\x08\x1BV[\x91PP\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\x0B\x14Wa\x0B\x13a\x07lV[[_a\x0B!\x84\x82\x85\x01a\n\x88V[\x91PP\x92\x91PPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FNot the owner\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_a\x0Bn`\r\x83a\x0B*V[\x91Pa\x0By\x82a\x0B:V[` \x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x0B\x9B\x81a\x0BbV[\x90P\x91\x90PV[a\x0B\xAB\x81a\x07\xFCV[\x82RPPV[_` \x82\x01\x90Pa\x0B\xC4_\x83\x01\x84a\x0B\xA2V[\x92\x91PPV[_\x81Q\x90Pa\x0B\xD8\x81a\x08\x05V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x0B\xF3Wa\x0B\xF2a\x07lV[[_a\x0C\0\x84\x82\x85\x01a\x0B\xCAV[\x91PP\x92\x91PPV[_`@\x82\x01\x90Pa\x0C\x1C_\x83\x01\x85a\x0B\xA2V[a\x0C)` \x83\x01\x84a\x0B\xA2V[\x93\x92PPPV[a\x0C9\x81a\n\x17V[\x82RPPV[_`@\x82\x01\x90Pa\x0CR_\x83\x01\x85a\x0B\xA2V[a\x0C_` \x83\x01\x84a\x0C0V[\x93\x92PPPV",
    );
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**```solidity
struct Constant { bytes32 key; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Constant {
        #[allow(missing_docs)]
        pub key: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Constant> for UnderlyingRustTuple<'_> {
            fn from(value: Constant) -> Self {
                (value.key,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Constant {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { key: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Constant {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Constant {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.key),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Constant {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Constant {
            const NAME: &'static str = "Constant";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed("Constant(bytes32 key)")
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::SolType>::eip712_data_word(&self.key)
                    .0
                    .to_vec()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Constant {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.key)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(&rust.key, out);
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**```solidity
struct Counter { bytes32 key; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Counter {
        #[allow(missing_docs)]
        pub key: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Counter> for UnderlyingRustTuple<'_> {
            fn from(value: Counter) -> Self {
                (value.key,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Counter {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { key: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Counter {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Counter {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.key),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Counter {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Counter {
            const NAME: &'static str = "Counter";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed("Counter(bytes32 key)")
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::SolType>::eip712_data_word(&self.key)
                    .0
                    .to_vec()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Counter {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.key)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(&rust.key, out);
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**```solidity
struct Owned { bytes32 key; address owner; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Owned {
        #[allow(missing_docs)]
        pub key: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::FixedBytes<32>,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::FixedBytes<32>,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Owned> for UnderlyingRustTuple<'_> {
            fn from(value: Owned) -> Self {
                (value.key, value.owner)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Owned {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    key: tuple.0,
                    owner: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Owned {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Owned {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.key),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Owned {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Owned {
            const NAME: &'static str = "Owned";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Owned(bytes32 key,address owner)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.key)
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.owner,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Owned {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.key)
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.owner,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(&rust.key, out);
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.owner,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**```solidity
struct Set { bytes32 key; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Set {
        #[allow(missing_docs)]
        pub key: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Set> for UnderlyingRustTuple<'_> {
            fn from(value: Set) -> Self {
                (value.key,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Set {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { key: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Set {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Set {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.key),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Set {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Set {
            const NAME: &'static str = "Set";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed("Set(bytes32 key)")
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::SolType>::eip712_data_word(&self.key)
                    .0
                    .to_vec()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Set {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.key)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(&rust.key, out);
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `get((bytes32,address))` and selector `0xe2959982`.
```solidity
function get(Owned memory o) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getCall {
        #[allow(missing_docs)]
        pub o: <Owned as alloy::sol_types::SolType>::RustType,
    }
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`get((bytes32,address))`](getCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (Owned,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <Owned as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getCall> for UnderlyingRustTuple<'_> {
                fn from(value: getCall) -> Self {
                    (value.o,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { o: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getCall {
            type Parameters<'a> = (Owned,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "get((bytes32,address))";
            const SELECTOR: [u8; 4] = [226u8, 149u8, 153u8, 130u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<Owned as alloy_sol_types::SolType>::tokenize(&self.o),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `requireExist((bytes32),bytes32)` and selector `0xf19eadcc`.
```solidity
function requireExist(Set memory s, bytes32 value) external view;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct requireExistCall {
        #[allow(missing_docs)]
        pub s: <Set as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`requireExist((bytes32),bytes32)`](requireExistCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct requireExistReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                Set,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <Set as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<requireExistCall> for UnderlyingRustTuple<'_> {
                fn from(value: requireExistCall) -> Self {
                    (value.s, value.value)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for requireExistCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { s: tuple.0, value: tuple.1 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<requireExistReturn> for UnderlyingRustTuple<'_> {
                fn from(value: requireExistReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for requireExistReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for requireExistCall {
            type Parameters<'a> = (Set, alloy::sol_types::sol_data::FixedBytes<32>);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = requireExistReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "requireExist((bytes32),bytes32)";
            const SELECTOR: [u8; 4] = [241u8, 158u8, 173u8, 204u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <Set as alloy_sol_types::SolType>::tokenize(&self.s),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `requireGet((bytes32))` and selector `0xfdd4a73d`.
```solidity
function requireGet(Constant memory c) external view returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct requireGetCall {
        #[allow(missing_docs)]
        pub c: <Constant as alloy::sol_types::SolType>::RustType,
    }
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`requireGet((bytes32))`](requireGetCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct requireGetReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (Constant,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <Constant as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<requireGetCall> for UnderlyingRustTuple<'_> {
                fn from(value: requireGetCall) -> Self {
                    (value.c,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for requireGetCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { c: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<requireGetReturn> for UnderlyingRustTuple<'_> {
                fn from(value: requireGetReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for requireGetReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for requireGetCall {
            type Parameters<'a> = (Constant,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = requireGetReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "requireGet((bytes32))";
            const SELECTOR: [u8; 4] = [253u8, 212u8, 167u8, 61u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<Constant as alloy_sol_types::SolType>::tokenize(&self.c),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `requireGte((bytes32),uint256)` and selector `0x57ff741c`.
```solidity
function requireGte(Counter memory c, uint256 value) external view;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct requireGteCall {
        #[allow(missing_docs)]
        pub c: <Counter as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`requireGte((bytes32),uint256)`](requireGteCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct requireGteReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                Counter,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <Counter as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<requireGteCall> for UnderlyingRustTuple<'_> {
                fn from(value: requireGteCall) -> Self {
                    (value.c, value.value)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for requireGteCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { c: tuple.0, value: tuple.1 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<requireGteReturn> for UnderlyingRustTuple<'_> {
                fn from(value: requireGteReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for requireGteReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for requireGteCall {
            type Parameters<'a> = (Counter, alloy::sol_types::sol_data::Uint<256>);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = requireGteReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "requireGte((bytes32),uint256)";
            const SELECTOR: [u8; 4] = [87u8, 255u8, 116u8, 28u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <Counter as alloy_sol_types::SolType>::tokenize(&self.c),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`FastTypes`](self) function calls.
    #[derive()]
    pub enum FastTypesCalls {
        #[allow(missing_docs)]
        get(getCall),
        #[allow(missing_docs)]
        requireExist(requireExistCall),
        #[allow(missing_docs)]
        requireGet(requireGetCall),
        #[allow(missing_docs)]
        requireGte(requireGteCall),
    }
    #[automatically_derived]
    impl FastTypesCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [87u8, 255u8, 116u8, 28u8],
            [226u8, 149u8, 153u8, 130u8],
            [241u8, 158u8, 173u8, 204u8],
            [253u8, 212u8, 167u8, 61u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for FastTypesCalls {
        const NAME: &'static str = "FastTypesCalls";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::get(_) => <getCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::requireExist(_) => {
                    <requireExistCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::requireGet(_) => {
                    <requireGetCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::requireGte(_) => {
                    <requireGteCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<FastTypesCalls>] = &[
                {
                    fn requireGte(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FastTypesCalls> {
                        <requireGteCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FastTypesCalls::requireGte)
                    }
                    requireGte
                },
                {
                    fn get(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FastTypesCalls> {
                        <getCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FastTypesCalls::get)
                    }
                    get
                },
                {
                    fn requireExist(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FastTypesCalls> {
                        <requireExistCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FastTypesCalls::requireExist)
                    }
                    requireExist
                },
                {
                    fn requireGet(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<FastTypesCalls> {
                        <requireGetCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(FastTypesCalls::requireGet)
                    }
                    requireGet
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::get(inner) => {
                    <getCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::requireExist(inner) => {
                    <requireExistCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::requireGet(inner) => {
                    <requireGetCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::requireGte(inner) => {
                    <requireGteCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::get(inner) => {
                    <getCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::requireExist(inner) => {
                    <requireExistCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::requireGet(inner) => {
                    <requireGetCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::requireGte(inner) => {
                    <requireGteCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`FastTypes`](self) contract instance.

See the [wrapper's documentation](`FastTypesInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> FastTypesInstance<T, P, N> {
        FastTypesInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<FastTypesInstance<T, P, N>>,
    > {
        FastTypesInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        FastTypesInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`FastTypes`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`FastTypes`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct FastTypesInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for FastTypesInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("FastTypesInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > FastTypesInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`FastTypes`](self) contract instance.

See the [wrapper's documentation](`FastTypesInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<FastTypesInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> FastTypesInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> FastTypesInstance<T, P, N> {
            FastTypesInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > FastTypesInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`get`] function.
        pub fn get(
            &self,
            o: <Owned as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, getCall, N> {
            self.call_builder(&getCall { o })
        }
        ///Creates a new call builder for the [`requireExist`] function.
        pub fn requireExist(
            &self,
            s: <Set as alloy::sol_types::SolType>::RustType,
            value: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, requireExistCall, N> {
            self.call_builder(&requireExistCall { s, value })
        }
        ///Creates a new call builder for the [`requireGet`] function.
        pub fn requireGet(
            &self,
            c: <Constant as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, requireGetCall, N> {
            self.call_builder(&requireGetCall { c })
        }
        ///Creates a new call builder for the [`requireGte`] function.
        pub fn requireGte(
            &self,
            c: <Counter as alloy::sol_types::SolType>::RustType,
            value: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, requireGteCall, N> {
            self.call_builder(&requireGteCall { c, value })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > FastTypesInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
