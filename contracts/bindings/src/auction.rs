/**

Generated by the following Solidity interface...
```solidity
interface Auction {
    event BidSubmitted(uint256 indexed auction_id, address indexed bidder, uint256 indexed deadline, uint256 value);

    function submitBid(uint256 auction_id, uint256 deadline, uint256 value, bytes memory data) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "submitBid",
    "inputs": [
      {
        "name": "auction_id",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "deadline",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "BidSubmitted",
    "inputs": [
      {
        "name": "auction_id",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "bidder",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "deadline",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "value",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod Auction {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f5ffd5b506102d98061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610029575f3560e01c8063852ca6121461002d575b5f5ffd5b6100476004803603810190610042919061017f565b610049565b005b8342111561008c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100839061025d565b60405180910390fd5b833373ffffffffffffffffffffffffffffffffffffffff16867f71a5674c44b823bc0df08201dfeb2e8bdf698cd684fd2bbaa79adcf2c99fc186866040516100d4919061028a565b60405180910390a45050505050565b5f5ffd5b5f5ffd5b5f819050919050565b6100fd816100eb565b8114610107575f5ffd5b50565b5f81359050610118816100f4565b92915050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f84011261013f5761013e61011e565b5b8235905067ffffffffffffffff81111561015c5761015b610122565b5b60208301915083600182028301111561017857610177610126565b5b9250929050565b5f5f5f5f5f60808688031215610198576101976100e3565b5b5f6101a58882890161010a565b95505060206101b68882890161010a565b94505060406101c78882890161010a565b935050606086013567ffffffffffffffff8111156101e8576101e76100e7565b5b6101f48882890161012a565b92509250509295509295909350565b5f82825260208201905092915050565b7f41756374696f6e20646561646c696e65207061737365640000000000000000005f82015250565b5f610247601783610203565b915061025282610213565b602082019050919050565b5f6020820190508181035f8301526102748161023b565b9050919050565b610284816100eb565b82525050565b5f60208201905061029d5f83018461027b565b9291505056fea2646970667358221220210df2b8448bc7c7a974ddeeb2bc533978f637053189860bb49bbd180baa4c8564736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW__\xFD[Pa\x02\xD9\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0)W_5`\xE0\x1C\x80c\x85,\xA6\x12\x14a\0-W[__\xFD[a\0G`\x04\x806\x03\x81\x01\x90a\0B\x91\x90a\x01\x7FV[a\0IV[\0[\x83B\x11\x15a\0\x8CW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\0\x83\x90a\x02]V[`@Q\x80\x91\x03\x90\xFD[\x833s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86\x7Fq\xA5gLD\xB8#\xBC\r\xF0\x82\x01\xDF\xEB.\x8B\xDFi\x8C\xD6\x84\xFD+\xBA\xA7\x9A\xDC\xF2\xC9\x9F\xC1\x86\x86`@Qa\0\xD4\x91\x90a\x02\x8AV[`@Q\x80\x91\x03\x90\xA4PPPPPV[__\xFD[__\xFD[_\x81\x90P\x91\x90PV[a\0\xFD\x81a\0\xEBV[\x81\x14a\x01\x07W__\xFD[PV[_\x815\x90Pa\x01\x18\x81a\0\xF4V[\x92\x91PPV[__\xFD[__\xFD[__\xFD[__\x83`\x1F\x84\x01\x12a\x01?Wa\x01>a\x01\x1EV[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\\Wa\x01[a\x01\"V[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a\x01xWa\x01wa\x01&V[[\x92P\x92\x90PV[_____`\x80\x86\x88\x03\x12\x15a\x01\x98Wa\x01\x97a\0\xE3V[[_a\x01\xA5\x88\x82\x89\x01a\x01\nV[\x95PP` a\x01\xB6\x88\x82\x89\x01a\x01\nV[\x94PP`@a\x01\xC7\x88\x82\x89\x01a\x01\nV[\x93PP``\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\xE8Wa\x01\xE7a\0\xE7V[[a\x01\xF4\x88\x82\x89\x01a\x01*V[\x92P\x92PP\x92\x95P\x92\x95\x90\x93PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FAuction deadline passed\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_a\x02G`\x17\x83a\x02\x03V[\x91Pa\x02R\x82a\x02\x13V[` \x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x02t\x81a\x02;V[\x90P\x91\x90PV[a\x02\x84\x81a\0\xEBV[\x82RPPV[_` \x82\x01\x90Pa\x02\x9D_\x83\x01\x84a\x02{V[\x92\x91PPV\xFE\xA2dipfsX\"\x12 !\r\xF2\xB8D\x8B\xC7\xC7\xA9t\xDD\xEE\xB2\xBCS9x\xF67\x051\x89\x86\x0B\xB4\x9B\xBD\x18\x0B\xAAL\x85dsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b5060043610610029575f3560e01c8063852ca6121461002d575b5f5ffd5b6100476004803603810190610042919061017f565b610049565b005b8342111561008c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100839061025d565b60405180910390fd5b833373ffffffffffffffffffffffffffffffffffffffff16867f71a5674c44b823bc0df08201dfeb2e8bdf698cd684fd2bbaa79adcf2c99fc186866040516100d4919061028a565b60405180910390a45050505050565b5f5ffd5b5f5ffd5b5f819050919050565b6100fd816100eb565b8114610107575f5ffd5b50565b5f81359050610118816100f4565b92915050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f84011261013f5761013e61011e565b5b8235905067ffffffffffffffff81111561015c5761015b610122565b5b60208301915083600182028301111561017857610177610126565b5b9250929050565b5f5f5f5f5f60808688031215610198576101976100e3565b5b5f6101a58882890161010a565b95505060206101b68882890161010a565b94505060406101c78882890161010a565b935050606086013567ffffffffffffffff8111156101e8576101e76100e7565b5b6101f48882890161012a565b92509250509295509295909350565b5f82825260208201905092915050565b7f41756374696f6e20646561646c696e65207061737365640000000000000000005f82015250565b5f610247601783610203565b915061025282610213565b602082019050919050565b5f6020820190508181035f8301526102748161023b565b9050919050565b610284816100eb565b82525050565b5f60208201905061029d5f83018461027b565b9291505056fea2646970667358221220210df2b8448bc7c7a974ddeeb2bc533978f637053189860bb49bbd180baa4c8564736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0)W_5`\xE0\x1C\x80c\x85,\xA6\x12\x14a\0-W[__\xFD[a\0G`\x04\x806\x03\x81\x01\x90a\0B\x91\x90a\x01\x7FV[a\0IV[\0[\x83B\x11\x15a\0\x8CW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\0\x83\x90a\x02]V[`@Q\x80\x91\x03\x90\xFD[\x833s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86\x7Fq\xA5gLD\xB8#\xBC\r\xF0\x82\x01\xDF\xEB.\x8B\xDFi\x8C\xD6\x84\xFD+\xBA\xA7\x9A\xDC\xF2\xC9\x9F\xC1\x86\x86`@Qa\0\xD4\x91\x90a\x02\x8AV[`@Q\x80\x91\x03\x90\xA4PPPPPV[__\xFD[__\xFD[_\x81\x90P\x91\x90PV[a\0\xFD\x81a\0\xEBV[\x81\x14a\x01\x07W__\xFD[PV[_\x815\x90Pa\x01\x18\x81a\0\xF4V[\x92\x91PPV[__\xFD[__\xFD[__\xFD[__\x83`\x1F\x84\x01\x12a\x01?Wa\x01>a\x01\x1EV[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\\Wa\x01[a\x01\"V[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a\x01xWa\x01wa\x01&V[[\x92P\x92\x90PV[_____`\x80\x86\x88\x03\x12\x15a\x01\x98Wa\x01\x97a\0\xE3V[[_a\x01\xA5\x88\x82\x89\x01a\x01\nV[\x95PP` a\x01\xB6\x88\x82\x89\x01a\x01\nV[\x94PP`@a\x01\xC7\x88\x82\x89\x01a\x01\nV[\x93PP``\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\xE8Wa\x01\xE7a\0\xE7V[[a\x01\xF4\x88\x82\x89\x01a\x01*V[\x92P\x92PP\x92\x95P\x92\x95\x90\x93PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FAuction deadline passed\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_a\x02G`\x17\x83a\x02\x03V[\x91Pa\x02R\x82a\x02\x13V[` \x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x02t\x81a\x02;V[\x90P\x91\x90PV[a\x02\x84\x81a\0\xEBV[\x82RPPV[_` \x82\x01\x90Pa\x02\x9D_\x83\x01\x84a\x02{V[\x92\x91PPV\xFE\xA2dipfsX\"\x12 !\r\xF2\xB8D\x8B\xC7\xC7\xA9t\xDD\xEE\xB2\xBCS9x\xF67\x051\x89\x86\x0B\xB4\x9B\xBD\x18\x0B\xAAL\x85dsolcC\0\x08\x1C\x003",
    );
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `BidSubmitted(uint256,address,uint256,uint256)` and selector `0x71a5674c44b823bc0df08201dfeb2e8bdf698cd684fd2bbaa79adcf2c99fc186`.
```solidity
event BidSubmitted(uint256 indexed auction_id, address indexed bidder, uint256 indexed deadline, uint256 value);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BidSubmitted {
        #[allow(missing_docs)]
        pub auction_id: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub bidder: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub deadline: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BidSubmitted {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "BidSubmitted(uint256,address,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                113u8, 165u8, 103u8, 76u8, 68u8, 184u8, 35u8, 188u8, 13u8, 240u8, 130u8,
                1u8, 223u8, 235u8, 46u8, 139u8, 223u8, 105u8, 140u8, 214u8, 132u8, 253u8,
                43u8, 186u8, 167u8, 154u8, 220u8, 242u8, 201u8, 159u8, 193u8, 134u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    auction_id: topics.1,
                    bidder: topics.2,
                    deadline: topics.3,
                    value: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.auction_id.clone(),
                    self.bidder.clone(),
                    self.deadline.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.auction_id);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.bidder,
                );
                out[3usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.deadline);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BidSubmitted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BidSubmitted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BidSubmitted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `submitBid(uint256,uint256,uint256,bytes)` and selector `0x852ca612`.
```solidity
function submitBid(uint256 auction_id, uint256 deadline, uint256 value, bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct submitBidCall {
        #[allow(missing_docs)]
        pub auction_id: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub deadline: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`submitBid(uint256,uint256,uint256,bytes)`](submitBidCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct submitBidReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<submitBidCall> for UnderlyingRustTuple<'_> {
                fn from(value: submitBidCall) -> Self {
                    (value.auction_id, value.deadline, value.value, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for submitBidCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        auction_id: tuple.0,
                        deadline: tuple.1,
                        value: tuple.2,
                        data: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<submitBidReturn> for UnderlyingRustTuple<'_> {
                fn from(value: submitBidReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for submitBidReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for submitBidCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = submitBidReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "submitBid(uint256,uint256,uint256,bytes)";
            const SELECTOR: [u8; 4] = [133u8, 44u8, 166u8, 18u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.auction_id),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deadline),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`Auction`](self) function calls.
    #[derive()]
    pub enum AuctionCalls {
        #[allow(missing_docs)]
        submitBid(submitBidCall),
    }
    #[automatically_derived]
    impl AuctionCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[133u8, 44u8, 166u8, 18u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AuctionCalls {
        const NAME: &'static str = "AuctionCalls";
        const MIN_DATA_LENGTH: usize = 160usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::submitBid(_) => {
                    <submitBidCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<AuctionCalls>] = &[
                {
                    fn submitBid(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AuctionCalls> {
                        <submitBidCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AuctionCalls::submitBid)
                    }
                    submitBid
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::submitBid(inner) => {
                    <submitBidCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::submitBid(inner) => {
                    <submitBidCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`Auction`](self) events.
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum AuctionEvents {
        #[allow(missing_docs)]
        BidSubmitted(BidSubmitted),
    }
    #[automatically_derived]
    impl AuctionEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                113u8, 165u8, 103u8, 76u8, 68u8, 184u8, 35u8, 188u8, 13u8, 240u8, 130u8,
                1u8, 223u8, 235u8, 46u8, 139u8, 223u8, 105u8, 140u8, 214u8, 132u8, 253u8,
                43u8, 186u8, 167u8, 154u8, 220u8, 242u8, 201u8, 159u8, 193u8, 134u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for AuctionEvents {
        const NAME: &'static str = "AuctionEvents";
        const COUNT: usize = 1usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<BidSubmitted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <BidSubmitted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::BidSubmitted)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for AuctionEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::BidSubmitted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::BidSubmitted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Auction`](self) contract instance.

See the [wrapper's documentation](`AuctionInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> AuctionInstance<T, P, N> {
        AuctionInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<AuctionInstance<T, P, N>>,
    > {
        AuctionInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        AuctionInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`Auction`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Auction`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct AuctionInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for AuctionInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("AuctionInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AuctionInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`Auction`](self) contract instance.

See the [wrapper's documentation](`AuctionInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<AuctionInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> AuctionInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> AuctionInstance<T, P, N> {
            AuctionInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AuctionInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`submitBid`] function.
        pub fn submitBid(
            &self,
            auction_id: alloy::sol_types::private::primitives::aliases::U256,
            deadline: alloy::sol_types::private::primitives::aliases::U256,
            value: alloy::sol_types::private::primitives::aliases::U256,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, submitBidCall, N> {
            self.call_builder(
                &submitBidCall {
                    auction_id,
                    deadline,
                    value,
                    data,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AuctionInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`BidSubmitted`] event.
        pub fn BidSubmitted_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, BidSubmitted, N> {
            self.event_filter::<BidSubmitted>()
        }
    }
}
