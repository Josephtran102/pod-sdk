/**

Generated by the following Solidity interface...
```solidity
interface Voting {
    event ProposalCreated(bytes32 indexed proposalId, uint256 deadline, bytes data);
    event ProposalExecuted(bytes32 indexed proposalId);
    event VoteCast(bytes32 indexed proposalId, address indexed voter, uint8 choice);

    function castVote(bytes32 proposalId, uint8 choice) external;
    function createProposal(uint256 deadline, uint256 threshold, address[] memory voters, bytes memory data) external returns (bytes32 proposalId);
    function execute(bytes32 proposalId) external;
    function getProposalId(uint256 deadline, address proposer, address[] memory voters) external pure returns (bytes32 proposalId);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "castVote",
    "inputs": [
      {
        "name": "proposalId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "choice",
        "type": "uint8",
        "internalType": "uint8"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "createProposal",
    "inputs": [
      {
        "name": "deadline",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "threshold",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "voters",
        "type": "address[]",
        "internalType": "address[]"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "proposalId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "execute",
    "inputs": [
      {
        "name": "proposalId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getProposalId",
    "inputs": [
      {
        "name": "deadline",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "proposer",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "voters",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [
      {
        "name": "proposalId",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "event",
    "name": "ProposalCreated",
    "inputs": [
      {
        "name": "proposalId",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "deadline",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "data",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ProposalExecuted",
    "inputs": [
      {
        "name": "proposalId",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "VoteCast",
    "inputs": [
      {
        "name": "proposalId",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "voter",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "choice",
        "type": "uint8",
        "indexed": false,
        "internalType": "uint8"
      }
    ],
    "anonymous": false
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod Voting {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600f57600080fd5b506115d28061001f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063562d2bc214610051578063823597dc14610081578063b4b0713e146100b1578063e751f271146100cd575b600080fd5b61006b60048036038101906100669190610b3e565b6100e9565b6040516100789190610bfe565b60405180910390f35b61009b60048036038101906100969190610c77565b610370565b6040516100a89190610bfe565b60405180910390f35b6100cb60048036038101906100c69190610d50565b6103cf565b005b6100e760048036038101906100e29190610d90565b6105c3565b005b600061012a876040518060400160405280601e81526020017f446561646c696e65206d75737420626520696e20746865206675747572650000815250610728565b6000861161016d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016490610e1a565b60405180910390fd5b600085859050116101b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101aa90610e86565b60405180910390fd5b60006101c188338888610370565b9050600080600083815260200190815260200160002090506000816005015414610220576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021790610ef2565b60405180910390fd5b888160000181905550338160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086869050816005018190555060005b878790508110156103245760018260030160008a8a858181106102a1576102a0610f12565b5b90506020020160208101906102b69190610f41565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083600281111561031257610311610f6e565b5b0217905550808060010191505061027b565b50817f5289d3c495d702a547ac37a51518d589701ce72eac45b3de16149592f50066a88a87876040516103599392919061100a565b60405180910390a281925050509695505050505050565b6000848484846040516020016103879291906110f9565b604051602081830303815290604052805190602001206040516020016103af93929190611121565b604051602081830303815290604052805190602001209050949350505050565b6000806000848152602001908152602001600020905061040b816000015460405180606001604052806037815260200161159b60379139610728565b6001600281111561041f5761041e610f6e565b5b8160030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660028111156104805761047f610f6e565b5b146104c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b7906111a4565b60405180910390fd5b60006104d8843360026107389092919063ffffffff16565b14610518576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90611210565b60405180910390fd5b610531833360016002610804909392919063ffffffff16565b61056f838360405160200161054792919061123f565b604051602081830303815290604052805190602001206001806108e19092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff16837fd8a95ca05e9a2656fe21d836329d9cd77830e7fef7acb7c0fd3bf5421ea7ad9a846040516105b69190611268565b60405180910390a3505050565b600080600083815260200190815260200160002090506105ff816000015460405180606001604052806024815260200161157760249139610912565b8060060160009054906101000a900460ff1615610651576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610648906112cf565b60405180910390fd5b6000826001604051602001610667929190611334565b6040516020818303038152906040528051906020012090506106d08183600101546040518060400160405280601081526020017f4e6f7420656e6f75676820766f746573000000000000000000000000000000008152506001610922909392919063ffffffff16565b60018260060160006101000a81548160ff0219169083151502179055506106f68361094a565b827f7b1bcf1ccf901a11589afff5504d59fd0a53780eed2a952adade0348985139e060405160405180910390a2505050565b6107348242108261094d565b5050565b60003273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146107a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079f906113cf565b60405180910390fd5b83600001600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509392505050565b3273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610872576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610869906113cf565b60405180910390fd5b8084600001600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108d4919061141e565b9250508190555050505050565b808360000160008481526020019081526020016000206000828254610906919061141e565b92505081905550505050565b61091e8242118261094d565b5050565b610944828560000160008681526020019081526020016000205410158261094d565b50505050565b50565b60007f3dcdf63b41c103567d7225976ad9145e866c7a7dccc6c277ea86abbd268fbac960001c73ffffffffffffffffffffffffffffffffffffffff168360405160200161099a919061146d565b6040516020818303038152906040526040516109b691906114f9565b600060405180830381855afa9150503d80600081146109f1576040519150601f19603f3d011682016040523d82523d6000602084013e6109f6565b606091505b50509050808290610a3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a349190611554565b60405180910390fd5b50505050565b600080fd5b600080fd5b6000819050919050565b610a6081610a4d565b8114610a6b57600080fd5b50565b600081359050610a7d81610a57565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610aa857610aa7610a83565b5b8235905067ffffffffffffffff811115610ac557610ac4610a88565b5b602083019150836020820283011115610ae157610ae0610a8d565b5b9250929050565b60008083601f840112610afe57610afd610a83565b5b8235905067ffffffffffffffff811115610b1b57610b1a610a88565b5b602083019150836001820283011115610b3757610b36610a8d565b5b9250929050565b60008060008060008060808789031215610b5b57610b5a610a43565b5b6000610b6989828a01610a6e565b9650506020610b7a89828a01610a6e565b955050604087013567ffffffffffffffff811115610b9b57610b9a610a48565b5b610ba789828a01610a92565b9450945050606087013567ffffffffffffffff811115610bca57610bc9610a48565b5b610bd689828a01610ae8565b92509250509295509295509295565b6000819050919050565b610bf881610be5565b82525050565b6000602082019050610c136000830184610bef565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c4482610c19565b9050919050565b610c5481610c39565b8114610c5f57600080fd5b50565b600081359050610c7181610c4b565b92915050565b60008060008060608587031215610c9157610c90610a43565b5b6000610c9f87828801610a6e565b9450506020610cb087828801610c62565b935050604085013567ffffffffffffffff811115610cd157610cd0610a48565b5b610cdd87828801610a92565b925092505092959194509250565b610cf481610be5565b8114610cff57600080fd5b50565b600081359050610d1181610ceb565b92915050565b600060ff82169050919050565b610d2d81610d17565b8114610d3857600080fd5b50565b600081359050610d4a81610d24565b92915050565b60008060408385031215610d6757610d66610a43565b5b6000610d7585828601610d02565b9250506020610d8685828601610d3b565b9150509250929050565b600060208284031215610da657610da5610a43565b5b6000610db484828501610d02565b91505092915050565b600082825260208201905092915050565b7f5468726573686f6c642073686f756c64206e6f74206265203000000000000000600082015250565b6000610e04601983610dbd565b9150610e0f82610dce565b602082019050919050565b60006020820190508181036000830152610e3381610df7565b9050919050565b7f5468657265206d757374206265206174206c65617374206f6e6520766f746572600082015250565b6000610e70602083610dbd565b9150610e7b82610e3a565b602082019050919050565b60006020820190508181036000830152610e9f81610e63565b9050919050565b7f70726f706f73616c20616c726561647920657869737473000000000000000000600082015250565b6000610edc601783610dbd565b9150610ee782610ea6565b602082019050919050565b60006020820190508181036000830152610f0b81610ecf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610f5757610f56610a43565b5b6000610f6584828501610c62565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b610fa681610a4d565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610fe98385610fac565b9350610ff6838584610fbd565b610fff83610fcc565b840190509392505050565b600060408201905061101f6000830186610f9d565b8181036020830152611032818486610fdd565b9050949350505050565b600081905092915050565b6000819050919050565b61105a81610c39565b82525050565b600061106c8383611051565b60208301905092915050565b60006110876020840184610c62565b905092915050565b6000602082019050919050565b60006110a8838561103c565b93506110b382611047565b8060005b858110156110ec576110c98284611078565b6110d38882611060565b97506110de8361108f565b9250506001810190506110b7565b5085925050509392505050565b600061110682848661109c565b91508190509392505050565b61111b81610c39565b82525050565b60006060820190506111366000830186610f9d565b6111436020830185611112565b6111506040830184610bef565b949350505050565b7f73656e646572206e6f74206120766f7465720000000000000000000000000000600082015250565b600061118e601283610dbd565b915061119982611158565b602082019050919050565b600060208201905081810360008301526111bd81611181565b9050919050565b7f616c726561647920766f74656400000000000000000000000000000000000000600082015250565b60006111fa600d83610dbd565b9150611205826111c4565b602082019050919050565b60006020820190508181036000830152611229816111ed565b9050919050565b61123981610d17565b82525050565b60006040820190506112546000830185610bef565b6112616020830184611230565b9392505050565b600060208201905061127d6000830184611230565b92915050565b7f50726f706f73616c20616c726561647920657865637574656400000000000000600082015250565b60006112b9601983610dbd565b91506112c482611283565b602082019050919050565b600060208201905081810360008301526112e8816112ac565b9050919050565b6000819050919050565b6000819050919050565b600061131e611319611314846112ef565b6112f9565b610d17565b9050919050565b61132e81611303565b82525050565b60006040820190506113496000830185610bef565b6113566020830184611325565b9392505050565b7f43616e6e6f7420616363657373204f776e6564436f756e746572206f776e656460008201527f20627920616e6f74686572206164647265737300000000000000000000000000602082015250565b60006113b9603383610dbd565b91506113c48261135d565b604082019050919050565b600060208201905081810360008301526113e8816113ac565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061142982610a4d565b915061143483610a4d565b925082820190508082111561144c5761144b6113ef565b5b92915050565b60008115159050919050565b61146781611452565b82525050565b6000602082019050611482600083018461145e565b92915050565b600081519050919050565b600081905092915050565b60005b838110156114bc5780820151818401526020810190506114a1565b60008484015250505050565b60006114d382611488565b6114dd8185611493565b93506114ed81856020860161149e565b80840191505092915050565b600061150582846114c8565b915081905092915050565b600081519050919050565b600061152682611510565b6115308185610dbd565b935061154081856020860161149e565b61154981610fcc565b840191505092915050565b6000602082019050818103600083015261156e818461151b565b90509291505056fe50726f706f73616c20646561646c696e6520686173206e6f74207061737365642079657450726f706f73616c20646561646c696e652068617320706173736564206f722070726f706f73616c20646f6573206e6f74206578697374
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0FW`\0\x80\xFD[Pa\x15\xD2\x80a\0\x1F`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0LW`\x005`\xE0\x1C\x80cV-+\xC2\x14a\0QW\x80c\x825\x97\xDC\x14a\0\x81W\x80c\xB4\xB0q>\x14a\0\xB1W\x80c\xE7Q\xF2q\x14a\0\xCDW[`\0\x80\xFD[a\0k`\x04\x806\x03\x81\x01\x90a\0f\x91\x90a\x0B>V[a\0\xE9V[`@Qa\0x\x91\x90a\x0B\xFEV[`@Q\x80\x91\x03\x90\xF3[a\0\x9B`\x04\x806\x03\x81\x01\x90a\0\x96\x91\x90a\x0CwV[a\x03pV[`@Qa\0\xA8\x91\x90a\x0B\xFEV[`@Q\x80\x91\x03\x90\xF3[a\0\xCB`\x04\x806\x03\x81\x01\x90a\0\xC6\x91\x90a\rPV[a\x03\xCFV[\0[a\0\xE7`\x04\x806\x03\x81\x01\x90a\0\xE2\x91\x90a\r\x90V[a\x05\xC3V[\0[`\0a\x01*\x87`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7FDeadline must be in the future\0\0\x81RPa\x07(V[`\0\x86\x11a\x01mW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x01d\x90a\x0E\x1AV[`@Q\x80\x91\x03\x90\xFD[`\0\x85\x85\x90P\x11a\x01\xB3W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x01\xAA\x90a\x0E\x86V[`@Q\x80\x91\x03\x90\xFD[`\0a\x01\xC1\x883\x88\x88a\x03pV[\x90P`\0\x80`\0\x83\x81R` \x01\x90\x81R` \x01`\0 \x90P`\0\x81`\x05\x01T\x14a\x02 W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x02\x17\x90a\x0E\xF2V[`@Q\x80\x91\x03\x90\xFD[\x88\x81`\0\x01\x81\x90UP3\x81`\x02\x01`\0a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x86\x86\x90P\x81`\x05\x01\x81\x90UP`\0[\x87\x87\x90P\x81\x10\x15a\x03$W`\x01\x82`\x03\x01`\0\x8A\x8A\x85\x81\x81\x10a\x02\xA1Wa\x02\xA0a\x0F\x12V[[\x90P` \x02\x01` \x81\x01\x90a\x02\xB6\x91\x90a\x0FAV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x02\x81\x11\x15a\x03\x12Wa\x03\x11a\x0FnV[[\x02\x17\x90UP\x80\x80`\x01\x01\x91PPa\x02{V[P\x81\x7FR\x89\xD3\xC4\x95\xD7\x02\xA5G\xAC7\xA5\x15\x18\xD5\x89p\x1C\xE7.\xACE\xB3\xDE\x16\x14\x95\x92\xF5\0f\xA8\x8A\x87\x87`@Qa\x03Y\x93\x92\x91\x90a\x10\nV[`@Q\x80\x91\x03\x90\xA2\x81\x92PPP\x96\x95PPPPPPV[`\0\x84\x84\x84\x84`@Q` \x01a\x03\x87\x92\x91\x90a\x10\xF9V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `@Q` \x01a\x03\xAF\x93\x92\x91\x90a\x11!V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x94\x93PPPPV[`\0\x80`\0\x84\x81R` \x01\x90\x81R` \x01`\0 \x90Pa\x04\x0B\x81`\0\x01T`@Q\x80``\x01`@R\x80`7\x81R` \x01a\x15\x9B`7\x919a\x07(V[`\x01`\x02\x81\x11\x15a\x04\x1FWa\x04\x1Ea\x0FnV[[\x81`\x03\x01`\x003s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x02\x81\x11\x15a\x04\x80Wa\x04\x7Fa\x0FnV[[\x14a\x04\xC0W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x04\xB7\x90a\x11\xA4V[`@Q\x80\x91\x03\x90\xFD[`\0a\x04\xD8\x843`\x02a\x078\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x14a\x05\x18W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x05\x0F\x90a\x12\x10V[`@Q\x80\x91\x03\x90\xFD[a\x051\x833`\x01`\x02a\x08\x04\x90\x93\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[a\x05o\x83\x83`@Q` \x01a\x05G\x92\x91\x90a\x12?V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `\x01\x80a\x08\xE1\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83\x7F\xD8\xA9\\\xA0^\x9A&V\xFE!\xD862\x9D\x9C\xD7x0\xE7\xFE\xF7\xAC\xB7\xC0\xFD;\xF5B\x1E\xA7\xAD\x9A\x84`@Qa\x05\xB6\x91\x90a\x12hV[`@Q\x80\x91\x03\x90\xA3PPPV[`\0\x80`\0\x83\x81R` \x01\x90\x81R` \x01`\0 \x90Pa\x05\xFF\x81`\0\x01T`@Q\x80``\x01`@R\x80`$\x81R` \x01a\x15w`$\x919a\t\x12V[\x80`\x06\x01`\0\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\x06QW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x06H\x90a\x12\xCFV[`@Q\x80\x91\x03\x90\xFD[`\0\x82`\x01`@Q` \x01a\x06g\x92\x91\x90a\x134V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x06\xD0\x81\x83`\x01\x01T`@Q\x80`@\x01`@R\x80`\x10\x81R` \x01\x7FNot enough votes\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP`\x01a\t\"\x90\x93\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[`\x01\x82`\x06\x01`\0a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UPa\x06\xF6\x83a\tJV[\x82\x7F{\x1B\xCF\x1C\xCF\x90\x1A\x11X\x9A\xFF\xF5PMY\xFD\nSx\x0E\xED*\x95*\xDA\xDE\x03H\x98Q9\xE0`@Q`@Q\x80\x91\x03\x90\xA2PPPV[a\x074\x82B\x10\x82a\tMV[PPV[`\x002s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x07\xA8W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x07\x9F\x90a\x13\xCFV[`@Q\x80\x91\x03\x90\xFD[\x83`\0\x01`\0\x84\x81R` \x01\x90\x81R` \x01`\0 `\0\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 T\x90P\x93\x92PPPV[2s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x08rW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x08i\x90a\x13\xCFV[`@Q\x80\x91\x03\x90\xFD[\x80\x84`\0\x01`\0\x85\x81R` \x01\x90\x81R` \x01`\0 `\0\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0\x82\x82Ta\x08\xD4\x91\x90a\x14\x1EV[\x92PP\x81\x90UPPPPPV[\x80\x83`\0\x01`\0\x84\x81R` \x01\x90\x81R` \x01`\0 `\0\x82\x82Ta\t\x06\x91\x90a\x14\x1EV[\x92PP\x81\x90UPPPPV[a\t\x1E\x82B\x11\x82a\tMV[PPV[a\tD\x82\x85`\0\x01`\0\x86\x81R` \x01\x90\x81R` \x01`\0 T\x10\x15\x82a\tMV[PPPPV[PV[`\0\x7F=\xCD\xF6;A\xC1\x03V}r%\x97j\xD9\x14^\x86lz}\xCC\xC6\xC2w\xEA\x86\xAB\xBD&\x8F\xBA\xC9`\0\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83`@Q` \x01a\t\x9A\x91\x90a\x14mV[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Qa\t\xB6\x91\x90a\x14\xF9V[`\0`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80`\0\x81\x14a\t\xF1W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\t\xF6V[``\x91P[PP\x90P\x80\x82\x90a\n=W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\n4\x91\x90a\x15TV[`@Q\x80\x91\x03\x90\xFD[PPPPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x81\x90P\x91\x90PV[a\n`\x81a\nMV[\x81\x14a\nkW`\0\x80\xFD[PV[`\0\x815\x90Pa\n}\x81a\nWV[\x92\x91PPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\x83`\x1F\x84\x01\x12a\n\xA8Wa\n\xA7a\n\x83V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\n\xC5Wa\n\xC4a\n\x88V[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15a\n\xE1Wa\n\xE0a\n\x8DV[[\x92P\x92\x90PV[`\0\x80\x83`\x1F\x84\x01\x12a\n\xFEWa\n\xFDa\n\x83V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B\x1BWa\x0B\x1Aa\n\x88V[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a\x0B7Wa\x0B6a\n\x8DV[[\x92P\x92\x90PV[`\0\x80`\0\x80`\0\x80`\x80\x87\x89\x03\x12\x15a\x0B[Wa\x0BZa\nCV[[`\0a\x0Bi\x89\x82\x8A\x01a\nnV[\x96PP` a\x0Bz\x89\x82\x8A\x01a\nnV[\x95PP`@\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B\x9BWa\x0B\x9Aa\nHV[[a\x0B\xA7\x89\x82\x8A\x01a\n\x92V[\x94P\x94PP``\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B\xCAWa\x0B\xC9a\nHV[[a\x0B\xD6\x89\x82\x8A\x01a\n\xE8V[\x92P\x92PP\x92\x95P\x92\x95P\x92\x95V[`\0\x81\x90P\x91\x90PV[a\x0B\xF8\x81a\x0B\xE5V[\x82RPPV[`\0` \x82\x01\x90Pa\x0C\x13`\0\x83\x01\x84a\x0B\xEFV[\x92\x91PPV[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[`\0a\x0CD\x82a\x0C\x19V[\x90P\x91\x90PV[a\x0CT\x81a\x0C9V[\x81\x14a\x0C_W`\0\x80\xFD[PV[`\0\x815\x90Pa\x0Cq\x81a\x0CKV[\x92\x91PPV[`\0\x80`\0\x80``\x85\x87\x03\x12\x15a\x0C\x91Wa\x0C\x90a\nCV[[`\0a\x0C\x9F\x87\x82\x88\x01a\nnV[\x94PP` a\x0C\xB0\x87\x82\x88\x01a\x0CbV[\x93PP`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0C\xD1Wa\x0C\xD0a\nHV[[a\x0C\xDD\x87\x82\x88\x01a\n\x92V[\x92P\x92PP\x92\x95\x91\x94P\x92PV[a\x0C\xF4\x81a\x0B\xE5V[\x81\x14a\x0C\xFFW`\0\x80\xFD[PV[`\0\x815\x90Pa\r\x11\x81a\x0C\xEBV[\x92\x91PPV[`\0`\xFF\x82\x16\x90P\x91\x90PV[a\r-\x81a\r\x17V[\x81\x14a\r8W`\0\x80\xFD[PV[`\0\x815\x90Pa\rJ\x81a\r$V[\x92\x91PPV[`\0\x80`@\x83\x85\x03\x12\x15a\rgWa\rfa\nCV[[`\0a\ru\x85\x82\x86\x01a\r\x02V[\x92PP` a\r\x86\x85\x82\x86\x01a\r;V[\x91PP\x92P\x92\x90PV[`\0` \x82\x84\x03\x12\x15a\r\xA6Wa\r\xA5a\nCV[[`\0a\r\xB4\x84\x82\x85\x01a\r\x02V[\x91PP\x92\x91PPV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FThreshold should not be 0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x0E\x04`\x19\x83a\r\xBDV[\x91Pa\x0E\x0F\x82a\r\xCEV[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0E3\x81a\r\xF7V[\x90P\x91\x90PV[\x7FThere must be at least one voter`\0\x82\x01RPV[`\0a\x0Ep` \x83a\r\xBDV[\x91Pa\x0E{\x82a\x0E:V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0E\x9F\x81a\x0EcV[\x90P\x91\x90PV[\x7Fproposal already exists\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x0E\xDC`\x17\x83a\r\xBDV[\x91Pa\x0E\xE7\x82a\x0E\xA6V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0F\x0B\x81a\x0E\xCFV[\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[`\0` \x82\x84\x03\x12\x15a\x0FWWa\x0FVa\nCV[[`\0a\x0Fe\x84\x82\x85\x01a\x0CbV[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`!`\x04R`$`\0\xFD[a\x0F\xA6\x81a\nMV[\x82RPPV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x82\x81\x837`\0\x83\x83\x01RPPPV[`\0`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[`\0a\x0F\xE9\x83\x85a\x0F\xACV[\x93Pa\x0F\xF6\x83\x85\x84a\x0F\xBDV[a\x0F\xFF\x83a\x0F\xCCV[\x84\x01\x90P\x93\x92PPPV[`\0`@\x82\x01\x90Pa\x10\x1F`\0\x83\x01\x86a\x0F\x9DV[\x81\x81\x03` \x83\x01Ra\x102\x81\x84\x86a\x0F\xDDV[\x90P\x94\x93PPPPV[`\0\x81\x90P\x92\x91PPV[`\0\x81\x90P\x91\x90PV[a\x10Z\x81a\x0C9V[\x82RPPV[`\0a\x10l\x83\x83a\x10QV[` \x83\x01\x90P\x92\x91PPV[`\0a\x10\x87` \x84\x01\x84a\x0CbV[\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x10\xA8\x83\x85a\x10<V[\x93Pa\x10\xB3\x82a\x10GV[\x80`\0[\x85\x81\x10\x15a\x10\xECWa\x10\xC9\x82\x84a\x10xV[a\x10\xD3\x88\x82a\x10`V[\x97Pa\x10\xDE\x83a\x10\x8FV[\x92PP`\x01\x81\x01\x90Pa\x10\xB7V[P\x85\x92PPP\x93\x92PPPV[`\0a\x11\x06\x82\x84\x86a\x10\x9CV[\x91P\x81\x90P\x93\x92PPPV[a\x11\x1B\x81a\x0C9V[\x82RPPV[`\0``\x82\x01\x90Pa\x116`\0\x83\x01\x86a\x0F\x9DV[a\x11C` \x83\x01\x85a\x11\x12V[a\x11P`@\x83\x01\x84a\x0B\xEFV[\x94\x93PPPPV[\x7Fsender not a voter\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x11\x8E`\x12\x83a\r\xBDV[\x91Pa\x11\x99\x82a\x11XV[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x11\xBD\x81a\x11\x81V[\x90P\x91\x90PV[\x7Falready voted\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x11\xFA`\r\x83a\r\xBDV[\x91Pa\x12\x05\x82a\x11\xC4V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x12)\x81a\x11\xEDV[\x90P\x91\x90PV[a\x129\x81a\r\x17V[\x82RPPV[`\0`@\x82\x01\x90Pa\x12T`\0\x83\x01\x85a\x0B\xEFV[a\x12a` \x83\x01\x84a\x120V[\x93\x92PPPV[`\0` \x82\x01\x90Pa\x12}`\0\x83\x01\x84a\x120V[\x92\x91PPV[\x7FProposal already executed\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x12\xB9`\x19\x83a\r\xBDV[\x91Pa\x12\xC4\x82a\x12\x83V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x12\xE8\x81a\x12\xACV[\x90P\x91\x90PV[`\0\x81\x90P\x91\x90PV[`\0\x81\x90P\x91\x90PV[`\0a\x13\x1Ea\x13\x19a\x13\x14\x84a\x12\xEFV[a\x12\xF9V[a\r\x17V[\x90P\x91\x90PV[a\x13.\x81a\x13\x03V[\x82RPPV[`\0`@\x82\x01\x90Pa\x13I`\0\x83\x01\x85a\x0B\xEFV[a\x13V` \x83\x01\x84a\x13%V[\x93\x92PPPV[\x7FCannot access OwnedCounter owned`\0\x82\x01R\x7F by another address\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[`\0a\x13\xB9`3\x83a\r\xBDV[\x91Pa\x13\xC4\x82a\x13]V[`@\x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x13\xE8\x81a\x13\xACV[\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[`\0a\x14)\x82a\nMV[\x91Pa\x144\x83a\nMV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x14LWa\x14Ka\x13\xEFV[[\x92\x91PPV[`\0\x81\x15\x15\x90P\x91\x90PV[a\x14g\x81a\x14RV[\x82RPPV[`\0` \x82\x01\x90Pa\x14\x82`\0\x83\x01\x84a\x14^V[\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0\x81\x90P\x92\x91PPV[`\0[\x83\x81\x10\x15a\x14\xBCW\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x14\xA1V[`\0\x84\x84\x01RPPPPV[`\0a\x14\xD3\x82a\x14\x88V[a\x14\xDD\x81\x85a\x14\x93V[\x93Pa\x14\xED\x81\x85` \x86\x01a\x14\x9EV[\x80\x84\x01\x91PP\x92\x91PPV[`\0a\x15\x05\x82\x84a\x14\xC8V[\x91P\x81\x90P\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0a\x15&\x82a\x15\x10V[a\x150\x81\x85a\r\xBDV[\x93Pa\x15@\x81\x85` \x86\x01a\x14\x9EV[a\x15I\x81a\x0F\xCCV[\x84\x01\x91PP\x92\x91PPV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x15n\x81\x84a\x15\x1BV[\x90P\x92\x91PPV\xFEProposal deadline has not passed yetProposal deadline has passed or proposal does not exist",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063562d2bc214610051578063823597dc14610081578063b4b0713e146100b1578063e751f271146100cd575b600080fd5b61006b60048036038101906100669190610b3e565b6100e9565b6040516100789190610bfe565b60405180910390f35b61009b60048036038101906100969190610c77565b610370565b6040516100a89190610bfe565b60405180910390f35b6100cb60048036038101906100c69190610d50565b6103cf565b005b6100e760048036038101906100e29190610d90565b6105c3565b005b600061012a876040518060400160405280601e81526020017f446561646c696e65206d75737420626520696e20746865206675747572650000815250610728565b6000861161016d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016490610e1a565b60405180910390fd5b600085859050116101b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101aa90610e86565b60405180910390fd5b60006101c188338888610370565b9050600080600083815260200190815260200160002090506000816005015414610220576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021790610ef2565b60405180910390fd5b888160000181905550338160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086869050816005018190555060005b878790508110156103245760018260030160008a8a858181106102a1576102a0610f12565b5b90506020020160208101906102b69190610f41565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083600281111561031257610311610f6e565b5b0217905550808060010191505061027b565b50817f5289d3c495d702a547ac37a51518d589701ce72eac45b3de16149592f50066a88a87876040516103599392919061100a565b60405180910390a281925050509695505050505050565b6000848484846040516020016103879291906110f9565b604051602081830303815290604052805190602001206040516020016103af93929190611121565b604051602081830303815290604052805190602001209050949350505050565b6000806000848152602001908152602001600020905061040b816000015460405180606001604052806037815260200161159b60379139610728565b6001600281111561041f5761041e610f6e565b5b8160030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660028111156104805761047f610f6e565b5b146104c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b7906111a4565b60405180910390fd5b60006104d8843360026107389092919063ffffffff16565b14610518576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050f90611210565b60405180910390fd5b610531833360016002610804909392919063ffffffff16565b61056f838360405160200161054792919061123f565b604051602081830303815290604052805190602001206001806108e19092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff16837fd8a95ca05e9a2656fe21d836329d9cd77830e7fef7acb7c0fd3bf5421ea7ad9a846040516105b69190611268565b60405180910390a3505050565b600080600083815260200190815260200160002090506105ff816000015460405180606001604052806024815260200161157760249139610912565b8060060160009054906101000a900460ff1615610651576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610648906112cf565b60405180910390fd5b6000826001604051602001610667929190611334565b6040516020818303038152906040528051906020012090506106d08183600101546040518060400160405280601081526020017f4e6f7420656e6f75676820766f746573000000000000000000000000000000008152506001610922909392919063ffffffff16565b60018260060160006101000a81548160ff0219169083151502179055506106f68361094a565b827f7b1bcf1ccf901a11589afff5504d59fd0a53780eed2a952adade0348985139e060405160405180910390a2505050565b6107348242108261094d565b5050565b60003273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146107a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079f906113cf565b60405180910390fd5b83600001600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509392505050565b3273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610872576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610869906113cf565b60405180910390fd5b8084600001600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108d4919061141e565b9250508190555050505050565b808360000160008481526020019081526020016000206000828254610906919061141e565b92505081905550505050565b61091e8242118261094d565b5050565b610944828560000160008681526020019081526020016000205410158261094d565b50505050565b50565b60007f3dcdf63b41c103567d7225976ad9145e866c7a7dccc6c277ea86abbd268fbac960001c73ffffffffffffffffffffffffffffffffffffffff168360405160200161099a919061146d565b6040516020818303038152906040526040516109b691906114f9565b600060405180830381855afa9150503d80600081146109f1576040519150601f19603f3d011682016040523d82523d6000602084013e6109f6565b606091505b50509050808290610a3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a349190611554565b60405180910390fd5b50505050565b600080fd5b600080fd5b6000819050919050565b610a6081610a4d565b8114610a6b57600080fd5b50565b600081359050610a7d81610a57565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610aa857610aa7610a83565b5b8235905067ffffffffffffffff811115610ac557610ac4610a88565b5b602083019150836020820283011115610ae157610ae0610a8d565b5b9250929050565b60008083601f840112610afe57610afd610a83565b5b8235905067ffffffffffffffff811115610b1b57610b1a610a88565b5b602083019150836001820283011115610b3757610b36610a8d565b5b9250929050565b60008060008060008060808789031215610b5b57610b5a610a43565b5b6000610b6989828a01610a6e565b9650506020610b7a89828a01610a6e565b955050604087013567ffffffffffffffff811115610b9b57610b9a610a48565b5b610ba789828a01610a92565b9450945050606087013567ffffffffffffffff811115610bca57610bc9610a48565b5b610bd689828a01610ae8565b92509250509295509295509295565b6000819050919050565b610bf881610be5565b82525050565b6000602082019050610c136000830184610bef565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c4482610c19565b9050919050565b610c5481610c39565b8114610c5f57600080fd5b50565b600081359050610c7181610c4b565b92915050565b60008060008060608587031215610c9157610c90610a43565b5b6000610c9f87828801610a6e565b9450506020610cb087828801610c62565b935050604085013567ffffffffffffffff811115610cd157610cd0610a48565b5b610cdd87828801610a92565b925092505092959194509250565b610cf481610be5565b8114610cff57600080fd5b50565b600081359050610d1181610ceb565b92915050565b600060ff82169050919050565b610d2d81610d17565b8114610d3857600080fd5b50565b600081359050610d4a81610d24565b92915050565b60008060408385031215610d6757610d66610a43565b5b6000610d7585828601610d02565b9250506020610d8685828601610d3b565b9150509250929050565b600060208284031215610da657610da5610a43565b5b6000610db484828501610d02565b91505092915050565b600082825260208201905092915050565b7f5468726573686f6c642073686f756c64206e6f74206265203000000000000000600082015250565b6000610e04601983610dbd565b9150610e0f82610dce565b602082019050919050565b60006020820190508181036000830152610e3381610df7565b9050919050565b7f5468657265206d757374206265206174206c65617374206f6e6520766f746572600082015250565b6000610e70602083610dbd565b9150610e7b82610e3a565b602082019050919050565b60006020820190508181036000830152610e9f81610e63565b9050919050565b7f70726f706f73616c20616c726561647920657869737473000000000000000000600082015250565b6000610edc601783610dbd565b9150610ee782610ea6565b602082019050919050565b60006020820190508181036000830152610f0b81610ecf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610f5757610f56610a43565b5b6000610f6584828501610c62565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b610fa681610a4d565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610fe98385610fac565b9350610ff6838584610fbd565b610fff83610fcc565b840190509392505050565b600060408201905061101f6000830186610f9d565b8181036020830152611032818486610fdd565b9050949350505050565b600081905092915050565b6000819050919050565b61105a81610c39565b82525050565b600061106c8383611051565b60208301905092915050565b60006110876020840184610c62565b905092915050565b6000602082019050919050565b60006110a8838561103c565b93506110b382611047565b8060005b858110156110ec576110c98284611078565b6110d38882611060565b97506110de8361108f565b9250506001810190506110b7565b5085925050509392505050565b600061110682848661109c565b91508190509392505050565b61111b81610c39565b82525050565b60006060820190506111366000830186610f9d565b6111436020830185611112565b6111506040830184610bef565b949350505050565b7f73656e646572206e6f74206120766f7465720000000000000000000000000000600082015250565b600061118e601283610dbd565b915061119982611158565b602082019050919050565b600060208201905081810360008301526111bd81611181565b9050919050565b7f616c726561647920766f74656400000000000000000000000000000000000000600082015250565b60006111fa600d83610dbd565b9150611205826111c4565b602082019050919050565b60006020820190508181036000830152611229816111ed565b9050919050565b61123981610d17565b82525050565b60006040820190506112546000830185610bef565b6112616020830184611230565b9392505050565b600060208201905061127d6000830184611230565b92915050565b7f50726f706f73616c20616c726561647920657865637574656400000000000000600082015250565b60006112b9601983610dbd565b91506112c482611283565b602082019050919050565b600060208201905081810360008301526112e8816112ac565b9050919050565b6000819050919050565b6000819050919050565b600061131e611319611314846112ef565b6112f9565b610d17565b9050919050565b61132e81611303565b82525050565b60006040820190506113496000830185610bef565b6113566020830184611325565b9392505050565b7f43616e6e6f7420616363657373204f776e6564436f756e746572206f776e656460008201527f20627920616e6f74686572206164647265737300000000000000000000000000602082015250565b60006113b9603383610dbd565b91506113c48261135d565b604082019050919050565b600060208201905081810360008301526113e8816113ac565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061142982610a4d565b915061143483610a4d565b925082820190508082111561144c5761144b6113ef565b5b92915050565b60008115159050919050565b61146781611452565b82525050565b6000602082019050611482600083018461145e565b92915050565b600081519050919050565b600081905092915050565b60005b838110156114bc5780820151818401526020810190506114a1565b60008484015250505050565b60006114d382611488565b6114dd8185611493565b93506114ed81856020860161149e565b80840191505092915050565b600061150582846114c8565b915081905092915050565b600081519050919050565b600061152682611510565b6115308185610dbd565b935061154081856020860161149e565b61154981610fcc565b840191505092915050565b6000602082019050818103600083015261156e818461151b565b90509291505056fe50726f706f73616c20646561646c696e6520686173206e6f74207061737365642079657450726f706f73616c20646561646c696e652068617320706173736564206f722070726f706f73616c20646f6573206e6f74206578697374
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0LW`\x005`\xE0\x1C\x80cV-+\xC2\x14a\0QW\x80c\x825\x97\xDC\x14a\0\x81W\x80c\xB4\xB0q>\x14a\0\xB1W\x80c\xE7Q\xF2q\x14a\0\xCDW[`\0\x80\xFD[a\0k`\x04\x806\x03\x81\x01\x90a\0f\x91\x90a\x0B>V[a\0\xE9V[`@Qa\0x\x91\x90a\x0B\xFEV[`@Q\x80\x91\x03\x90\xF3[a\0\x9B`\x04\x806\x03\x81\x01\x90a\0\x96\x91\x90a\x0CwV[a\x03pV[`@Qa\0\xA8\x91\x90a\x0B\xFEV[`@Q\x80\x91\x03\x90\xF3[a\0\xCB`\x04\x806\x03\x81\x01\x90a\0\xC6\x91\x90a\rPV[a\x03\xCFV[\0[a\0\xE7`\x04\x806\x03\x81\x01\x90a\0\xE2\x91\x90a\r\x90V[a\x05\xC3V[\0[`\0a\x01*\x87`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7FDeadline must be in the future\0\0\x81RPa\x07(V[`\0\x86\x11a\x01mW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x01d\x90a\x0E\x1AV[`@Q\x80\x91\x03\x90\xFD[`\0\x85\x85\x90P\x11a\x01\xB3W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x01\xAA\x90a\x0E\x86V[`@Q\x80\x91\x03\x90\xFD[`\0a\x01\xC1\x883\x88\x88a\x03pV[\x90P`\0\x80`\0\x83\x81R` \x01\x90\x81R` \x01`\0 \x90P`\0\x81`\x05\x01T\x14a\x02 W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x02\x17\x90a\x0E\xF2V[`@Q\x80\x91\x03\x90\xFD[\x88\x81`\0\x01\x81\x90UP3\x81`\x02\x01`\0a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x86\x86\x90P\x81`\x05\x01\x81\x90UP`\0[\x87\x87\x90P\x81\x10\x15a\x03$W`\x01\x82`\x03\x01`\0\x8A\x8A\x85\x81\x81\x10a\x02\xA1Wa\x02\xA0a\x0F\x12V[[\x90P` \x02\x01` \x81\x01\x90a\x02\xB6\x91\x90a\x0FAV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x02\x81\x11\x15a\x03\x12Wa\x03\x11a\x0FnV[[\x02\x17\x90UP\x80\x80`\x01\x01\x91PPa\x02{V[P\x81\x7FR\x89\xD3\xC4\x95\xD7\x02\xA5G\xAC7\xA5\x15\x18\xD5\x89p\x1C\xE7.\xACE\xB3\xDE\x16\x14\x95\x92\xF5\0f\xA8\x8A\x87\x87`@Qa\x03Y\x93\x92\x91\x90a\x10\nV[`@Q\x80\x91\x03\x90\xA2\x81\x92PPP\x96\x95PPPPPPV[`\0\x84\x84\x84\x84`@Q` \x01a\x03\x87\x92\x91\x90a\x10\xF9V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `@Q` \x01a\x03\xAF\x93\x92\x91\x90a\x11!V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x94\x93PPPPV[`\0\x80`\0\x84\x81R` \x01\x90\x81R` \x01`\0 \x90Pa\x04\x0B\x81`\0\x01T`@Q\x80``\x01`@R\x80`7\x81R` \x01a\x15\x9B`7\x919a\x07(V[`\x01`\x02\x81\x11\x15a\x04\x1FWa\x04\x1Ea\x0FnV[[\x81`\x03\x01`\x003s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x02\x81\x11\x15a\x04\x80Wa\x04\x7Fa\x0FnV[[\x14a\x04\xC0W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x04\xB7\x90a\x11\xA4V[`@Q\x80\x91\x03\x90\xFD[`\0a\x04\xD8\x843`\x02a\x078\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x14a\x05\x18W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x05\x0F\x90a\x12\x10V[`@Q\x80\x91\x03\x90\xFD[a\x051\x833`\x01`\x02a\x08\x04\x90\x93\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[a\x05o\x83\x83`@Q` \x01a\x05G\x92\x91\x90a\x12?V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `\x01\x80a\x08\xE1\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83\x7F\xD8\xA9\\\xA0^\x9A&V\xFE!\xD862\x9D\x9C\xD7x0\xE7\xFE\xF7\xAC\xB7\xC0\xFD;\xF5B\x1E\xA7\xAD\x9A\x84`@Qa\x05\xB6\x91\x90a\x12hV[`@Q\x80\x91\x03\x90\xA3PPPV[`\0\x80`\0\x83\x81R` \x01\x90\x81R` \x01`\0 \x90Pa\x05\xFF\x81`\0\x01T`@Q\x80``\x01`@R\x80`$\x81R` \x01a\x15w`$\x919a\t\x12V[\x80`\x06\x01`\0\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x15a\x06QW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x06H\x90a\x12\xCFV[`@Q\x80\x91\x03\x90\xFD[`\0\x82`\x01`@Q` \x01a\x06g\x92\x91\x90a\x134V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x06\xD0\x81\x83`\x01\x01T`@Q\x80`@\x01`@R\x80`\x10\x81R` \x01\x7FNot enough votes\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP`\x01a\t\"\x90\x93\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[`\x01\x82`\x06\x01`\0a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UPa\x06\xF6\x83a\tJV[\x82\x7F{\x1B\xCF\x1C\xCF\x90\x1A\x11X\x9A\xFF\xF5PMY\xFD\nSx\x0E\xED*\x95*\xDA\xDE\x03H\x98Q9\xE0`@Q`@Q\x80\x91\x03\x90\xA2PPPV[a\x074\x82B\x10\x82a\tMV[PPV[`\x002s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x07\xA8W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x07\x9F\x90a\x13\xCFV[`@Q\x80\x91\x03\x90\xFD[\x83`\0\x01`\0\x84\x81R` \x01\x90\x81R` \x01`\0 `\0\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 T\x90P\x93\x92PPPV[2s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x08rW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x08i\x90a\x13\xCFV[`@Q\x80\x91\x03\x90\xFD[\x80\x84`\0\x01`\0\x85\x81R` \x01\x90\x81R` \x01`\0 `\0\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0\x82\x82Ta\x08\xD4\x91\x90a\x14\x1EV[\x92PP\x81\x90UPPPPPV[\x80\x83`\0\x01`\0\x84\x81R` \x01\x90\x81R` \x01`\0 `\0\x82\x82Ta\t\x06\x91\x90a\x14\x1EV[\x92PP\x81\x90UPPPPV[a\t\x1E\x82B\x11\x82a\tMV[PPV[a\tD\x82\x85`\0\x01`\0\x86\x81R` \x01\x90\x81R` \x01`\0 T\x10\x15\x82a\tMV[PPPPV[PV[`\0\x7F=\xCD\xF6;A\xC1\x03V}r%\x97j\xD9\x14^\x86lz}\xCC\xC6\xC2w\xEA\x86\xAB\xBD&\x8F\xBA\xC9`\0\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83`@Q` \x01a\t\x9A\x91\x90a\x14mV[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Qa\t\xB6\x91\x90a\x14\xF9V[`\0`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80`\0\x81\x14a\t\xF1W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\t\xF6V[``\x91P[PP\x90P\x80\x82\x90a\n=W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\n4\x91\x90a\x15TV[`@Q\x80\x91\x03\x90\xFD[PPPPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x81\x90P\x91\x90PV[a\n`\x81a\nMV[\x81\x14a\nkW`\0\x80\xFD[PV[`\0\x815\x90Pa\n}\x81a\nWV[\x92\x91PPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\x83`\x1F\x84\x01\x12a\n\xA8Wa\n\xA7a\n\x83V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\n\xC5Wa\n\xC4a\n\x88V[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15a\n\xE1Wa\n\xE0a\n\x8DV[[\x92P\x92\x90PV[`\0\x80\x83`\x1F\x84\x01\x12a\n\xFEWa\n\xFDa\n\x83V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B\x1BWa\x0B\x1Aa\n\x88V[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a\x0B7Wa\x0B6a\n\x8DV[[\x92P\x92\x90PV[`\0\x80`\0\x80`\0\x80`\x80\x87\x89\x03\x12\x15a\x0B[Wa\x0BZa\nCV[[`\0a\x0Bi\x89\x82\x8A\x01a\nnV[\x96PP` a\x0Bz\x89\x82\x8A\x01a\nnV[\x95PP`@\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B\x9BWa\x0B\x9Aa\nHV[[a\x0B\xA7\x89\x82\x8A\x01a\n\x92V[\x94P\x94PP``\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B\xCAWa\x0B\xC9a\nHV[[a\x0B\xD6\x89\x82\x8A\x01a\n\xE8V[\x92P\x92PP\x92\x95P\x92\x95P\x92\x95V[`\0\x81\x90P\x91\x90PV[a\x0B\xF8\x81a\x0B\xE5V[\x82RPPV[`\0` \x82\x01\x90Pa\x0C\x13`\0\x83\x01\x84a\x0B\xEFV[\x92\x91PPV[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[`\0a\x0CD\x82a\x0C\x19V[\x90P\x91\x90PV[a\x0CT\x81a\x0C9V[\x81\x14a\x0C_W`\0\x80\xFD[PV[`\0\x815\x90Pa\x0Cq\x81a\x0CKV[\x92\x91PPV[`\0\x80`\0\x80``\x85\x87\x03\x12\x15a\x0C\x91Wa\x0C\x90a\nCV[[`\0a\x0C\x9F\x87\x82\x88\x01a\nnV[\x94PP` a\x0C\xB0\x87\x82\x88\x01a\x0CbV[\x93PP`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0C\xD1Wa\x0C\xD0a\nHV[[a\x0C\xDD\x87\x82\x88\x01a\n\x92V[\x92P\x92PP\x92\x95\x91\x94P\x92PV[a\x0C\xF4\x81a\x0B\xE5V[\x81\x14a\x0C\xFFW`\0\x80\xFD[PV[`\0\x815\x90Pa\r\x11\x81a\x0C\xEBV[\x92\x91PPV[`\0`\xFF\x82\x16\x90P\x91\x90PV[a\r-\x81a\r\x17V[\x81\x14a\r8W`\0\x80\xFD[PV[`\0\x815\x90Pa\rJ\x81a\r$V[\x92\x91PPV[`\0\x80`@\x83\x85\x03\x12\x15a\rgWa\rfa\nCV[[`\0a\ru\x85\x82\x86\x01a\r\x02V[\x92PP` a\r\x86\x85\x82\x86\x01a\r;V[\x91PP\x92P\x92\x90PV[`\0` \x82\x84\x03\x12\x15a\r\xA6Wa\r\xA5a\nCV[[`\0a\r\xB4\x84\x82\x85\x01a\r\x02V[\x91PP\x92\x91PPV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FThreshold should not be 0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x0E\x04`\x19\x83a\r\xBDV[\x91Pa\x0E\x0F\x82a\r\xCEV[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0E3\x81a\r\xF7V[\x90P\x91\x90PV[\x7FThere must be at least one voter`\0\x82\x01RPV[`\0a\x0Ep` \x83a\r\xBDV[\x91Pa\x0E{\x82a\x0E:V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0E\x9F\x81a\x0EcV[\x90P\x91\x90PV[\x7Fproposal already exists\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x0E\xDC`\x17\x83a\r\xBDV[\x91Pa\x0E\xE7\x82a\x0E\xA6V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0F\x0B\x81a\x0E\xCFV[\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[`\0` \x82\x84\x03\x12\x15a\x0FWWa\x0FVa\nCV[[`\0a\x0Fe\x84\x82\x85\x01a\x0CbV[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`!`\x04R`$`\0\xFD[a\x0F\xA6\x81a\nMV[\x82RPPV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x82\x81\x837`\0\x83\x83\x01RPPPV[`\0`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[`\0a\x0F\xE9\x83\x85a\x0F\xACV[\x93Pa\x0F\xF6\x83\x85\x84a\x0F\xBDV[a\x0F\xFF\x83a\x0F\xCCV[\x84\x01\x90P\x93\x92PPPV[`\0`@\x82\x01\x90Pa\x10\x1F`\0\x83\x01\x86a\x0F\x9DV[\x81\x81\x03` \x83\x01Ra\x102\x81\x84\x86a\x0F\xDDV[\x90P\x94\x93PPPPV[`\0\x81\x90P\x92\x91PPV[`\0\x81\x90P\x91\x90PV[a\x10Z\x81a\x0C9V[\x82RPPV[`\0a\x10l\x83\x83a\x10QV[` \x83\x01\x90P\x92\x91PPV[`\0a\x10\x87` \x84\x01\x84a\x0CbV[\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x10\xA8\x83\x85a\x10<V[\x93Pa\x10\xB3\x82a\x10GV[\x80`\0[\x85\x81\x10\x15a\x10\xECWa\x10\xC9\x82\x84a\x10xV[a\x10\xD3\x88\x82a\x10`V[\x97Pa\x10\xDE\x83a\x10\x8FV[\x92PP`\x01\x81\x01\x90Pa\x10\xB7V[P\x85\x92PPP\x93\x92PPPV[`\0a\x11\x06\x82\x84\x86a\x10\x9CV[\x91P\x81\x90P\x93\x92PPPV[a\x11\x1B\x81a\x0C9V[\x82RPPV[`\0``\x82\x01\x90Pa\x116`\0\x83\x01\x86a\x0F\x9DV[a\x11C` \x83\x01\x85a\x11\x12V[a\x11P`@\x83\x01\x84a\x0B\xEFV[\x94\x93PPPPV[\x7Fsender not a voter\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x11\x8E`\x12\x83a\r\xBDV[\x91Pa\x11\x99\x82a\x11XV[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x11\xBD\x81a\x11\x81V[\x90P\x91\x90PV[\x7Falready voted\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x11\xFA`\r\x83a\r\xBDV[\x91Pa\x12\x05\x82a\x11\xC4V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x12)\x81a\x11\xEDV[\x90P\x91\x90PV[a\x129\x81a\r\x17V[\x82RPPV[`\0`@\x82\x01\x90Pa\x12T`\0\x83\x01\x85a\x0B\xEFV[a\x12a` \x83\x01\x84a\x120V[\x93\x92PPPV[`\0` \x82\x01\x90Pa\x12}`\0\x83\x01\x84a\x120V[\x92\x91PPV[\x7FProposal already executed\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x12\xB9`\x19\x83a\r\xBDV[\x91Pa\x12\xC4\x82a\x12\x83V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x12\xE8\x81a\x12\xACV[\x90P\x91\x90PV[`\0\x81\x90P\x91\x90PV[`\0\x81\x90P\x91\x90PV[`\0a\x13\x1Ea\x13\x19a\x13\x14\x84a\x12\xEFV[a\x12\xF9V[a\r\x17V[\x90P\x91\x90PV[a\x13.\x81a\x13\x03V[\x82RPPV[`\0`@\x82\x01\x90Pa\x13I`\0\x83\x01\x85a\x0B\xEFV[a\x13V` \x83\x01\x84a\x13%V[\x93\x92PPPV[\x7FCannot access OwnedCounter owned`\0\x82\x01R\x7F by another address\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[`\0a\x13\xB9`3\x83a\r\xBDV[\x91Pa\x13\xC4\x82a\x13]V[`@\x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x13\xE8\x81a\x13\xACV[\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[`\0a\x14)\x82a\nMV[\x91Pa\x144\x83a\nMV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x14LWa\x14Ka\x13\xEFV[[\x92\x91PPV[`\0\x81\x15\x15\x90P\x91\x90PV[a\x14g\x81a\x14RV[\x82RPPV[`\0` \x82\x01\x90Pa\x14\x82`\0\x83\x01\x84a\x14^V[\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0\x81\x90P\x92\x91PPV[`\0[\x83\x81\x10\x15a\x14\xBCW\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x14\xA1V[`\0\x84\x84\x01RPPPPV[`\0a\x14\xD3\x82a\x14\x88V[a\x14\xDD\x81\x85a\x14\x93V[\x93Pa\x14\xED\x81\x85` \x86\x01a\x14\x9EV[\x80\x84\x01\x91PP\x92\x91PPV[`\0a\x15\x05\x82\x84a\x14\xC8V[\x91P\x81\x90P\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0a\x15&\x82a\x15\x10V[a\x150\x81\x85a\r\xBDV[\x93Pa\x15@\x81\x85` \x86\x01a\x14\x9EV[a\x15I\x81a\x0F\xCCV[\x84\x01\x91PP\x92\x91PPV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x15n\x81\x84a\x15\x1BV[\x90P\x92\x91PPV\xFEProposal deadline has not passed yetProposal deadline has passed or proposal does not exist",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `ProposalCreated(bytes32,uint256,bytes)` and selector `0x5289d3c495d702a547ac37a51518d589701ce72eac45b3de16149592f50066a8`.
```solidity
event ProposalCreated(bytes32 indexed proposalId, uint256 deadline, bytes data);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ProposalCreated {
        #[allow(missing_docs)]
        pub proposalId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub deadline: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ProposalCreated {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "ProposalCreated(bytes32,uint256,bytes)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                82u8, 137u8, 211u8, 196u8, 149u8, 215u8, 2u8, 165u8, 71u8, 172u8, 55u8,
                165u8, 21u8, 24u8, 213u8, 137u8, 112u8, 28u8, 231u8, 46u8, 172u8, 69u8,
                179u8, 222u8, 22u8, 20u8, 149u8, 146u8, 245u8, 0u8, 102u8, 168u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    proposalId: topics.1,
                    deadline: data.0,
                    data: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deadline),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.proposalId.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.proposalId);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ProposalCreated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ProposalCreated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ProposalCreated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `ProposalExecuted(bytes32)` and selector `0x7b1bcf1ccf901a11589afff5504d59fd0a53780eed2a952adade0348985139e0`.
```solidity
event ProposalExecuted(bytes32 indexed proposalId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ProposalExecuted {
        #[allow(missing_docs)]
        pub proposalId: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ProposalExecuted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "ProposalExecuted(bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                123u8, 27u8, 207u8, 28u8, 207u8, 144u8, 26u8, 17u8, 88u8, 154u8, 255u8,
                245u8, 80u8, 77u8, 89u8, 253u8, 10u8, 83u8, 120u8, 14u8, 237u8, 42u8,
                149u8, 42u8, 218u8, 222u8, 3u8, 72u8, 152u8, 81u8, 57u8, 224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { proposalId: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.proposalId.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.proposalId);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ProposalExecuted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ProposalExecuted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ProposalExecuted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `VoteCast(bytes32,address,uint8)` and selector `0xd8a95ca05e9a2656fe21d836329d9cd77830e7fef7acb7c0fd3bf5421ea7ad9a`.
```solidity
event VoteCast(bytes32 indexed proposalId, address indexed voter, uint8 choice);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct VoteCast {
        #[allow(missing_docs)]
        pub proposalId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub voter: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub choice: u8,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for VoteCast {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "VoteCast(bytes32,address,uint8)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                216u8, 169u8, 92u8, 160u8, 94u8, 154u8, 38u8, 86u8, 254u8, 33u8, 216u8,
                54u8, 50u8, 157u8, 156u8, 215u8, 120u8, 48u8, 231u8, 254u8, 247u8, 172u8,
                183u8, 192u8, 253u8, 59u8, 245u8, 66u8, 30u8, 167u8, 173u8, 154u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    proposalId: topics.1,
                    voter: topics.2,
                    choice: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.choice),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.proposalId.clone(),
                    self.voter.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.proposalId);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.voter,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for VoteCast {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&VoteCast> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &VoteCast) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `castVote(bytes32,uint8)` and selector `0xb4b0713e`.
```solidity
function castVote(bytes32 proposalId, uint8 choice) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct castVoteCall {
        #[allow(missing_docs)]
        pub proposalId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub choice: u8,
    }
    ///Container type for the return parameters of the [`castVote(bytes32,uint8)`](castVoteCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct castVoteReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<8>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                u8,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<castVoteCall> for UnderlyingRustTuple<'_> {
                fn from(value: castVoteCall) -> Self {
                    (value.proposalId, value.choice)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for castVoteCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proposalId: tuple.0,
                        choice: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<castVoteReturn> for UnderlyingRustTuple<'_> {
                fn from(value: castVoteReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for castVoteReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for castVoteCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<8>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = castVoteReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "castVote(bytes32,uint8)";
            const SELECTOR: [u8; 4] = [180u8, 176u8, 113u8, 62u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.proposalId),
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.choice),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `createProposal(uint256,uint256,address[],bytes)` and selector `0x562d2bc2`.
```solidity
function createProposal(uint256 deadline, uint256 threshold, address[] memory voters, bytes memory data) external returns (bytes32 proposalId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createProposalCall {
        #[allow(missing_docs)]
        pub deadline: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub threshold: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub voters: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        #[allow(missing_docs)]
        pub data: alloy::sol_types::private::Bytes,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`createProposal(uint256,uint256,address[],bytes)`](createProposalCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createProposalReturn {
        #[allow(missing_docs)]
        pub proposalId: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createProposalCall> for UnderlyingRustTuple<'_> {
                fn from(value: createProposalCall) -> Self {
                    (value.deadline, value.threshold, value.voters, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for createProposalCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        deadline: tuple.0,
                        threshold: tuple.1,
                        voters: tuple.2,
                        data: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createProposalReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: createProposalReturn) -> Self {
                    (value.proposalId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for createProposalReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proposalId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for createProposalCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = createProposalReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "createProposal(uint256,uint256,address[],bytes)";
            const SELECTOR: [u8; 4] = [86u8, 45u8, 43u8, 194u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deadline),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.threshold),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.voters),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `execute(bytes32)` and selector `0xe751f271`.
```solidity
function execute(bytes32 proposalId) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeCall {
        #[allow(missing_docs)]
        pub proposalId: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`execute(bytes32)`](executeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct executeReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeCall> for UnderlyingRustTuple<'_> {
                fn from(value: executeCall) -> Self {
                    (value.proposalId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proposalId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: executeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "execute(bytes32)";
            const SELECTOR: [u8; 4] = [231u8, 81u8, 242u8, 113u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.proposalId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getProposalId(uint256,address,address[])` and selector `0x823597dc`.
```solidity
function getProposalId(uint256 deadline, address proposer, address[] memory voters) external pure returns (bytes32 proposalId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getProposalIdCall {
        #[allow(missing_docs)]
        pub deadline: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub proposer: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub voters: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getProposalId(uint256,address,address[])`](getProposalIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getProposalIdReturn {
        #[allow(missing_docs)]
        pub proposalId: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getProposalIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: getProposalIdCall) -> Self {
                    (value.deadline, value.proposer, value.voters)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getProposalIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        deadline: tuple.0,
                        proposer: tuple.1,
                        voters: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getProposalIdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getProposalIdReturn) -> Self {
                    (value.proposalId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getProposalIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proposalId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getProposalIdCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getProposalIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getProposalId(uint256,address,address[])";
            const SELECTOR: [u8; 4] = [130u8, 53u8, 151u8, 220u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deadline),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.voters),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`Voting`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum VotingCalls {
        #[allow(missing_docs)]
        castVote(castVoteCall),
        #[allow(missing_docs)]
        createProposal(createProposalCall),
        #[allow(missing_docs)]
        execute(executeCall),
        #[allow(missing_docs)]
        getProposalId(getProposalIdCall),
    }
    #[automatically_derived]
    impl VotingCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [86u8, 45u8, 43u8, 194u8],
            [130u8, 53u8, 151u8, 220u8],
            [180u8, 176u8, 113u8, 62u8],
            [231u8, 81u8, 242u8, 113u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for VotingCalls {
        const NAME: &'static str = "VotingCalls";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::castVote(_) => <castVoteCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::createProposal(_) => {
                    <createProposalCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::execute(_) => <executeCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::getProposalId(_) => {
                    <getProposalIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<VotingCalls>] = &[
                {
                    fn createProposal(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<VotingCalls> {
                        <createProposalCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(VotingCalls::createProposal)
                    }
                    createProposal
                },
                {
                    fn getProposalId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<VotingCalls> {
                        <getProposalIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(VotingCalls::getProposalId)
                    }
                    getProposalId
                },
                {
                    fn castVote(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<VotingCalls> {
                        <castVoteCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(VotingCalls::castVote)
                    }
                    castVote
                },
                {
                    fn execute(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<VotingCalls> {
                        <executeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(VotingCalls::execute)
                    }
                    execute
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::castVote(inner) => {
                    <castVoteCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::createProposal(inner) => {
                    <createProposalCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::execute(inner) => {
                    <executeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getProposalId(inner) => {
                    <getProposalIdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::castVote(inner) => {
                    <castVoteCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::createProposal(inner) => {
                    <createProposalCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::execute(inner) => {
                    <executeCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::getProposalId(inner) => {
                    <getProposalIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`Voting`](self) events.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum VotingEvents {
        #[allow(missing_docs)]
        ProposalCreated(ProposalCreated),
        #[allow(missing_docs)]
        ProposalExecuted(ProposalExecuted),
        #[allow(missing_docs)]
        VoteCast(VoteCast),
    }
    #[automatically_derived]
    impl VotingEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                82u8, 137u8, 211u8, 196u8, 149u8, 215u8, 2u8, 165u8, 71u8, 172u8, 55u8,
                165u8, 21u8, 24u8, 213u8, 137u8, 112u8, 28u8, 231u8, 46u8, 172u8, 69u8,
                179u8, 222u8, 22u8, 20u8, 149u8, 146u8, 245u8, 0u8, 102u8, 168u8,
            ],
            [
                123u8, 27u8, 207u8, 28u8, 207u8, 144u8, 26u8, 17u8, 88u8, 154u8, 255u8,
                245u8, 80u8, 77u8, 89u8, 253u8, 10u8, 83u8, 120u8, 14u8, 237u8, 42u8,
                149u8, 42u8, 218u8, 222u8, 3u8, 72u8, 152u8, 81u8, 57u8, 224u8,
            ],
            [
                216u8, 169u8, 92u8, 160u8, 94u8, 154u8, 38u8, 86u8, 254u8, 33u8, 216u8,
                54u8, 50u8, 157u8, 156u8, 215u8, 120u8, 48u8, 231u8, 254u8, 247u8, 172u8,
                183u8, 192u8, 253u8, 59u8, 245u8, 66u8, 30u8, 167u8, 173u8, 154u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for VotingEvents {
        const NAME: &'static str = "VotingEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<ProposalCreated as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <ProposalCreated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ProposalCreated)
                }
                Some(<ProposalExecuted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <ProposalExecuted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ProposalExecuted)
                }
                Some(<VoteCast as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <VoteCast as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::VoteCast)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for VotingEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ProposalCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ProposalExecuted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::VoteCast(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ProposalCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ProposalExecuted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::VoteCast(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Voting`](self) contract instance.

See the [wrapper's documentation](`VotingInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> VotingInstance<T, P, N> {
        VotingInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<VotingInstance<T, P, N>>,
    > {
        VotingInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        VotingInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`Voting`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Voting`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct VotingInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for VotingInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("VotingInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > VotingInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`Voting`](self) contract instance.

See the [wrapper's documentation](`VotingInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<VotingInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> VotingInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> VotingInstance<T, P, N> {
            VotingInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > VotingInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`castVote`] function.
        pub fn castVote(
            &self,
            proposalId: alloy::sol_types::private::FixedBytes<32>,
            choice: u8,
        ) -> alloy_contract::SolCallBuilder<T, &P, castVoteCall, N> {
            self.call_builder(&castVoteCall { proposalId, choice })
        }
        ///Creates a new call builder for the [`createProposal`] function.
        pub fn createProposal(
            &self,
            deadline: alloy::sol_types::private::primitives::aliases::U256,
            threshold: alloy::sol_types::private::primitives::aliases::U256,
            voters: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, createProposalCall, N> {
            self.call_builder(
                &createProposalCall {
                    deadline,
                    threshold,
                    voters,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`execute`] function.
        pub fn execute(
            &self,
            proposalId: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeCall, N> {
            self.call_builder(&executeCall { proposalId })
        }
        ///Creates a new call builder for the [`getProposalId`] function.
        pub fn getProposalId(
            &self,
            deadline: alloy::sol_types::private::primitives::aliases::U256,
            proposer: alloy::sol_types::private::Address,
            voters: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getProposalIdCall, N> {
            self.call_builder(
                &getProposalIdCall {
                    deadline,
                    proposer,
                    voters,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > VotingInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`ProposalCreated`] event.
        pub fn ProposalCreated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ProposalCreated, N> {
            self.event_filter::<ProposalCreated>()
        }
        ///Creates a new event filter for the [`ProposalExecuted`] event.
        pub fn ProposalExecuted_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ProposalExecuted, N> {
            self.event_filter::<ProposalExecuted>()
        }
        ///Creates a new event filter for the [`VoteCast`] event.
        pub fn VoteCast_filter(&self) -> alloy_contract::Event<T, &P, VoteCast, N> {
            self.event_filter::<VoteCast>()
        }
    }
}
