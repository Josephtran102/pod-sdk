/**

Generated by the following Solidity interface...
```solidity
interface MerkleTree {
    struct MultiProof {
        bytes32[] path;
        bool[] flags;
    }
    struct Proof {
        bytes32[] path;
    }

    error MerkleProofInvalidMultiproof();

    function hashLeaf(bytes memory prefix, bytes32 leaf) external pure returns (bytes32);
    function verify(bytes32 root, bytes32 leaf, Proof memory proof) external pure returns (bool);
    function verifyMulti(bytes32 root, bytes32[] memory leaves, MultiProof memory proof) external pure returns (bool);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "hashLeaf",
    "inputs": [
      {
        "name": "prefix",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "leaf",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "verify",
    "inputs": [
      {
        "name": "root",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "leaf",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "proof",
        "type": "tuple",
        "internalType": "struct MerkleTree.Proof",
        "components": [
          {
            "name": "path",
            "type": "bytes32[]",
            "internalType": "bytes32[]"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "verifyMulti",
    "inputs": [
      {
        "name": "root",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "leaves",
        "type": "bytes32[]",
        "internalType": "bytes32[]"
      },
      {
        "name": "proof",
        "type": "tuple",
        "internalType": "struct MerkleTree.MultiProof",
        "components": [
          {
            "name": "path",
            "type": "bytes32[]",
            "internalType": "bytes32[]"
          },
          {
            "name": "flags",
            "type": "bool[]",
            "internalType": "bool[]"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "error",
    "name": "MerkleProofInvalidMultiproof",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod MerkleTree {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x610bfb61004d600b8282823980515f1a6073146041577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004a575f3560e01c8063976ec70c1461004e578063c3a4b51e1461007e578063fad6e488146100ae575b5f5ffd5b610068600480360381019061006391906107e2565b6100de565b6040516100759190610879565b60405180910390f35b610098600480360381019061009391906108e7565b6100fb565b6040516100a59190610879565b60405180910390f35b6100c860048036038101906100c39190610a03565b610113565b6040516100d59190610a6c565b60405180910390f35b5f6100f2825f015183602001518686610145565b90509392505050565b5f61010a825f0151858561015d565b90509392505050565b5f8282604051602001610127929190610af7565b60405160208183030381529060405280519060200120905092915050565b5f82610152868685610173565b149050949350505050565b5f82610169858461043d565b1490509392505050565b5f5f825190505f8451905060018161018b9190610b54565b8651836101989190610b54565b146101cf576040517f3514049200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8167ffffffffffffffff8111156101ea576101e9610524565b5b6040519080825280602002602001820160405280156102185781602001602082028036833780820191505090505b5090505f5f90505f5f90505f5f90505f5f90505b85811015610374575f8785106102685785848061024890610b87565b95508151811061025b5761025a610bce565b5b6020026020010151610290565b89858061027490610b87565b96508151811061028757610286610bce565b5b60200260200101515b90505f8b83815181106102a6576102a5610bce565b5b60200260200101516102de578c84806102be90610b87565b9550815181106102d1576102d0610bce565b5b602002602001015161033a565b888610610311578685806102f190610b87565b96508151811061030457610303610bce565b5b6020026020010151610339565b8a868061031d90610b87565b9750815181106103305761032f610bce565b5b60200260200101515b5b9050610346828261048e565b87848151811061035957610358610bce565b5b6020026020010181815250505050808060010191505061022c565b505f8511156103e257895181146103b7576040517f3514049200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8360018603815181106103cd576103cc610bce565b5b60200260200101519650505050505050610436565b5f86111561041257875f815181106103fd576103fc610bce565b5b60200260200101519650505050505050610436565b895f8151811061042557610424610bce565b5b602002602001015196505050505050505b9392505050565b5f5f8290505f5f90505b8451811015610483576104748286838151811061046757610466610bce565b5b602002602001015161048e565b91508080600101915050610447565b508091505092915050565b5f8183106104a5576104a082846104b8565b6104b0565b6104af83836104b8565b5b905092915050565b5f825f528160205260405f20905092915050565b5f604051905090565b5f5ffd5b5f5ffd5b5f819050919050565b6104ef816104dd565b81146104f9575f5ffd5b50565b5f8135905061050a816104e6565b92915050565b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61055a82610514565b810181811067ffffffffffffffff8211171561057957610578610524565b5b80604052505050565b5f61058b6104cc565b90506105978282610551565b919050565b5f67ffffffffffffffff8211156105b6576105b5610524565b5b602082029050602081019050919050565b5f5ffd5b5f6105dd6105d88461059c565b610582565b90508083825260208201905060208402830185811115610600576105ff6105c7565b5b835b81811015610629578061061588826104fc565b845260208401935050602081019050610602565b5050509392505050565b5f82601f83011261064757610646610510565b5b81356106578482602086016105cb565b91505092915050565b5f5ffd5b5f5ffd5b5f67ffffffffffffffff82111561068257610681610524565b5b602082029050602081019050919050565b5f8115159050919050565b6106a781610693565b81146106b1575f5ffd5b50565b5f813590506106c28161069e565b92915050565b5f6106da6106d584610668565b610582565b905080838252602082019050602084028301858111156106fd576106fc6105c7565b5b835b81811015610726578061071288826106b4565b8452602084019350506020810190506106ff565b5050509392505050565b5f82601f83011261074457610743610510565b5b81356107548482602086016106c8565b91505092915050565b5f6040828403121561077257610771610660565b5b61077c6040610582565b90505f82013567ffffffffffffffff81111561079b5761079a610664565b5b6107a784828501610633565b5f83015250602082013567ffffffffffffffff8111156107ca576107c9610664565b5b6107d684828501610730565b60208301525092915050565b5f5f5f606084860312156107f9576107f86104d5565b5b5f610806868287016104fc565b935050602084013567ffffffffffffffff811115610827576108266104d9565b5b61083386828701610633565b925050604084013567ffffffffffffffff811115610854576108536104d9565b5b6108608682870161075d565b9150509250925092565b61087381610693565b82525050565b5f60208201905061088c5f83018461086a565b92915050565b5f602082840312156108a7576108a6610660565b5b6108b16020610582565b90505f82013567ffffffffffffffff8111156108d0576108cf610664565b5b6108dc84828501610633565b5f8301525092915050565b5f5f5f606084860312156108fe576108fd6104d5565b5b5f61090b868287016104fc565b935050602061091c868287016104fc565b925050604084013567ffffffffffffffff81111561093d5761093c6104d9565b5b61094986828701610892565b9150509250925092565b5f5ffd5b5f67ffffffffffffffff82111561097157610970610524565b5b61097a82610514565b9050602081019050919050565b828183375f83830152505050565b5f6109a76109a284610957565b610582565b9050828152602081018484840111156109c3576109c2610953565b5b6109ce848285610987565b509392505050565b5f82601f8301126109ea576109e9610510565b5b81356109fa848260208601610995565b91505092915050565b5f5f60408385031215610a1957610a186104d5565b5b5f83013567ffffffffffffffff811115610a3657610a356104d9565b5b610a42858286016109d6565b9250506020610a53858286016104fc565b9150509250929050565b610a66816104dd565b82525050565b5f602082019050610a7f5f830184610a5d565b92915050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f610ab182610a85565b610abb8185610a8f565b9350610acb818560208601610a99565b80840191505092915050565b5f819050919050565b610af1610aec826104dd565b610ad7565b82525050565b5f610b028285610aa7565b9150610b0e8284610ae0565b6020820191508190509392505050565b5f819050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610b5e82610b1e565b9150610b6983610b1e565b9250828201905080821115610b8157610b80610b27565b5b92915050565b5f610b9182610b1e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610bc357610bc2610b27565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"a\x0B\xFBa\0M`\x0B\x82\x82\x829\x80Q_\x1A`s\x14`AW\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R_`\x04R`$_\xFD[0_R`s\x81S\x82\x81\xF3\xFEs\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x000\x14`\x80`@R`\x046\x10a\0JW_5`\xE0\x1C\x80c\x97n\xC7\x0C\x14a\0NW\x80c\xC3\xA4\xB5\x1E\x14a\0~W\x80c\xFA\xD6\xE4\x88\x14a\0\xAEW[__\xFD[a\0h`\x04\x806\x03\x81\x01\x90a\0c\x91\x90a\x07\xE2V[a\0\xDEV[`@Qa\0u\x91\x90a\x08yV[`@Q\x80\x91\x03\x90\xF3[a\0\x98`\x04\x806\x03\x81\x01\x90a\0\x93\x91\x90a\x08\xE7V[a\0\xFBV[`@Qa\0\xA5\x91\x90a\x08yV[`@Q\x80\x91\x03\x90\xF3[a\0\xC8`\x04\x806\x03\x81\x01\x90a\0\xC3\x91\x90a\n\x03V[a\x01\x13V[`@Qa\0\xD5\x91\x90a\nlV[`@Q\x80\x91\x03\x90\xF3[_a\0\xF2\x82_\x01Q\x83` \x01Q\x86\x86a\x01EV[\x90P\x93\x92PPPV[_a\x01\n\x82_\x01Q\x85\x85a\x01]V[\x90P\x93\x92PPPV[_\x82\x82`@Q` \x01a\x01'\x92\x91\x90a\n\xF7V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x92\x91PPV[_\x82a\x01R\x86\x86\x85a\x01sV[\x14\x90P\x94\x93PPPPV[_\x82a\x01i\x85\x84a\x04=V[\x14\x90P\x93\x92PPPV[__\x82Q\x90P_\x84Q\x90P`\x01\x81a\x01\x8B\x91\x90a\x0BTV[\x86Q\x83a\x01\x98\x91\x90a\x0BTV[\x14a\x01\xCFW`@Q\x7F5\x14\x04\x92\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\xEAWa\x01\xE9a\x05$V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x02\x18W\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P__\x90P__\x90P__\x90P__\x90P[\x85\x81\x10\x15a\x03tW_\x87\x85\x10a\x02hW\x85\x84\x80a\x02H\x90a\x0B\x87V[\x95P\x81Q\x81\x10a\x02[Wa\x02Za\x0B\xCEV[[` \x02` \x01\x01Qa\x02\x90V[\x89\x85\x80a\x02t\x90a\x0B\x87V[\x96P\x81Q\x81\x10a\x02\x87Wa\x02\x86a\x0B\xCEV[[` \x02` \x01\x01Q[\x90P_\x8B\x83\x81Q\x81\x10a\x02\xA6Wa\x02\xA5a\x0B\xCEV[[` \x02` \x01\x01Qa\x02\xDEW\x8C\x84\x80a\x02\xBE\x90a\x0B\x87V[\x95P\x81Q\x81\x10a\x02\xD1Wa\x02\xD0a\x0B\xCEV[[` \x02` \x01\x01Qa\x03:V[\x88\x86\x10a\x03\x11W\x86\x85\x80a\x02\xF1\x90a\x0B\x87V[\x96P\x81Q\x81\x10a\x03\x04Wa\x03\x03a\x0B\xCEV[[` \x02` \x01\x01Qa\x039V[\x8A\x86\x80a\x03\x1D\x90a\x0B\x87V[\x97P\x81Q\x81\x10a\x030Wa\x03/a\x0B\xCEV[[` \x02` \x01\x01Q[[\x90Pa\x03F\x82\x82a\x04\x8EV[\x87\x84\x81Q\x81\x10a\x03YWa\x03Xa\x0B\xCEV[[` \x02` \x01\x01\x81\x81RPPPP\x80\x80`\x01\x01\x91PPa\x02,V[P_\x85\x11\x15a\x03\xE2W\x89Q\x81\x14a\x03\xB7W`@Q\x7F5\x14\x04\x92\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x83`\x01\x86\x03\x81Q\x81\x10a\x03\xCDWa\x03\xCCa\x0B\xCEV[[` \x02` \x01\x01Q\x96PPPPPPPa\x046V[_\x86\x11\x15a\x04\x12W\x87_\x81Q\x81\x10a\x03\xFDWa\x03\xFCa\x0B\xCEV[[` \x02` \x01\x01Q\x96PPPPPPPa\x046V[\x89_\x81Q\x81\x10a\x04%Wa\x04$a\x0B\xCEV[[` \x02` \x01\x01Q\x96PPPPPPP[\x93\x92PPPV[__\x82\x90P__\x90P[\x84Q\x81\x10\x15a\x04\x83Wa\x04t\x82\x86\x83\x81Q\x81\x10a\x04gWa\x04fa\x0B\xCEV[[` \x02` \x01\x01Qa\x04\x8EV[\x91P\x80\x80`\x01\x01\x91PPa\x04GV[P\x80\x91PP\x92\x91PPV[_\x81\x83\x10a\x04\xA5Wa\x04\xA0\x82\x84a\x04\xB8V[a\x04\xB0V[a\x04\xAF\x83\x83a\x04\xB8V[[\x90P\x92\x91PPV[_\x82_R\x81` R`@_ \x90P\x92\x91PPV[_`@Q\x90P\x90V[__\xFD[__\xFD[_\x81\x90P\x91\x90PV[a\x04\xEF\x81a\x04\xDDV[\x81\x14a\x04\xF9W__\xFD[PV[_\x815\x90Pa\x05\n\x81a\x04\xE6V[\x92\x91PPV[__\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x05Z\x82a\x05\x14V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x05yWa\x05xa\x05$V[[\x80`@RPPPV[_a\x05\x8Ba\x04\xCCV[\x90Pa\x05\x97\x82\x82a\x05QV[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x05\xB6Wa\x05\xB5a\x05$V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[__\xFD[_a\x05\xDDa\x05\xD8\x84a\x05\x9CV[a\x05\x82V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x06\0Wa\x05\xFFa\x05\xC7V[[\x83[\x81\x81\x10\x15a\x06)W\x80a\x06\x15\x88\x82a\x04\xFCV[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x06\x02V[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x06GWa\x06Fa\x05\x10V[[\x815a\x06W\x84\x82` \x86\x01a\x05\xCBV[\x91PP\x92\x91PPV[__\xFD[__\xFD[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x06\x82Wa\x06\x81a\x05$V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[_\x81\x15\x15\x90P\x91\x90PV[a\x06\xA7\x81a\x06\x93V[\x81\x14a\x06\xB1W__\xFD[PV[_\x815\x90Pa\x06\xC2\x81a\x06\x9EV[\x92\x91PPV[_a\x06\xDAa\x06\xD5\x84a\x06hV[a\x05\x82V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x06\xFDWa\x06\xFCa\x05\xC7V[[\x83[\x81\x81\x10\x15a\x07&W\x80a\x07\x12\x88\x82a\x06\xB4V[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x06\xFFV[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x07DWa\x07Ca\x05\x10V[[\x815a\x07T\x84\x82` \x86\x01a\x06\xC8V[\x91PP\x92\x91PPV[_`@\x82\x84\x03\x12\x15a\x07rWa\x07qa\x06`V[[a\x07|`@a\x05\x82V[\x90P_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07\x9BWa\x07\x9Aa\x06dV[[a\x07\xA7\x84\x82\x85\x01a\x063V[_\x83\x01RP` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07\xCAWa\x07\xC9a\x06dV[[a\x07\xD6\x84\x82\x85\x01a\x070V[` \x83\x01RP\x92\x91PPV[___``\x84\x86\x03\x12\x15a\x07\xF9Wa\x07\xF8a\x04\xD5V[[_a\x08\x06\x86\x82\x87\x01a\x04\xFCV[\x93PP` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08'Wa\x08&a\x04\xD9V[[a\x083\x86\x82\x87\x01a\x063V[\x92PP`@\x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08TWa\x08Sa\x04\xD9V[[a\x08`\x86\x82\x87\x01a\x07]V[\x91PP\x92P\x92P\x92V[a\x08s\x81a\x06\x93V[\x82RPPV[_` \x82\x01\x90Pa\x08\x8C_\x83\x01\x84a\x08jV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x08\xA7Wa\x08\xA6a\x06`V[[a\x08\xB1` a\x05\x82V[\x90P_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08\xD0Wa\x08\xCFa\x06dV[[a\x08\xDC\x84\x82\x85\x01a\x063V[_\x83\x01RP\x92\x91PPV[___``\x84\x86\x03\x12\x15a\x08\xFEWa\x08\xFDa\x04\xD5V[[_a\t\x0B\x86\x82\x87\x01a\x04\xFCV[\x93PP` a\t\x1C\x86\x82\x87\x01a\x04\xFCV[\x92PP`@\x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\t=Wa\t<a\x04\xD9V[[a\tI\x86\x82\x87\x01a\x08\x92V[\x91PP\x92P\x92P\x92V[__\xFD[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\tqWa\tpa\x05$V[[a\tz\x82a\x05\x14V[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837_\x83\x83\x01RPPPV[_a\t\xA7a\t\xA2\x84a\tWV[a\x05\x82V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\t\xC3Wa\t\xC2a\tSV[[a\t\xCE\x84\x82\x85a\t\x87V[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\t\xEAWa\t\xE9a\x05\x10V[[\x815a\t\xFA\x84\x82` \x86\x01a\t\x95V[\x91PP\x92\x91PPV[__`@\x83\x85\x03\x12\x15a\n\x19Wa\n\x18a\x04\xD5V[[_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\n6Wa\n5a\x04\xD9V[[a\nB\x85\x82\x86\x01a\t\xD6V[\x92PP` a\nS\x85\x82\x86\x01a\x04\xFCV[\x91PP\x92P\x92\x90PV[a\nf\x81a\x04\xDDV[\x82RPPV[_` \x82\x01\x90Pa\n\x7F_\x83\x01\x84a\n]V[\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\n\xB1\x82a\n\x85V[a\n\xBB\x81\x85a\n\x8FV[\x93Pa\n\xCB\x81\x85` \x86\x01a\n\x99V[\x80\x84\x01\x91PP\x92\x91PPV[_\x81\x90P\x91\x90PV[a\n\xF1a\n\xEC\x82a\x04\xDDV[a\n\xD7V[\x82RPPV[_a\x0B\x02\x82\x85a\n\xA7V[\x91Pa\x0B\x0E\x82\x84a\n\xE0V[` \x82\x01\x91P\x81\x90P\x93\x92PPPV[_\x81\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a\x0B^\x82a\x0B\x1EV[\x91Pa\x0Bi\x83a\x0B\x1EV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x0B\x81Wa\x0B\x80a\x0B'V[[\x92\x91PPV[_a\x0B\x91\x82a\x0B\x1EV[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03a\x0B\xC3Wa\x0B\xC2a\x0B'V[[`\x01\x82\x01\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x730000000000000000000000000000000000000000301460806040526004361061004a575f3560e01c8063976ec70c1461004e578063c3a4b51e1461007e578063fad6e488146100ae575b5f5ffd5b610068600480360381019061006391906107e2565b6100de565b6040516100759190610879565b60405180910390f35b610098600480360381019061009391906108e7565b6100fb565b6040516100a59190610879565b60405180910390f35b6100c860048036038101906100c39190610a03565b610113565b6040516100d59190610a6c565b60405180910390f35b5f6100f2825f015183602001518686610145565b90509392505050565b5f61010a825f0151858561015d565b90509392505050565b5f8282604051602001610127929190610af7565b60405160208183030381529060405280519060200120905092915050565b5f82610152868685610173565b149050949350505050565b5f82610169858461043d565b1490509392505050565b5f5f825190505f8451905060018161018b9190610b54565b8651836101989190610b54565b146101cf576040517f3514049200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8167ffffffffffffffff8111156101ea576101e9610524565b5b6040519080825280602002602001820160405280156102185781602001602082028036833780820191505090505b5090505f5f90505f5f90505f5f90505f5f90505b85811015610374575f8785106102685785848061024890610b87565b95508151811061025b5761025a610bce565b5b6020026020010151610290565b89858061027490610b87565b96508151811061028757610286610bce565b5b60200260200101515b90505f8b83815181106102a6576102a5610bce565b5b60200260200101516102de578c84806102be90610b87565b9550815181106102d1576102d0610bce565b5b602002602001015161033a565b888610610311578685806102f190610b87565b96508151811061030457610303610bce565b5b6020026020010151610339565b8a868061031d90610b87565b9750815181106103305761032f610bce565b5b60200260200101515b5b9050610346828261048e565b87848151811061035957610358610bce565b5b6020026020010181815250505050808060010191505061022c565b505f8511156103e257895181146103b7576040517f3514049200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8360018603815181106103cd576103cc610bce565b5b60200260200101519650505050505050610436565b5f86111561041257875f815181106103fd576103fc610bce565b5b60200260200101519650505050505050610436565b895f8151811061042557610424610bce565b5b602002602001015196505050505050505b9392505050565b5f5f8290505f5f90505b8451811015610483576104748286838151811061046757610466610bce565b5b602002602001015161048e565b91508080600101915050610447565b508091505092915050565b5f8183106104a5576104a082846104b8565b6104b0565b6104af83836104b8565b5b905092915050565b5f825f528160205260405f20905092915050565b5f604051905090565b5f5ffd5b5f5ffd5b5f819050919050565b6104ef816104dd565b81146104f9575f5ffd5b50565b5f8135905061050a816104e6565b92915050565b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61055a82610514565b810181811067ffffffffffffffff8211171561057957610578610524565b5b80604052505050565b5f61058b6104cc565b90506105978282610551565b919050565b5f67ffffffffffffffff8211156105b6576105b5610524565b5b602082029050602081019050919050565b5f5ffd5b5f6105dd6105d88461059c565b610582565b90508083825260208201905060208402830185811115610600576105ff6105c7565b5b835b81811015610629578061061588826104fc565b845260208401935050602081019050610602565b5050509392505050565b5f82601f83011261064757610646610510565b5b81356106578482602086016105cb565b91505092915050565b5f5ffd5b5f5ffd5b5f67ffffffffffffffff82111561068257610681610524565b5b602082029050602081019050919050565b5f8115159050919050565b6106a781610693565b81146106b1575f5ffd5b50565b5f813590506106c28161069e565b92915050565b5f6106da6106d584610668565b610582565b905080838252602082019050602084028301858111156106fd576106fc6105c7565b5b835b81811015610726578061071288826106b4565b8452602084019350506020810190506106ff565b5050509392505050565b5f82601f83011261074457610743610510565b5b81356107548482602086016106c8565b91505092915050565b5f6040828403121561077257610771610660565b5b61077c6040610582565b90505f82013567ffffffffffffffff81111561079b5761079a610664565b5b6107a784828501610633565b5f83015250602082013567ffffffffffffffff8111156107ca576107c9610664565b5b6107d684828501610730565b60208301525092915050565b5f5f5f606084860312156107f9576107f86104d5565b5b5f610806868287016104fc565b935050602084013567ffffffffffffffff811115610827576108266104d9565b5b61083386828701610633565b925050604084013567ffffffffffffffff811115610854576108536104d9565b5b6108608682870161075d565b9150509250925092565b61087381610693565b82525050565b5f60208201905061088c5f83018461086a565b92915050565b5f602082840312156108a7576108a6610660565b5b6108b16020610582565b90505f82013567ffffffffffffffff8111156108d0576108cf610664565b5b6108dc84828501610633565b5f8301525092915050565b5f5f5f606084860312156108fe576108fd6104d5565b5b5f61090b868287016104fc565b935050602061091c868287016104fc565b925050604084013567ffffffffffffffff81111561093d5761093c6104d9565b5b61094986828701610892565b9150509250925092565b5f5ffd5b5f67ffffffffffffffff82111561097157610970610524565b5b61097a82610514565b9050602081019050919050565b828183375f83830152505050565b5f6109a76109a284610957565b610582565b9050828152602081018484840111156109c3576109c2610953565b5b6109ce848285610987565b509392505050565b5f82601f8301126109ea576109e9610510565b5b81356109fa848260208601610995565b91505092915050565b5f5f60408385031215610a1957610a186104d5565b5b5f83013567ffffffffffffffff811115610a3657610a356104d9565b5b610a42858286016109d6565b9250506020610a53858286016104fc565b9150509250929050565b610a66816104dd565b82525050565b5f602082019050610a7f5f830184610a5d565b92915050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f610ab182610a85565b610abb8185610a8f565b9350610acb818560208601610a99565b80840191505092915050565b5f819050919050565b610af1610aec826104dd565b610ad7565b82525050565b5f610b028285610aa7565b9150610b0e8284610ae0565b6020820191508190509392505050565b5f819050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610b5e82610b1e565b9150610b6983610b1e565b9250828201905080821115610b8157610b80610b27565b5b92915050565b5f610b9182610b1e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610bc357610bc2610b27565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"s\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x000\x14`\x80`@R`\x046\x10a\0JW_5`\xE0\x1C\x80c\x97n\xC7\x0C\x14a\0NW\x80c\xC3\xA4\xB5\x1E\x14a\0~W\x80c\xFA\xD6\xE4\x88\x14a\0\xAEW[__\xFD[a\0h`\x04\x806\x03\x81\x01\x90a\0c\x91\x90a\x07\xE2V[a\0\xDEV[`@Qa\0u\x91\x90a\x08yV[`@Q\x80\x91\x03\x90\xF3[a\0\x98`\x04\x806\x03\x81\x01\x90a\0\x93\x91\x90a\x08\xE7V[a\0\xFBV[`@Qa\0\xA5\x91\x90a\x08yV[`@Q\x80\x91\x03\x90\xF3[a\0\xC8`\x04\x806\x03\x81\x01\x90a\0\xC3\x91\x90a\n\x03V[a\x01\x13V[`@Qa\0\xD5\x91\x90a\nlV[`@Q\x80\x91\x03\x90\xF3[_a\0\xF2\x82_\x01Q\x83` \x01Q\x86\x86a\x01EV[\x90P\x93\x92PPPV[_a\x01\n\x82_\x01Q\x85\x85a\x01]V[\x90P\x93\x92PPPV[_\x82\x82`@Q` \x01a\x01'\x92\x91\x90a\n\xF7V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x92\x91PPV[_\x82a\x01R\x86\x86\x85a\x01sV[\x14\x90P\x94\x93PPPPV[_\x82a\x01i\x85\x84a\x04=V[\x14\x90P\x93\x92PPPV[__\x82Q\x90P_\x84Q\x90P`\x01\x81a\x01\x8B\x91\x90a\x0BTV[\x86Q\x83a\x01\x98\x91\x90a\x0BTV[\x14a\x01\xCFW`@Q\x7F5\x14\x04\x92\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\xEAWa\x01\xE9a\x05$V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x02\x18W\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P__\x90P__\x90P__\x90P__\x90P[\x85\x81\x10\x15a\x03tW_\x87\x85\x10a\x02hW\x85\x84\x80a\x02H\x90a\x0B\x87V[\x95P\x81Q\x81\x10a\x02[Wa\x02Za\x0B\xCEV[[` \x02` \x01\x01Qa\x02\x90V[\x89\x85\x80a\x02t\x90a\x0B\x87V[\x96P\x81Q\x81\x10a\x02\x87Wa\x02\x86a\x0B\xCEV[[` \x02` \x01\x01Q[\x90P_\x8B\x83\x81Q\x81\x10a\x02\xA6Wa\x02\xA5a\x0B\xCEV[[` \x02` \x01\x01Qa\x02\xDEW\x8C\x84\x80a\x02\xBE\x90a\x0B\x87V[\x95P\x81Q\x81\x10a\x02\xD1Wa\x02\xD0a\x0B\xCEV[[` \x02` \x01\x01Qa\x03:V[\x88\x86\x10a\x03\x11W\x86\x85\x80a\x02\xF1\x90a\x0B\x87V[\x96P\x81Q\x81\x10a\x03\x04Wa\x03\x03a\x0B\xCEV[[` \x02` \x01\x01Qa\x039V[\x8A\x86\x80a\x03\x1D\x90a\x0B\x87V[\x97P\x81Q\x81\x10a\x030Wa\x03/a\x0B\xCEV[[` \x02` \x01\x01Q[[\x90Pa\x03F\x82\x82a\x04\x8EV[\x87\x84\x81Q\x81\x10a\x03YWa\x03Xa\x0B\xCEV[[` \x02` \x01\x01\x81\x81RPPPP\x80\x80`\x01\x01\x91PPa\x02,V[P_\x85\x11\x15a\x03\xE2W\x89Q\x81\x14a\x03\xB7W`@Q\x7F5\x14\x04\x92\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x83`\x01\x86\x03\x81Q\x81\x10a\x03\xCDWa\x03\xCCa\x0B\xCEV[[` \x02` \x01\x01Q\x96PPPPPPPa\x046V[_\x86\x11\x15a\x04\x12W\x87_\x81Q\x81\x10a\x03\xFDWa\x03\xFCa\x0B\xCEV[[` \x02` \x01\x01Q\x96PPPPPPPa\x046V[\x89_\x81Q\x81\x10a\x04%Wa\x04$a\x0B\xCEV[[` \x02` \x01\x01Q\x96PPPPPPP[\x93\x92PPPV[__\x82\x90P__\x90P[\x84Q\x81\x10\x15a\x04\x83Wa\x04t\x82\x86\x83\x81Q\x81\x10a\x04gWa\x04fa\x0B\xCEV[[` \x02` \x01\x01Qa\x04\x8EV[\x91P\x80\x80`\x01\x01\x91PPa\x04GV[P\x80\x91PP\x92\x91PPV[_\x81\x83\x10a\x04\xA5Wa\x04\xA0\x82\x84a\x04\xB8V[a\x04\xB0V[a\x04\xAF\x83\x83a\x04\xB8V[[\x90P\x92\x91PPV[_\x82_R\x81` R`@_ \x90P\x92\x91PPV[_`@Q\x90P\x90V[__\xFD[__\xFD[_\x81\x90P\x91\x90PV[a\x04\xEF\x81a\x04\xDDV[\x81\x14a\x04\xF9W__\xFD[PV[_\x815\x90Pa\x05\n\x81a\x04\xE6V[\x92\x91PPV[__\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x05Z\x82a\x05\x14V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x05yWa\x05xa\x05$V[[\x80`@RPPPV[_a\x05\x8Ba\x04\xCCV[\x90Pa\x05\x97\x82\x82a\x05QV[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x05\xB6Wa\x05\xB5a\x05$V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[__\xFD[_a\x05\xDDa\x05\xD8\x84a\x05\x9CV[a\x05\x82V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x06\0Wa\x05\xFFa\x05\xC7V[[\x83[\x81\x81\x10\x15a\x06)W\x80a\x06\x15\x88\x82a\x04\xFCV[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x06\x02V[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x06GWa\x06Fa\x05\x10V[[\x815a\x06W\x84\x82` \x86\x01a\x05\xCBV[\x91PP\x92\x91PPV[__\xFD[__\xFD[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x06\x82Wa\x06\x81a\x05$V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[_\x81\x15\x15\x90P\x91\x90PV[a\x06\xA7\x81a\x06\x93V[\x81\x14a\x06\xB1W__\xFD[PV[_\x815\x90Pa\x06\xC2\x81a\x06\x9EV[\x92\x91PPV[_a\x06\xDAa\x06\xD5\x84a\x06hV[a\x05\x82V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x06\xFDWa\x06\xFCa\x05\xC7V[[\x83[\x81\x81\x10\x15a\x07&W\x80a\x07\x12\x88\x82a\x06\xB4V[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x06\xFFV[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x07DWa\x07Ca\x05\x10V[[\x815a\x07T\x84\x82` \x86\x01a\x06\xC8V[\x91PP\x92\x91PPV[_`@\x82\x84\x03\x12\x15a\x07rWa\x07qa\x06`V[[a\x07|`@a\x05\x82V[\x90P_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07\x9BWa\x07\x9Aa\x06dV[[a\x07\xA7\x84\x82\x85\x01a\x063V[_\x83\x01RP` \x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07\xCAWa\x07\xC9a\x06dV[[a\x07\xD6\x84\x82\x85\x01a\x070V[` \x83\x01RP\x92\x91PPV[___``\x84\x86\x03\x12\x15a\x07\xF9Wa\x07\xF8a\x04\xD5V[[_a\x08\x06\x86\x82\x87\x01a\x04\xFCV[\x93PP` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08'Wa\x08&a\x04\xD9V[[a\x083\x86\x82\x87\x01a\x063V[\x92PP`@\x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08TWa\x08Sa\x04\xD9V[[a\x08`\x86\x82\x87\x01a\x07]V[\x91PP\x92P\x92P\x92V[a\x08s\x81a\x06\x93V[\x82RPPV[_` \x82\x01\x90Pa\x08\x8C_\x83\x01\x84a\x08jV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x08\xA7Wa\x08\xA6a\x06`V[[a\x08\xB1` a\x05\x82V[\x90P_\x82\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08\xD0Wa\x08\xCFa\x06dV[[a\x08\xDC\x84\x82\x85\x01a\x063V[_\x83\x01RP\x92\x91PPV[___``\x84\x86\x03\x12\x15a\x08\xFEWa\x08\xFDa\x04\xD5V[[_a\t\x0B\x86\x82\x87\x01a\x04\xFCV[\x93PP` a\t\x1C\x86\x82\x87\x01a\x04\xFCV[\x92PP`@\x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\t=Wa\t<a\x04\xD9V[[a\tI\x86\x82\x87\x01a\x08\x92V[\x91PP\x92P\x92P\x92V[__\xFD[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\tqWa\tpa\x05$V[[a\tz\x82a\x05\x14V[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x837_\x83\x83\x01RPPPV[_a\t\xA7a\t\xA2\x84a\tWV[a\x05\x82V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\t\xC3Wa\t\xC2a\tSV[[a\t\xCE\x84\x82\x85a\t\x87V[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\t\xEAWa\t\xE9a\x05\x10V[[\x815a\t\xFA\x84\x82` \x86\x01a\t\x95V[\x91PP\x92\x91PPV[__`@\x83\x85\x03\x12\x15a\n\x19Wa\n\x18a\x04\xD5V[[_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\n6Wa\n5a\x04\xD9V[[a\nB\x85\x82\x86\x01a\t\xD6V[\x92PP` a\nS\x85\x82\x86\x01a\x04\xFCV[\x91PP\x92P\x92\x90PV[a\nf\x81a\x04\xDDV[\x82RPPV[_` \x82\x01\x90Pa\n\x7F_\x83\x01\x84a\n]V[\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\n\xB1\x82a\n\x85V[a\n\xBB\x81\x85a\n\x8FV[\x93Pa\n\xCB\x81\x85` \x86\x01a\n\x99V[\x80\x84\x01\x91PP\x92\x91PPV[_\x81\x90P\x91\x90PV[a\n\xF1a\n\xEC\x82a\x04\xDDV[a\n\xD7V[\x82RPPV[_a\x0B\x02\x82\x85a\n\xA7V[\x91Pa\x0B\x0E\x82\x84a\n\xE0V[` \x82\x01\x91P\x81\x90P\x93\x92PPPV[_\x81\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a\x0B^\x82a\x0B\x1EV[\x91Pa\x0Bi\x83a\x0B\x1EV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x0B\x81Wa\x0B\x80a\x0B'V[[\x92\x91PPV[_a\x0B\x91\x82a\x0B\x1EV[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03a\x0B\xC3Wa\x0B\xC2a\x0B'V[[`\x01\x82\x01\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD",
    );
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**```solidity
struct MultiProof { bytes32[] path; bool[] flags; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MultiProof {
        #[allow(missing_docs)]
        pub path: alloy::sol_types::private::Vec<
            alloy::sol_types::private::FixedBytes<32>,
        >,
        #[allow(missing_docs)]
        pub flags: alloy::sol_types::private::Vec<bool>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Array<
                alloy::sol_types::sol_data::FixedBytes<32>,
            >,
            alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bool>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Vec<alloy::sol_types::private::FixedBytes<32>>,
            alloy::sol_types::private::Vec<bool>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MultiProof> for UnderlyingRustTuple<'_> {
            fn from(value: MultiProof) -> Self {
                (value.path, value.flags)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for MultiProof {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    path: tuple.0,
                    flags: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for MultiProof {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for MultiProof {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                    > as alloy_sol_types::SolType>::tokenize(&self.path),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bool,
                    > as alloy_sol_types::SolType>::tokenize(&self.flags),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for MultiProof {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for MultiProof {
            const NAME: &'static str = "MultiProof";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "MultiProof(bytes32[] path,bool[] flags)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.path)
                        .0,
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bool,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.flags)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for MultiProof {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.path)
                    + <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bool,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.flags)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.path,
                    out,
                );
                <alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::Bool,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.flags,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**```solidity
struct Proof { bytes32[] path; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Proof {
        #[allow(missing_docs)]
        pub path: alloy::sol_types::private::Vec<
            alloy::sol_types::private::FixedBytes<32>,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Array<
                alloy::sol_types::sol_data::FixedBytes<32>,
            >,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Vec<alloy::sol_types::private::FixedBytes<32>>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Proof> for UnderlyingRustTuple<'_> {
            fn from(value: Proof) -> Self {
                (value.path,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Proof {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { path: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Proof {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Proof {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                    > as alloy_sol_types::SolType>::tokenize(&self.path),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Proof {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Proof {
            const NAME: &'static str = "Proof";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed("Proof(bytes32[] path)")
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                <alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                > as alloy_sol_types::SolType>::eip712_data_word(&self.path)
                    .0
                    .to_vec()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Proof {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.path)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.path,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `MerkleProofInvalidMultiproof()` and selector `0x35140492`.
```solidity
error MerkleProofInvalidMultiproof();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MerkleProofInvalidMultiproof {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MerkleProofInvalidMultiproof>
        for UnderlyingRustTuple<'_> {
            fn from(value: MerkleProofInvalidMultiproof) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for MerkleProofInvalidMultiproof {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for MerkleProofInvalidMultiproof {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MerkleProofInvalidMultiproof()";
            const SELECTOR: [u8; 4] = [53u8, 20u8, 4u8, 146u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `hashLeaf(bytes,bytes32)` and selector `0xfad6e488`.
```solidity
function hashLeaf(bytes memory prefix, bytes32 leaf) external pure returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hashLeafCall {
        #[allow(missing_docs)]
        pub prefix: alloy::sol_types::private::Bytes,
        #[allow(missing_docs)]
        pub leaf: alloy::sol_types::private::FixedBytes<32>,
    }
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`hashLeaf(bytes,bytes32)`](hashLeafCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct hashLeafReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::FixedBytes<32>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hashLeafCall> for UnderlyingRustTuple<'_> {
                fn from(value: hashLeafCall) -> Self {
                    (value.prefix, value.leaf)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hashLeafCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        prefix: tuple.0,
                        leaf: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<hashLeafReturn> for UnderlyingRustTuple<'_> {
                fn from(value: hashLeafReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for hashLeafReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for hashLeafCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = hashLeafReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "hashLeaf(bytes,bytes32)";
            const SELECTOR: [u8; 4] = [250u8, 214u8, 228u8, 136u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.prefix,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.leaf),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `verify(bytes32,bytes32,(bytes32[]))` and selector `0x71051354`.
```solidity
function verify(bytes32 root, bytes32 leaf, Proof memory proof) external pure returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyCall {
        #[allow(missing_docs)]
        pub root: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub leaf: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub proof: <Proof as alloy::sol_types::SolType>::RustType,
    }
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`verify(bytes32,bytes32,(bytes32[]))`](verifyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                Proof,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::FixedBytes<32>,
                <Proof as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyCall> for UnderlyingRustTuple<'_> {
                fn from(value: verifyCall) -> Self {
                    (value.root, value.leaf, value.proof)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for verifyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        root: tuple.0,
                        leaf: tuple.1,
                        proof: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyReturn> for UnderlyingRustTuple<'_> {
                fn from(value: verifyReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for verifyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for verifyCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                Proof,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = verifyReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "verify(bytes32,bytes32,(bytes32[]))";
            const SELECTOR: [u8; 4] = [113u8, 5u8, 19u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.root),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.leaf),
                    <Proof as alloy_sol_types::SolType>::tokenize(&self.proof),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `verifyMulti(bytes32,bytes32[],(bytes32[],bool[]))` and selector `0x02918107`.
```solidity
function verifyMulti(bytes32 root, bytes32[] memory leaves, MultiProof memory proof) external pure returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyMultiCall {
        #[allow(missing_docs)]
        pub root: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub leaves: alloy::sol_types::private::Vec<
            alloy::sol_types::private::FixedBytes<32>,
        >,
        #[allow(missing_docs)]
        pub proof: <MultiProof as alloy::sol_types::SolType>::RustType,
    }
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`verifyMulti(bytes32,bytes32[],(bytes32[],bool[]))`](verifyMultiCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct verifyMultiReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
                MultiProof,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::FixedBytes<32>,
                >,
                <MultiProof as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyMultiCall> for UnderlyingRustTuple<'_> {
                fn from(value: verifyMultiCall) -> Self {
                    (value.root, value.leaves, value.proof)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for verifyMultiCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        root: tuple.0,
                        leaves: tuple.1,
                        proof: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<verifyMultiReturn> for UnderlyingRustTuple<'_> {
                fn from(value: verifyMultiReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for verifyMultiReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for verifyMultiCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
                MultiProof,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = verifyMultiReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "verifyMulti(bytes32,bytes32[],(bytes32[],bool[]))";
            const SELECTOR: [u8; 4] = [2u8, 145u8, 129u8, 7u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.root),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                    > as alloy_sol_types::SolType>::tokenize(&self.leaves),
                    <MultiProof as alloy_sol_types::SolType>::tokenize(&self.proof),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`MerkleTree`](self) function calls.
    #[derive()]
    pub enum MerkleTreeCalls {
        #[allow(missing_docs)]
        hashLeaf(hashLeafCall),
        #[allow(missing_docs)]
        verify(verifyCall),
        #[allow(missing_docs)]
        verifyMulti(verifyMultiCall),
    }
    #[automatically_derived]
    impl MerkleTreeCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [2u8, 145u8, 129u8, 7u8],
            [113u8, 5u8, 19u8, 84u8],
            [250u8, 214u8, 228u8, 136u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MerkleTreeCalls {
        const NAME: &'static str = "MerkleTreeCalls";
        const MIN_DATA_LENGTH: usize = 96usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::hashLeaf(_) => <hashLeafCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::verify(_) => <verifyCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::verifyMulti(_) => {
                    <verifyMultiCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MerkleTreeCalls>] = &[
                {
                    fn verifyMulti(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MerkleTreeCalls> {
                        <verifyMultiCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MerkleTreeCalls::verifyMulti)
                    }
                    verifyMulti
                },
                {
                    fn verify(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MerkleTreeCalls> {
                        <verifyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MerkleTreeCalls::verify)
                    }
                    verify
                },
                {
                    fn hashLeaf(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MerkleTreeCalls> {
                        <hashLeafCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MerkleTreeCalls::hashLeaf)
                    }
                    hashLeaf
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::hashLeaf(inner) => {
                    <hashLeafCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::verify(inner) => {
                    <verifyCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::verifyMulti(inner) => {
                    <verifyMultiCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::hashLeaf(inner) => {
                    <hashLeafCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::verify(inner) => {
                    <verifyCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::verifyMulti(inner) => {
                    <verifyMultiCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`MerkleTree`](self) custom errors.
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum MerkleTreeErrors {
        #[allow(missing_docs)]
        MerkleProofInvalidMultiproof(MerkleProofInvalidMultiproof),
    }
    #[automatically_derived]
    impl MerkleTreeErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[53u8, 20u8, 4u8, 146u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MerkleTreeErrors {
        const NAME: &'static str = "MerkleTreeErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::MerkleProofInvalidMultiproof(_) => {
                    <MerkleProofInvalidMultiproof as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MerkleTreeErrors>] = &[
                {
                    fn MerkleProofInvalidMultiproof(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MerkleTreeErrors> {
                        <MerkleProofInvalidMultiproof as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MerkleTreeErrors::MerkleProofInvalidMultiproof)
                    }
                    MerkleProofInvalidMultiproof
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::MerkleProofInvalidMultiproof(inner) => {
                    <MerkleProofInvalidMultiproof as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::MerkleProofInvalidMultiproof(inner) => {
                    <MerkleProofInvalidMultiproof as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MerkleTree`](self) contract instance.

See the [wrapper's documentation](`MerkleTreeInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MerkleTreeInstance<T, P, N> {
        MerkleTreeInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MerkleTreeInstance<T, P, N>>,
    > {
        MerkleTreeInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        MerkleTreeInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`MerkleTree`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MerkleTree`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MerkleTreeInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for MerkleTreeInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MerkleTreeInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MerkleTreeInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`MerkleTree`](self) contract instance.

See the [wrapper's documentation](`MerkleTreeInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<MerkleTreeInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> MerkleTreeInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> MerkleTreeInstance<T, P, N> {
            MerkleTreeInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MerkleTreeInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`hashLeaf`] function.
        pub fn hashLeaf(
            &self,
            prefix: alloy::sol_types::private::Bytes,
            leaf: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, hashLeafCall, N> {
            self.call_builder(&hashLeafCall { prefix, leaf })
        }
        ///Creates a new call builder for the [`verify`] function.
        pub fn verify(
            &self,
            root: alloy::sol_types::private::FixedBytes<32>,
            leaf: alloy::sol_types::private::FixedBytes<32>,
            proof: <Proof as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, verifyCall, N> {
            self.call_builder(&verifyCall { root, leaf, proof })
        }
        ///Creates a new call builder for the [`verifyMulti`] function.
        pub fn verifyMulti(
            &self,
            root: alloy::sol_types::private::FixedBytes<32>,
            leaves: alloy::sol_types::private::Vec<
                alloy::sol_types::private::FixedBytes<32>,
            >,
            proof: <MultiProof as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, verifyMultiCall, N> {
            self.call_builder(
                &verifyMultiCall {
                    root,
                    leaves,
                    proof,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MerkleTreeInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
