/**

Generated by the following Solidity interface...
```solidity
interface Deadline {}
```

...which was generated by the following JSON ABI:
```json
[]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod Deadline {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x61023361004d600b8282823980515f1a6073146041577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061003f575f3560e01c80634bb4a6271461004357806385f3c36a1461006b575b5f5ffd5b81801561004e575f5ffd5b50610069600480360381019061006491906101e0565b610093565b005b818015610076575f5ffd5b50610091600480360381019061008c91906101e0565b61011e565b005b7fd3e77021f6e45491cee4ca3334ef9c72d7557b72b384eca2bf1a57974d46ffde5f1c73ffffffffffffffffffffffffffffffffffffffff16634bb4a627826040518263ffffffff1660e01b81526004016100ee919061021a565b5f604051808303815f87803b158015610105575f5ffd5b505af1158015610117573d5f5f3e3d5ffd5b5050505050565b7fd3e77021f6e45491cee4ca3334ef9c72d7557b72b384eca2bf1a57974d46ffde5f1c73ffffffffffffffffffffffffffffffffffffffff166385f3c36a826040518263ffffffff1660e01b8152600401610179919061021a565b5f604051808303815f87803b158015610190575f5ffd5b505af11580156101a2573d5f5f3e3d5ffd5b5050505050565b5f5ffd5b5f819050919050565b6101bf816101ad565b81146101c9575f5ffd5b50565b5f813590506101da816101b6565b92915050565b5f602082840312156101f5576101f46101a9565b5b5f610202848285016101cc565b91505092915050565b610214816101ad565b82525050565b5f60208201905061022d5f83018461020b565b9291505056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"a\x023a\0M`\x0B\x82\x82\x829\x80Q_\x1A`s\x14`AW\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R_`\x04R`$_\xFD[0_R`s\x81S\x82\x81\xF3\xFEs\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x000\x14`\x80`@R`\x046\x10a\0?W_5`\xE0\x1C\x80cK\xB4\xA6'\x14a\0CW\x80c\x85\xF3\xC3j\x14a\0kW[__\xFD[\x81\x80\x15a\0NW__\xFD[Pa\0i`\x04\x806\x03\x81\x01\x90a\0d\x91\x90a\x01\xE0V[a\0\x93V[\0[\x81\x80\x15a\0vW__\xFD[Pa\0\x91`\x04\x806\x03\x81\x01\x90a\0\x8C\x91\x90a\x01\xE0V[a\x01\x1EV[\0[\x7F\xD3\xE7p!\xF6\xE4T\x91\xCE\xE4\xCA34\xEF\x9Cr\xD7U{r\xB3\x84\xEC\xA2\xBF\x1AW\x97MF\xFF\xDE_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cK\xB4\xA6'\x82`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\0\xEE\x91\x90a\x02\x1AV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01\x05W__\xFD[PZ\xF1\x15\x80\x15a\x01\x17W=__>=_\xFD[PPPPPV[\x7F\xD3\xE7p!\xF6\xE4T\x91\xCE\xE4\xCA34\xEF\x9Cr\xD7U{r\xB3\x84\xEC\xA2\xBF\x1AW\x97MF\xFF\xDE_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x85\xF3\xC3j\x82`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x01y\x91\x90a\x02\x1AV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01\x90W__\xFD[PZ\xF1\x15\x80\x15a\x01\xA2W=__>=_\xFD[PPPPPV[__\xFD[_\x81\x90P\x91\x90PV[a\x01\xBF\x81a\x01\xADV[\x81\x14a\x01\xC9W__\xFD[PV[_\x815\x90Pa\x01\xDA\x81a\x01\xB6V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x01\xF5Wa\x01\xF4a\x01\xA9V[[_a\x02\x02\x84\x82\x85\x01a\x01\xCCV[\x91PP\x92\x91PPV[a\x02\x14\x81a\x01\xADV[\x82RPPV[_` \x82\x01\x90Pa\x02-_\x83\x01\x84a\x02\x0BV[\x92\x91PPV",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x730000000000000000000000000000000000000000301460806040526004361061003f575f3560e01c80634bb4a6271461004357806385f3c36a1461006b575b5f5ffd5b81801561004e575f5ffd5b50610069600480360381019061006491906101e0565b610093565b005b818015610076575f5ffd5b50610091600480360381019061008c91906101e0565b61011e565b005b7fd3e77021f6e45491cee4ca3334ef9c72d7557b72b384eca2bf1a57974d46ffde5f1c73ffffffffffffffffffffffffffffffffffffffff16634bb4a627826040518263ffffffff1660e01b81526004016100ee919061021a565b5f604051808303815f87803b158015610105575f5ffd5b505af1158015610117573d5f5f3e3d5ffd5b5050505050565b7fd3e77021f6e45491cee4ca3334ef9c72d7557b72b384eca2bf1a57974d46ffde5f1c73ffffffffffffffffffffffffffffffffffffffff166385f3c36a826040518263ffffffff1660e01b8152600401610179919061021a565b5f604051808303815f87803b158015610190575f5ffd5b505af11580156101a2573d5f5f3e3d5ffd5b5050505050565b5f5ffd5b5f819050919050565b6101bf816101ad565b81146101c9575f5ffd5b50565b5f813590506101da816101b6565b92915050565b5f602082840312156101f5576101f46101a9565b5b5f610202848285016101cc565b91505092915050565b610214816101ad565b82525050565b5f60208201905061022d5f83018461020b565b9291505056
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"s\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x000\x14`\x80`@R`\x046\x10a\0?W_5`\xE0\x1C\x80cK\xB4\xA6'\x14a\0CW\x80c\x85\xF3\xC3j\x14a\0kW[__\xFD[\x81\x80\x15a\0NW__\xFD[Pa\0i`\x04\x806\x03\x81\x01\x90a\0d\x91\x90a\x01\xE0V[a\0\x93V[\0[\x81\x80\x15a\0vW__\xFD[Pa\0\x91`\x04\x806\x03\x81\x01\x90a\0\x8C\x91\x90a\x01\xE0V[a\x01\x1EV[\0[\x7F\xD3\xE7p!\xF6\xE4T\x91\xCE\xE4\xCA34\xEF\x9Cr\xD7U{r\xB3\x84\xEC\xA2\xBF\x1AW\x97MF\xFF\xDE_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cK\xB4\xA6'\x82`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\0\xEE\x91\x90a\x02\x1AV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01\x05W__\xFD[PZ\xF1\x15\x80\x15a\x01\x17W=__>=_\xFD[PPPPPV[\x7F\xD3\xE7p!\xF6\xE4T\x91\xCE\xE4\xCA34\xEF\x9Cr\xD7U{r\xB3\x84\xEC\xA2\xBF\x1AW\x97MF\xFF\xDE_\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x85\xF3\xC3j\x82`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x01y\x91\x90a\x02\x1AV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01\x90W__\xFD[PZ\xF1\x15\x80\x15a\x01\xA2W=__>=_\xFD[PPPPPV[__\xFD[_\x81\x90P\x91\x90PV[a\x01\xBF\x81a\x01\xADV[\x81\x14a\x01\xC9W__\xFD[PV[_\x815\x90Pa\x01\xDA\x81a\x01\xB6V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x01\xF5Wa\x01\xF4a\x01\xA9V[[_a\x02\x02\x84\x82\x85\x01a\x01\xCCV[\x91PP\x92\x91PPV[a\x02\x14\x81a\x01\xADV[\x82RPPV[_` \x82\x01\x90Pa\x02-_\x83\x01\x84a\x02\x0BV[\x92\x91PPV",
    );
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Deadline`](self) contract instance.

See the [wrapper's documentation](`DeadlineInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> DeadlineInstance<T, P, N> {
        DeadlineInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<DeadlineInstance<T, P, N>>,
    > {
        DeadlineInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        DeadlineInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`Deadline`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Deadline`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct DeadlineInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for DeadlineInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("DeadlineInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DeadlineInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`Deadline`](self) contract instance.

See the [wrapper's documentation](`DeadlineInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<DeadlineInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> DeadlineInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> DeadlineInstance<T, P, N> {
            DeadlineInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DeadlineInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DeadlineInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
