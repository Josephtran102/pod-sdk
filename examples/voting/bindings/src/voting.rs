/**

Generated by the following Solidity interface...
```solidity
interface Voting {
    event PollCreated(bytes32 indexed pollId, uint256 deadline);
    event Voted(bytes32 indexed pollId, address indexed voter, uint256 indexed choice);
    event Winner(bytes32 indexed pollId, uint256 indexed choice);

    function createPoll(uint256 deadline, uint256 maxChoice, address[] memory voters) external;
    function getPollId(uint256 deadline, uint256 maxChoice, address owner, address[] memory voters) external pure returns (bytes32);
    function setWinningChoice(bytes32 pollId, uint256 choice) external;
    function vote(bytes32 pollId, uint256 choice) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "createPoll",
    "inputs": [
      {
        "name": "deadline",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "maxChoice",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "voters",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getPollId",
    "inputs": [
      {
        "name": "deadline",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "maxChoice",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "voters",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "setWinningChoice",
    "inputs": [
      {
        "name": "pollId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "choice",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "vote",
    "inputs": [
      {
        "name": "pollId",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "choice",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "PollCreated",
    "inputs": [
      {
        "name": "pollId",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "deadline",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Voted",
    "inputs": [
      {
        "name": "pollId",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "voter",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "choice",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Winner",
    "inputs": [
      {
        "name": "pollId",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      },
      {
        "name": "choice",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod Voting {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600f57600080fd5b506114b28061001f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063098cf966146100515780635fe5c1ec1461006d5780639ef1204c1461009d578063a4ed285a146100b9575b600080fd5b61006b60048036038101906100669190610a25565b6100d5565b005b61008760048036038101906100829190610b28565b610376565b6040516100949190610bbf565b60405180910390f35b6100b760048036038101906100b29190610a25565b6103d8565b005b6100d360048036038101906100ce9190610bda565b610615565b005b6000806000848152602001908152602001600020905061012e81600001546040518060400160405280602081526020017f506f6c6c20646561646c696e6520686173206e6f742070617373656420796574815250610899565b6000816005015411610175576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016c90610cab565b60405180910390fd5b600082118015610189575080600101548211155b6101c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101bf90610d3d565b60405180910390fd5b600081600701541461020f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020690610da9565b60405180910390fd5b60008160040160008481526020019081526020016000205490506000811161026c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026390610e3b565b60405180910390fd5b6000826005015483600601546102829190610e8a565b9050600080600190505b846001015481116102e957858103156102d657818560040160008381526020019081526020016000205411156102d5578460040160008281526020019081526020016000205491505b5b80806102e190610ebe565b91505061028c565b508181846102f79190610e8a565b11610337576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032e90610f78565b60405180910390fd5b84846007018190555084867f269d3a24712436f77df15d63de7d2337a060c9102dee6f46c909fb0fa2d52f0c60405160405180910390a3505050505050565b6000858585858560405160200161038e929190611055565b604051602081830303815290604052805190602001206040516020016103b7949392919061108c565b60405160208183030381529060405280519060200120905095945050505050565b6000806000848152602001908152602001600020905061041481600001546040518060600160405280602f8152602001611483602f91396108a9565b600082118015610428575080600101548211155b610467576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045e90610d3d565b60405180910390fd5b6001600281111561047b5761047a6110d1565b5b8160030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660028111156104dc576104db6110d1565b5b1461051c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105139061114c565b60405180910390fd5b60028160030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690836002811115610581576105806110d1565b5b021790555080600401600083815260200190815260200160002060008154809291906105ac90610ebe565b91905055508060050160008154809291906105c690610ebe565b9190505550813373ffffffffffffffffffffffffffffffffffffffff16847fe4abc5380fa6939d1dc23b5e90b3a8a0e328f0f1a82a5f42bfb795bf9c71750560405160405180910390a4505050565b610654846040518060400160405280601e81526020017f446561646c696e65206d75737420626520696e207468652066757475726500008152506108a9565b60008311610697576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068e906111de565b60405180910390fd5b600082829050116106dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d49061124a565b60405180910390fd5b60006106ec8585338686610376565b905060008060008381526020019081526020016000209050600081600601541461074b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610742906112b6565b60405180910390fd5b858160000181905550848160010181905550338160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083839050816006018190555060005b848490508110156108585760018260030160008787858181106107d5576107d46112d6565b5b90506020020160208101906107ea9190611305565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690836002811115610846576108456110d1565b5b021790555080806001019150506107af565b50817ff859041d4addf085c6226b2e8735a155ae2a4c0213a96a2cfcb97d4fe4d38171876040516108899190611332565b60405180910390a2505050505050565b6108a5824211826108b9565b5050565b6108b5824210826108b9565b5050565b60007f3dcdf63b41c103567d7225976ad9145e866c7a7dccc6c277ea86abbd268fbac960001c73ffffffffffffffffffffffffffffffffffffffff16836040516020016109069190611368565b60405160208183030381529060405260405161092291906113f4565b600060405180830381855afa9150503d806000811461095d576040519150601f19603f3d011682016040523d82523d6000602084013e610962565b606091505b505090508082906109a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a09190611460565b60405180910390fd5b50505050565b600080fd5b600080fd5b6000819050919050565b6109cc816109b9565b81146109d757600080fd5b50565b6000813590506109e9816109c3565b92915050565b6000819050919050565b610a02816109ef565b8114610a0d57600080fd5b50565b600081359050610a1f816109f9565b92915050565b60008060408385031215610a3c57610a3b6109af565b5b6000610a4a858286016109da565b9250506020610a5b85828601610a10565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a9082610a65565b9050919050565b610aa081610a85565b8114610aab57600080fd5b50565b600081359050610abd81610a97565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610ae857610ae7610ac3565b5b8235905067ffffffffffffffff811115610b0557610b04610ac8565b5b602083019150836020820283011115610b2157610b20610acd565b5b9250929050565b600080600080600060808688031215610b4457610b436109af565b5b6000610b5288828901610a10565b9550506020610b6388828901610a10565b9450506040610b7488828901610aae565b935050606086013567ffffffffffffffff811115610b9557610b946109b4565b5b610ba188828901610ad2565b92509250509295509295909350565b610bb9816109b9565b82525050565b6000602082019050610bd46000830184610bb0565b92915050565b60008060008060608587031215610bf457610bf36109af565b5b6000610c0287828801610a10565b9450506020610c1387828801610a10565b935050604085013567ffffffffffffffff811115610c3457610c336109b4565b5b610c4087828801610ad2565b925092505092959194509250565b600082825260208201905092915050565b7f4e6f20766f7465732068617665206265656e2063617374000000000000000000600082015250565b6000610c95601783610c4e565b9150610ca082610c5f565b602082019050919050565b60006020820190508181036000830152610cc481610c88565b9050919050565b7f43686f696365206d757374206265206265747765656e203120616e64206d617860008201527f43686f6963650000000000000000000000000000000000000000000000000000602082015250565b6000610d27602683610c4e565b9150610d3282610ccb565b604082019050919050565b60006020820190508181036000830152610d5681610d1a565b9050919050565b7f57696e6e65722068617320616c7265616479206265656e207365740000000000600082015250565b6000610d93601b83610c4e565b9150610d9e82610d5d565b602082019050919050565b60006020820190508181036000830152610dc281610d86565b9050919050565b7f546869732063686f69636520686173207265636569766564206e6f20766f746560008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000610e25602183610c4e565b9150610e3082610dc9565b604082019050919050565b60006020820190508181036000830152610e5481610e18565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e95826109ef565b9150610ea0836109ef565b9250828203905081811115610eb857610eb7610e5b565b5b92915050565b6000610ec9826109ef565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610efb57610efa610e5b565b5b600182019050919050565b7f546869732063686f69636520636f756c64207374696c6c206265206f7665727460008201527f616b656e2069662072656d61696e696e6720766f7465727320766f7465000000602082015250565b6000610f62603d83610c4e565b9150610f6d82610f06565b604082019050919050565b60006020820190508181036000830152610f9181610f55565b9050919050565b600081905092915050565b6000819050919050565b610fb681610a85565b82525050565b6000610fc88383610fad565b60208301905092915050565b6000610fe36020840184610aae565b905092915050565b6000602082019050919050565b60006110048385610f98565b935061100f82610fa3565b8060005b85811015611048576110258284610fd4565b61102f8882610fbc565b975061103a83610feb565b925050600181019050611013565b5085925050509392505050565b6000611062828486610ff8565b91508190509392505050565b611077816109ef565b82525050565b61108681610a85565b82525050565b60006080820190506110a1600083018761106e565b6110ae602083018661106e565b6110bb604083018561107d565b6110c86060830184610bb0565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f73656e6465722063616e277420766f7465000000000000000000000000000000600082015250565b6000611136601183610c4e565b915061114182611100565b602082019050919050565b6000602082019050818103600083015261116581611129565b9050919050565b7f4d617843686f696365206d7573742062652067726561746572207468616e207a60008201527f65726f0000000000000000000000000000000000000000000000000000000000602082015250565b60006111c8602383610c4e565b91506111d38261116c565b604082019050919050565b600060208201905081810360008301526111f7816111bb565b9050919050565b7f5468657265206d757374206265206174206c65617374206f6e6520766f746572600082015250565b6000611234602083610c4e565b915061123f826111fe565b602082019050919050565b6000602082019050818103600083015261126381611227565b9050919050565b7f706f6c6c20616c72656164792065786973747300000000000000000000000000600082015250565b60006112a0601383610c4e565b91506112ab8261126a565b602082019050919050565b600060208201905081810360008301526112cf81611293565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561131b5761131a6109af565b5b600061132984828501610aae565b91505092915050565b6000602082019050611347600083018461106e565b92915050565b60008115159050919050565b6113628161134d565b82525050565b600060208201905061137d6000830184611359565b92915050565b600081519050919050565b600081905092915050565b60005b838110156113b757808201518184015260208101905061139c565b60008484015250505050565b60006113ce82611383565b6113d8818561138e565b93506113e8818560208601611399565b80840191505092915050565b600061140082846113c3565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b60006114328261140b565b61143c8185610c4e565b935061144c818560208601611399565b61145581611416565b840191505092915050565b6000602082019050818103600083015261147a8184611427565b90509291505056fe506f6c6c20646561646c696e652068617320706173736564206f7220706f6c6c20646f6573206e6f74206578697374
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0FW`\0\x80\xFD[Pa\x14\xB2\x80a\0\x1F`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0LW`\x005`\xE0\x1C\x80c\t\x8C\xF9f\x14a\0QW\x80c_\xE5\xC1\xEC\x14a\0mW\x80c\x9E\xF1 L\x14a\0\x9DW\x80c\xA4\xED(Z\x14a\0\xB9W[`\0\x80\xFD[a\0k`\x04\x806\x03\x81\x01\x90a\0f\x91\x90a\n%V[a\0\xD5V[\0[a\0\x87`\x04\x806\x03\x81\x01\x90a\0\x82\x91\x90a\x0B(V[a\x03vV[`@Qa\0\x94\x91\x90a\x0B\xBFV[`@Q\x80\x91\x03\x90\xF3[a\0\xB7`\x04\x806\x03\x81\x01\x90a\0\xB2\x91\x90a\n%V[a\x03\xD8V[\0[a\0\xD3`\x04\x806\x03\x81\x01\x90a\0\xCE\x91\x90a\x0B\xDAV[a\x06\x15V[\0[`\0\x80`\0\x84\x81R` \x01\x90\x81R` \x01`\0 \x90Pa\x01.\x81`\0\x01T`@Q\x80`@\x01`@R\x80` \x81R` \x01\x7FPoll deadline has not passed yet\x81RPa\x08\x99V[`\0\x81`\x05\x01T\x11a\x01uW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x01l\x90a\x0C\xABV[`@Q\x80\x91\x03\x90\xFD[`\0\x82\x11\x80\x15a\x01\x89WP\x80`\x01\x01T\x82\x11\x15[a\x01\xC8W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x01\xBF\x90a\r=V[`@Q\x80\x91\x03\x90\xFD[`\0\x81`\x07\x01T\x14a\x02\x0FW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x02\x06\x90a\r\xA9V[`@Q\x80\x91\x03\x90\xFD[`\0\x81`\x04\x01`\0\x84\x81R` \x01\x90\x81R` \x01`\0 T\x90P`\0\x81\x11a\x02lW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x02c\x90a\x0E;V[`@Q\x80\x91\x03\x90\xFD[`\0\x82`\x05\x01T\x83`\x06\x01Ta\x02\x82\x91\x90a\x0E\x8AV[\x90P`\0\x80`\x01\x90P[\x84`\x01\x01T\x81\x11a\x02\xE9W\x85\x81\x03\x15a\x02\xD6W\x81\x85`\x04\x01`\0\x83\x81R` \x01\x90\x81R` \x01`\0 T\x11\x15a\x02\xD5W\x84`\x04\x01`\0\x82\x81R` \x01\x90\x81R` \x01`\0 T\x91P[[\x80\x80a\x02\xE1\x90a\x0E\xBEV[\x91PPa\x02\x8CV[P\x81\x81\x84a\x02\xF7\x91\x90a\x0E\x8AV[\x11a\x037W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x03.\x90a\x0FxV[`@Q\x80\x91\x03\x90\xFD[\x84\x84`\x07\x01\x81\x90UP\x84\x86\x7F&\x9D:$q$6\xF7}\xF1]c\xDE}#7\xA0`\xC9\x10-\xEEoF\xC9\t\xFB\x0F\xA2\xD5/\x0C`@Q`@Q\x80\x91\x03\x90\xA3PPPPPPV[`\0\x85\x85\x85\x85\x85`@Q` \x01a\x03\x8E\x92\x91\x90a\x10UV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `@Q` \x01a\x03\xB7\x94\x93\x92\x91\x90a\x10\x8CV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x95\x94PPPPPV[`\0\x80`\0\x84\x81R` \x01\x90\x81R` \x01`\0 \x90Pa\x04\x14\x81`\0\x01T`@Q\x80``\x01`@R\x80`/\x81R` \x01a\x14\x83`/\x919a\x08\xA9V[`\0\x82\x11\x80\x15a\x04(WP\x80`\x01\x01T\x82\x11\x15[a\x04gW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x04^\x90a\r=V[`@Q\x80\x91\x03\x90\xFD[`\x01`\x02\x81\x11\x15a\x04{Wa\x04za\x10\xD1V[[\x81`\x03\x01`\x003s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x02\x81\x11\x15a\x04\xDCWa\x04\xDBa\x10\xD1V[[\x14a\x05\x1CW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x05\x13\x90a\x11LV[`@Q\x80\x91\x03\x90\xFD[`\x02\x81`\x03\x01`\x003s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x02\x81\x11\x15a\x05\x81Wa\x05\x80a\x10\xD1V[[\x02\x17\x90UP\x80`\x04\x01`\0\x83\x81R` \x01\x90\x81R` \x01`\0 `\0\x81T\x80\x92\x91\x90a\x05\xAC\x90a\x0E\xBEV[\x91\x90PUP\x80`\x05\x01`\0\x81T\x80\x92\x91\x90a\x05\xC6\x90a\x0E\xBEV[\x91\x90PUP\x813s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84\x7F\xE4\xAB\xC58\x0F\xA6\x93\x9D\x1D\xC2;^\x90\xB3\xA8\xA0\xE3(\xF0\xF1\xA8*_B\xBF\xB7\x95\xBF\x9Cqu\x05`@Q`@Q\x80\x91\x03\x90\xA4PPPV[a\x06T\x84`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7FDeadline must be in the future\0\0\x81RPa\x08\xA9V[`\0\x83\x11a\x06\x97W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x06\x8E\x90a\x11\xDEV[`@Q\x80\x91\x03\x90\xFD[`\0\x82\x82\x90P\x11a\x06\xDDW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x06\xD4\x90a\x12JV[`@Q\x80\x91\x03\x90\xFD[`\0a\x06\xEC\x85\x853\x86\x86a\x03vV[\x90P`\0\x80`\0\x83\x81R` \x01\x90\x81R` \x01`\0 \x90P`\0\x81`\x06\x01T\x14a\x07KW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x07B\x90a\x12\xB6V[`@Q\x80\x91\x03\x90\xFD[\x85\x81`\0\x01\x81\x90UP\x84\x81`\x01\x01\x81\x90UP3\x81`\x02\x01`\0a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x83\x83\x90P\x81`\x06\x01\x81\x90UP`\0[\x84\x84\x90P\x81\x10\x15a\x08XW`\x01\x82`\x03\x01`\0\x87\x87\x85\x81\x81\x10a\x07\xD5Wa\x07\xD4a\x12\xD6V[[\x90P` \x02\x01` \x81\x01\x90a\x07\xEA\x91\x90a\x13\x05V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x02\x81\x11\x15a\x08FWa\x08Ea\x10\xD1V[[\x02\x17\x90UP\x80\x80`\x01\x01\x91PPa\x07\xAFV[P\x81\x7F\xF8Y\x04\x1DJ\xDD\xF0\x85\xC6\"k.\x875\xA1U\xAE*L\x02\x13\xA9j,\xFC\xB9}O\xE4\xD3\x81q\x87`@Qa\x08\x89\x91\x90a\x132V[`@Q\x80\x91\x03\x90\xA2PPPPPPV[a\x08\xA5\x82B\x11\x82a\x08\xB9V[PPV[a\x08\xB5\x82B\x10\x82a\x08\xB9V[PPV[`\0\x7F=\xCD\xF6;A\xC1\x03V}r%\x97j\xD9\x14^\x86lz}\xCC\xC6\xC2w\xEA\x86\xAB\xBD&\x8F\xBA\xC9`\0\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83`@Q` \x01a\t\x06\x91\x90a\x13hV[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Qa\t\"\x91\x90a\x13\xF4V[`\0`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80`\0\x81\x14a\t]W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\tbV[``\x91P[PP\x90P\x80\x82\x90a\t\xA9W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\t\xA0\x91\x90a\x14`V[`@Q\x80\x91\x03\x90\xFD[PPPPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x81\x90P\x91\x90PV[a\t\xCC\x81a\t\xB9V[\x81\x14a\t\xD7W`\0\x80\xFD[PV[`\0\x815\x90Pa\t\xE9\x81a\t\xC3V[\x92\x91PPV[`\0\x81\x90P\x91\x90PV[a\n\x02\x81a\t\xEFV[\x81\x14a\n\rW`\0\x80\xFD[PV[`\0\x815\x90Pa\n\x1F\x81a\t\xF9V[\x92\x91PPV[`\0\x80`@\x83\x85\x03\x12\x15a\n<Wa\n;a\t\xAFV[[`\0a\nJ\x85\x82\x86\x01a\t\xDAV[\x92PP` a\n[\x85\x82\x86\x01a\n\x10V[\x91PP\x92P\x92\x90PV[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[`\0a\n\x90\x82a\neV[\x90P\x91\x90PV[a\n\xA0\x81a\n\x85V[\x81\x14a\n\xABW`\0\x80\xFD[PV[`\0\x815\x90Pa\n\xBD\x81a\n\x97V[\x92\x91PPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\x83`\x1F\x84\x01\x12a\n\xE8Wa\n\xE7a\n\xC3V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B\x05Wa\x0B\x04a\n\xC8V[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15a\x0B!Wa\x0B a\n\xCDV[[\x92P\x92\x90PV[`\0\x80`\0\x80`\0`\x80\x86\x88\x03\x12\x15a\x0BDWa\x0BCa\t\xAFV[[`\0a\x0BR\x88\x82\x89\x01a\n\x10V[\x95PP` a\x0Bc\x88\x82\x89\x01a\n\x10V[\x94PP`@a\x0Bt\x88\x82\x89\x01a\n\xAEV[\x93PP``\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B\x95Wa\x0B\x94a\t\xB4V[[a\x0B\xA1\x88\x82\x89\x01a\n\xD2V[\x92P\x92PP\x92\x95P\x92\x95\x90\x93PV[a\x0B\xB9\x81a\t\xB9V[\x82RPPV[`\0` \x82\x01\x90Pa\x0B\xD4`\0\x83\x01\x84a\x0B\xB0V[\x92\x91PPV[`\0\x80`\0\x80``\x85\x87\x03\x12\x15a\x0B\xF4Wa\x0B\xF3a\t\xAFV[[`\0a\x0C\x02\x87\x82\x88\x01a\n\x10V[\x94PP` a\x0C\x13\x87\x82\x88\x01a\n\x10V[\x93PP`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0C4Wa\x0C3a\t\xB4V[[a\x0C@\x87\x82\x88\x01a\n\xD2V[\x92P\x92PP\x92\x95\x91\x94P\x92PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FNo votes have been cast\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x0C\x95`\x17\x83a\x0CNV[\x91Pa\x0C\xA0\x82a\x0C_V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0C\xC4\x81a\x0C\x88V[\x90P\x91\x90PV[\x7FChoice must be between 1 and max`\0\x82\x01R\x7FChoice\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[`\0a\r'`&\x83a\x0CNV[\x91Pa\r2\x82a\x0C\xCBV[`@\x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\rV\x81a\r\x1AV[\x90P\x91\x90PV[\x7FWinner has already been set\0\0\0\0\0`\0\x82\x01RPV[`\0a\r\x93`\x1B\x83a\x0CNV[\x91Pa\r\x9E\x82a\r]V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\r\xC2\x81a\r\x86V[\x90P\x91\x90PV[\x7FThis choice has received no vote`\0\x82\x01R\x7Fs\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[`\0a\x0E%`!\x83a\x0CNV[\x91Pa\x0E0\x82a\r\xC9V[`@\x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0ET\x81a\x0E\x18V[\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[`\0a\x0E\x95\x82a\t\xEFV[\x91Pa\x0E\xA0\x83a\t\xEFV[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a\x0E\xB8Wa\x0E\xB7a\x0E[V[[\x92\x91PPV[`\0a\x0E\xC9\x82a\t\xEFV[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03a\x0E\xFBWa\x0E\xFAa\x0E[V[[`\x01\x82\x01\x90P\x91\x90PV[\x7FThis choice could still be overt`\0\x82\x01R\x7Faken if remaining voters vote\0\0\0` \x82\x01RPV[`\0a\x0Fb`=\x83a\x0CNV[\x91Pa\x0Fm\x82a\x0F\x06V[`@\x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0F\x91\x81a\x0FUV[\x90P\x91\x90PV[`\0\x81\x90P\x92\x91PPV[`\0\x81\x90P\x91\x90PV[a\x0F\xB6\x81a\n\x85V[\x82RPPV[`\0a\x0F\xC8\x83\x83a\x0F\xADV[` \x83\x01\x90P\x92\x91PPV[`\0a\x0F\xE3` \x84\x01\x84a\n\xAEV[\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x10\x04\x83\x85a\x0F\x98V[\x93Pa\x10\x0F\x82a\x0F\xA3V[\x80`\0[\x85\x81\x10\x15a\x10HWa\x10%\x82\x84a\x0F\xD4V[a\x10/\x88\x82a\x0F\xBCV[\x97Pa\x10:\x83a\x0F\xEBV[\x92PP`\x01\x81\x01\x90Pa\x10\x13V[P\x85\x92PPP\x93\x92PPPV[`\0a\x10b\x82\x84\x86a\x0F\xF8V[\x91P\x81\x90P\x93\x92PPPV[a\x10w\x81a\t\xEFV[\x82RPPV[a\x10\x86\x81a\n\x85V[\x82RPPV[`\0`\x80\x82\x01\x90Pa\x10\xA1`\0\x83\x01\x87a\x10nV[a\x10\xAE` \x83\x01\x86a\x10nV[a\x10\xBB`@\x83\x01\x85a\x10}V[a\x10\xC8``\x83\x01\x84a\x0B\xB0V[\x95\x94PPPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`!`\x04R`$`\0\xFD[\x7Fsender can't vote\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x116`\x11\x83a\x0CNV[\x91Pa\x11A\x82a\x11\0V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x11e\x81a\x11)V[\x90P\x91\x90PV[\x7FMaxChoice must be greater than z`\0\x82\x01R\x7Fero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[`\0a\x11\xC8`#\x83a\x0CNV[\x91Pa\x11\xD3\x82a\x11lV[`@\x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x11\xF7\x81a\x11\xBBV[\x90P\x91\x90PV[\x7FThere must be at least one voter`\0\x82\x01RPV[`\0a\x124` \x83a\x0CNV[\x91Pa\x12?\x82a\x11\xFEV[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x12c\x81a\x12'V[\x90P\x91\x90PV[\x7Fpoll already exists\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x12\xA0`\x13\x83a\x0CNV[\x91Pa\x12\xAB\x82a\x12jV[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x12\xCF\x81a\x12\x93V[\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[`\0` \x82\x84\x03\x12\x15a\x13\x1BWa\x13\x1Aa\t\xAFV[[`\0a\x13)\x84\x82\x85\x01a\n\xAEV[\x91PP\x92\x91PPV[`\0` \x82\x01\x90Pa\x13G`\0\x83\x01\x84a\x10nV[\x92\x91PPV[`\0\x81\x15\x15\x90P\x91\x90PV[a\x13b\x81a\x13MV[\x82RPPV[`\0` \x82\x01\x90Pa\x13}`\0\x83\x01\x84a\x13YV[\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0\x81\x90P\x92\x91PPV[`\0[\x83\x81\x10\x15a\x13\xB7W\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x13\x9CV[`\0\x84\x84\x01RPPPPV[`\0a\x13\xCE\x82a\x13\x83V[a\x13\xD8\x81\x85a\x13\x8EV[\x93Pa\x13\xE8\x81\x85` \x86\x01a\x13\x99V[\x80\x84\x01\x91PP\x92\x91PPV[`\0a\x14\0\x82\x84a\x13\xC3V[\x91P\x81\x90P\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[`\0a\x142\x82a\x14\x0BV[a\x14<\x81\x85a\x0CNV[\x93Pa\x14L\x81\x85` \x86\x01a\x13\x99V[a\x14U\x81a\x14\x16V[\x84\x01\x91PP\x92\x91PPV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x14z\x81\x84a\x14'V[\x90P\x92\x91PPV\xFEPoll deadline has passed or poll does not exist",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063098cf966146100515780635fe5c1ec1461006d5780639ef1204c1461009d578063a4ed285a146100b9575b600080fd5b61006b60048036038101906100669190610a25565b6100d5565b005b61008760048036038101906100829190610b28565b610376565b6040516100949190610bbf565b60405180910390f35b6100b760048036038101906100b29190610a25565b6103d8565b005b6100d360048036038101906100ce9190610bda565b610615565b005b6000806000848152602001908152602001600020905061012e81600001546040518060400160405280602081526020017f506f6c6c20646561646c696e6520686173206e6f742070617373656420796574815250610899565b6000816005015411610175576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016c90610cab565b60405180910390fd5b600082118015610189575080600101548211155b6101c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101bf90610d3d565b60405180910390fd5b600081600701541461020f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020690610da9565b60405180910390fd5b60008160040160008481526020019081526020016000205490506000811161026c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026390610e3b565b60405180910390fd5b6000826005015483600601546102829190610e8a565b9050600080600190505b846001015481116102e957858103156102d657818560040160008381526020019081526020016000205411156102d5578460040160008281526020019081526020016000205491505b5b80806102e190610ebe565b91505061028c565b508181846102f79190610e8a565b11610337576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032e90610f78565b60405180910390fd5b84846007018190555084867f269d3a24712436f77df15d63de7d2337a060c9102dee6f46c909fb0fa2d52f0c60405160405180910390a3505050505050565b6000858585858560405160200161038e929190611055565b604051602081830303815290604052805190602001206040516020016103b7949392919061108c565b60405160208183030381529060405280519060200120905095945050505050565b6000806000848152602001908152602001600020905061041481600001546040518060600160405280602f8152602001611483602f91396108a9565b600082118015610428575080600101548211155b610467576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045e90610d3d565b60405180910390fd5b6001600281111561047b5761047a6110d1565b5b8160030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660028111156104dc576104db6110d1565b5b1461051c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105139061114c565b60405180910390fd5b60028160030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690836002811115610581576105806110d1565b5b021790555080600401600083815260200190815260200160002060008154809291906105ac90610ebe565b91905055508060050160008154809291906105c690610ebe565b9190505550813373ffffffffffffffffffffffffffffffffffffffff16847fe4abc5380fa6939d1dc23b5e90b3a8a0e328f0f1a82a5f42bfb795bf9c71750560405160405180910390a4505050565b610654846040518060400160405280601e81526020017f446561646c696e65206d75737420626520696e207468652066757475726500008152506108a9565b60008311610697576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068e906111de565b60405180910390fd5b600082829050116106dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d49061124a565b60405180910390fd5b60006106ec8585338686610376565b905060008060008381526020019081526020016000209050600081600601541461074b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610742906112b6565b60405180910390fd5b858160000181905550848160010181905550338160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083839050816006018190555060005b848490508110156108585760018260030160008787858181106107d5576107d46112d6565b5b90506020020160208101906107ea9190611305565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690836002811115610846576108456110d1565b5b021790555080806001019150506107af565b50817ff859041d4addf085c6226b2e8735a155ae2a4c0213a96a2cfcb97d4fe4d38171876040516108899190611332565b60405180910390a2505050505050565b6108a5824211826108b9565b5050565b6108b5824210826108b9565b5050565b60007f3dcdf63b41c103567d7225976ad9145e866c7a7dccc6c277ea86abbd268fbac960001c73ffffffffffffffffffffffffffffffffffffffff16836040516020016109069190611368565b60405160208183030381529060405260405161092291906113f4565b600060405180830381855afa9150503d806000811461095d576040519150601f19603f3d011682016040523d82523d6000602084013e610962565b606091505b505090508082906109a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a09190611460565b60405180910390fd5b50505050565b600080fd5b600080fd5b6000819050919050565b6109cc816109b9565b81146109d757600080fd5b50565b6000813590506109e9816109c3565b92915050565b6000819050919050565b610a02816109ef565b8114610a0d57600080fd5b50565b600081359050610a1f816109f9565b92915050565b60008060408385031215610a3c57610a3b6109af565b5b6000610a4a858286016109da565b9250506020610a5b85828601610a10565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a9082610a65565b9050919050565b610aa081610a85565b8114610aab57600080fd5b50565b600081359050610abd81610a97565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610ae857610ae7610ac3565b5b8235905067ffffffffffffffff811115610b0557610b04610ac8565b5b602083019150836020820283011115610b2157610b20610acd565b5b9250929050565b600080600080600060808688031215610b4457610b436109af565b5b6000610b5288828901610a10565b9550506020610b6388828901610a10565b9450506040610b7488828901610aae565b935050606086013567ffffffffffffffff811115610b9557610b946109b4565b5b610ba188828901610ad2565b92509250509295509295909350565b610bb9816109b9565b82525050565b6000602082019050610bd46000830184610bb0565b92915050565b60008060008060608587031215610bf457610bf36109af565b5b6000610c0287828801610a10565b9450506020610c1387828801610a10565b935050604085013567ffffffffffffffff811115610c3457610c336109b4565b5b610c4087828801610ad2565b925092505092959194509250565b600082825260208201905092915050565b7f4e6f20766f7465732068617665206265656e2063617374000000000000000000600082015250565b6000610c95601783610c4e565b9150610ca082610c5f565b602082019050919050565b60006020820190508181036000830152610cc481610c88565b9050919050565b7f43686f696365206d757374206265206265747765656e203120616e64206d617860008201527f43686f6963650000000000000000000000000000000000000000000000000000602082015250565b6000610d27602683610c4e565b9150610d3282610ccb565b604082019050919050565b60006020820190508181036000830152610d5681610d1a565b9050919050565b7f57696e6e65722068617320616c7265616479206265656e207365740000000000600082015250565b6000610d93601b83610c4e565b9150610d9e82610d5d565b602082019050919050565b60006020820190508181036000830152610dc281610d86565b9050919050565b7f546869732063686f69636520686173207265636569766564206e6f20766f746560008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000610e25602183610c4e565b9150610e3082610dc9565b604082019050919050565b60006020820190508181036000830152610e5481610e18565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e95826109ef565b9150610ea0836109ef565b9250828203905081811115610eb857610eb7610e5b565b5b92915050565b6000610ec9826109ef565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610efb57610efa610e5b565b5b600182019050919050565b7f546869732063686f69636520636f756c64207374696c6c206265206f7665727460008201527f616b656e2069662072656d61696e696e6720766f7465727320766f7465000000602082015250565b6000610f62603d83610c4e565b9150610f6d82610f06565b604082019050919050565b60006020820190508181036000830152610f9181610f55565b9050919050565b600081905092915050565b6000819050919050565b610fb681610a85565b82525050565b6000610fc88383610fad565b60208301905092915050565b6000610fe36020840184610aae565b905092915050565b6000602082019050919050565b60006110048385610f98565b935061100f82610fa3565b8060005b85811015611048576110258284610fd4565b61102f8882610fbc565b975061103a83610feb565b925050600181019050611013565b5085925050509392505050565b6000611062828486610ff8565b91508190509392505050565b611077816109ef565b82525050565b61108681610a85565b82525050565b60006080820190506110a1600083018761106e565b6110ae602083018661106e565b6110bb604083018561107d565b6110c86060830184610bb0565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f73656e6465722063616e277420766f7465000000000000000000000000000000600082015250565b6000611136601183610c4e565b915061114182611100565b602082019050919050565b6000602082019050818103600083015261116581611129565b9050919050565b7f4d617843686f696365206d7573742062652067726561746572207468616e207a60008201527f65726f0000000000000000000000000000000000000000000000000000000000602082015250565b60006111c8602383610c4e565b91506111d38261116c565b604082019050919050565b600060208201905081810360008301526111f7816111bb565b9050919050565b7f5468657265206d757374206265206174206c65617374206f6e6520766f746572600082015250565b6000611234602083610c4e565b915061123f826111fe565b602082019050919050565b6000602082019050818103600083015261126381611227565b9050919050565b7f706f6c6c20616c72656164792065786973747300000000000000000000000000600082015250565b60006112a0601383610c4e565b91506112ab8261126a565b602082019050919050565b600060208201905081810360008301526112cf81611293565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561131b5761131a6109af565b5b600061132984828501610aae565b91505092915050565b6000602082019050611347600083018461106e565b92915050565b60008115159050919050565b6113628161134d565b82525050565b600060208201905061137d6000830184611359565b92915050565b600081519050919050565b600081905092915050565b60005b838110156113b757808201518184015260208101905061139c565b60008484015250505050565b60006113ce82611383565b6113d8818561138e565b93506113e8818560208601611399565b80840191505092915050565b600061140082846113c3565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b60006114328261140b565b61143c8185610c4e565b935061144c818560208601611399565b61145581611416565b840191505092915050565b6000602082019050818103600083015261147a8184611427565b90509291505056fe506f6c6c20646561646c696e652068617320706173736564206f7220706f6c6c20646f6573206e6f74206578697374
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0LW`\x005`\xE0\x1C\x80c\t\x8C\xF9f\x14a\0QW\x80c_\xE5\xC1\xEC\x14a\0mW\x80c\x9E\xF1 L\x14a\0\x9DW\x80c\xA4\xED(Z\x14a\0\xB9W[`\0\x80\xFD[a\0k`\x04\x806\x03\x81\x01\x90a\0f\x91\x90a\n%V[a\0\xD5V[\0[a\0\x87`\x04\x806\x03\x81\x01\x90a\0\x82\x91\x90a\x0B(V[a\x03vV[`@Qa\0\x94\x91\x90a\x0B\xBFV[`@Q\x80\x91\x03\x90\xF3[a\0\xB7`\x04\x806\x03\x81\x01\x90a\0\xB2\x91\x90a\n%V[a\x03\xD8V[\0[a\0\xD3`\x04\x806\x03\x81\x01\x90a\0\xCE\x91\x90a\x0B\xDAV[a\x06\x15V[\0[`\0\x80`\0\x84\x81R` \x01\x90\x81R` \x01`\0 \x90Pa\x01.\x81`\0\x01T`@Q\x80`@\x01`@R\x80` \x81R` \x01\x7FPoll deadline has not passed yet\x81RPa\x08\x99V[`\0\x81`\x05\x01T\x11a\x01uW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x01l\x90a\x0C\xABV[`@Q\x80\x91\x03\x90\xFD[`\0\x82\x11\x80\x15a\x01\x89WP\x80`\x01\x01T\x82\x11\x15[a\x01\xC8W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x01\xBF\x90a\r=V[`@Q\x80\x91\x03\x90\xFD[`\0\x81`\x07\x01T\x14a\x02\x0FW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x02\x06\x90a\r\xA9V[`@Q\x80\x91\x03\x90\xFD[`\0\x81`\x04\x01`\0\x84\x81R` \x01\x90\x81R` \x01`\0 T\x90P`\0\x81\x11a\x02lW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x02c\x90a\x0E;V[`@Q\x80\x91\x03\x90\xFD[`\0\x82`\x05\x01T\x83`\x06\x01Ta\x02\x82\x91\x90a\x0E\x8AV[\x90P`\0\x80`\x01\x90P[\x84`\x01\x01T\x81\x11a\x02\xE9W\x85\x81\x03\x15a\x02\xD6W\x81\x85`\x04\x01`\0\x83\x81R` \x01\x90\x81R` \x01`\0 T\x11\x15a\x02\xD5W\x84`\x04\x01`\0\x82\x81R` \x01\x90\x81R` \x01`\0 T\x91P[[\x80\x80a\x02\xE1\x90a\x0E\xBEV[\x91PPa\x02\x8CV[P\x81\x81\x84a\x02\xF7\x91\x90a\x0E\x8AV[\x11a\x037W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x03.\x90a\x0FxV[`@Q\x80\x91\x03\x90\xFD[\x84\x84`\x07\x01\x81\x90UP\x84\x86\x7F&\x9D:$q$6\xF7}\xF1]c\xDE}#7\xA0`\xC9\x10-\xEEoF\xC9\t\xFB\x0F\xA2\xD5/\x0C`@Q`@Q\x80\x91\x03\x90\xA3PPPPPPV[`\0\x85\x85\x85\x85\x85`@Q` \x01a\x03\x8E\x92\x91\x90a\x10UV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 `@Q` \x01a\x03\xB7\x94\x93\x92\x91\x90a\x10\x8CV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x95\x94PPPPPV[`\0\x80`\0\x84\x81R` \x01\x90\x81R` \x01`\0 \x90Pa\x04\x14\x81`\0\x01T`@Q\x80``\x01`@R\x80`/\x81R` \x01a\x14\x83`/\x919a\x08\xA9V[`\0\x82\x11\x80\x15a\x04(WP\x80`\x01\x01T\x82\x11\x15[a\x04gW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x04^\x90a\r=V[`@Q\x80\x91\x03\x90\xFD[`\x01`\x02\x81\x11\x15a\x04{Wa\x04za\x10\xD1V[[\x81`\x03\x01`\x003s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0\x90T\x90a\x01\0\n\x90\x04`\xFF\x16`\x02\x81\x11\x15a\x04\xDCWa\x04\xDBa\x10\xD1V[[\x14a\x05\x1CW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x05\x13\x90a\x11LV[`@Q\x80\x91\x03\x90\xFD[`\x02\x81`\x03\x01`\x003s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x02\x81\x11\x15a\x05\x81Wa\x05\x80a\x10\xD1V[[\x02\x17\x90UP\x80`\x04\x01`\0\x83\x81R` \x01\x90\x81R` \x01`\0 `\0\x81T\x80\x92\x91\x90a\x05\xAC\x90a\x0E\xBEV[\x91\x90PUP\x80`\x05\x01`\0\x81T\x80\x92\x91\x90a\x05\xC6\x90a\x0E\xBEV[\x91\x90PUP\x813s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84\x7F\xE4\xAB\xC58\x0F\xA6\x93\x9D\x1D\xC2;^\x90\xB3\xA8\xA0\xE3(\xF0\xF1\xA8*_B\xBF\xB7\x95\xBF\x9Cqu\x05`@Q`@Q\x80\x91\x03\x90\xA4PPPV[a\x06T\x84`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7FDeadline must be in the future\0\0\x81RPa\x08\xA9V[`\0\x83\x11a\x06\x97W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x06\x8E\x90a\x11\xDEV[`@Q\x80\x91\x03\x90\xFD[`\0\x82\x82\x90P\x11a\x06\xDDW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x06\xD4\x90a\x12JV[`@Q\x80\x91\x03\x90\xFD[`\0a\x06\xEC\x85\x853\x86\x86a\x03vV[\x90P`\0\x80`\0\x83\x81R` \x01\x90\x81R` \x01`\0 \x90P`\0\x81`\x06\x01T\x14a\x07KW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x07B\x90a\x12\xB6V[`@Q\x80\x91\x03\x90\xFD[\x85\x81`\0\x01\x81\x90UP\x84\x81`\x01\x01\x81\x90UP3\x81`\x02\x01`\0a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP\x83\x83\x90P\x81`\x06\x01\x81\x90UP`\0[\x84\x84\x90P\x81\x10\x15a\x08XW`\x01\x82`\x03\x01`\0\x87\x87\x85\x81\x81\x10a\x07\xD5Wa\x07\xD4a\x12\xD6V[[\x90P` \x02\x01` \x81\x01\x90a\x07\xEA\x91\x90a\x13\x05V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01`\0 `\0a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x02\x81\x11\x15a\x08FWa\x08Ea\x10\xD1V[[\x02\x17\x90UP\x80\x80`\x01\x01\x91PPa\x07\xAFV[P\x81\x7F\xF8Y\x04\x1DJ\xDD\xF0\x85\xC6\"k.\x875\xA1U\xAE*L\x02\x13\xA9j,\xFC\xB9}O\xE4\xD3\x81q\x87`@Qa\x08\x89\x91\x90a\x132V[`@Q\x80\x91\x03\x90\xA2PPPPPPV[a\x08\xA5\x82B\x11\x82a\x08\xB9V[PPV[a\x08\xB5\x82B\x10\x82a\x08\xB9V[PPV[`\0\x7F=\xCD\xF6;A\xC1\x03V}r%\x97j\xD9\x14^\x86lz}\xCC\xC6\xC2w\xEA\x86\xAB\xBD&\x8F\xBA\xC9`\0\x1Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x83`@Q` \x01a\t\x06\x91\x90a\x13hV[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Qa\t\"\x91\x90a\x13\xF4V[`\0`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80`\0\x81\x14a\t]W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\tbV[``\x91P[PP\x90P\x80\x82\x90a\t\xA9W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\t\xA0\x91\x90a\x14`V[`@Q\x80\x91\x03\x90\xFD[PPPPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x81\x90P\x91\x90PV[a\t\xCC\x81a\t\xB9V[\x81\x14a\t\xD7W`\0\x80\xFD[PV[`\0\x815\x90Pa\t\xE9\x81a\t\xC3V[\x92\x91PPV[`\0\x81\x90P\x91\x90PV[a\n\x02\x81a\t\xEFV[\x81\x14a\n\rW`\0\x80\xFD[PV[`\0\x815\x90Pa\n\x1F\x81a\t\xF9V[\x92\x91PPV[`\0\x80`@\x83\x85\x03\x12\x15a\n<Wa\n;a\t\xAFV[[`\0a\nJ\x85\x82\x86\x01a\t\xDAV[\x92PP` a\n[\x85\x82\x86\x01a\n\x10V[\x91PP\x92P\x92\x90PV[`\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[`\0a\n\x90\x82a\neV[\x90P\x91\x90PV[a\n\xA0\x81a\n\x85V[\x81\x14a\n\xABW`\0\x80\xFD[PV[`\0\x815\x90Pa\n\xBD\x81a\n\x97V[\x92\x91PPV[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\xFD[`\0\x80\x83`\x1F\x84\x01\x12a\n\xE8Wa\n\xE7a\n\xC3V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B\x05Wa\x0B\x04a\n\xC8V[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15a\x0B!Wa\x0B a\n\xCDV[[\x92P\x92\x90PV[`\0\x80`\0\x80`\0`\x80\x86\x88\x03\x12\x15a\x0BDWa\x0BCa\t\xAFV[[`\0a\x0BR\x88\x82\x89\x01a\n\x10V[\x95PP` a\x0Bc\x88\x82\x89\x01a\n\x10V[\x94PP`@a\x0Bt\x88\x82\x89\x01a\n\xAEV[\x93PP``\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B\x95Wa\x0B\x94a\t\xB4V[[a\x0B\xA1\x88\x82\x89\x01a\n\xD2V[\x92P\x92PP\x92\x95P\x92\x95\x90\x93PV[a\x0B\xB9\x81a\t\xB9V[\x82RPPV[`\0` \x82\x01\x90Pa\x0B\xD4`\0\x83\x01\x84a\x0B\xB0V[\x92\x91PPV[`\0\x80`\0\x80``\x85\x87\x03\x12\x15a\x0B\xF4Wa\x0B\xF3a\t\xAFV[[`\0a\x0C\x02\x87\x82\x88\x01a\n\x10V[\x94PP` a\x0C\x13\x87\x82\x88\x01a\n\x10V[\x93PP`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0C4Wa\x0C3a\t\xB4V[[a\x0C@\x87\x82\x88\x01a\n\xD2V[\x92P\x92PP\x92\x95\x91\x94P\x92PV[`\0\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7FNo votes have been cast\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x0C\x95`\x17\x83a\x0CNV[\x91Pa\x0C\xA0\x82a\x0C_V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0C\xC4\x81a\x0C\x88V[\x90P\x91\x90PV[\x7FChoice must be between 1 and max`\0\x82\x01R\x7FChoice\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[`\0a\r'`&\x83a\x0CNV[\x91Pa\r2\x82a\x0C\xCBV[`@\x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\rV\x81a\r\x1AV[\x90P\x91\x90PV[\x7FWinner has already been set\0\0\0\0\0`\0\x82\x01RPV[`\0a\r\x93`\x1B\x83a\x0CNV[\x91Pa\r\x9E\x82a\r]V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\r\xC2\x81a\r\x86V[\x90P\x91\x90PV[\x7FThis choice has received no vote`\0\x82\x01R\x7Fs\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[`\0a\x0E%`!\x83a\x0CNV[\x91Pa\x0E0\x82a\r\xC9V[`@\x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0ET\x81a\x0E\x18V[\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`\x11`\x04R`$`\0\xFD[`\0a\x0E\x95\x82a\t\xEFV[\x91Pa\x0E\xA0\x83a\t\xEFV[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a\x0E\xB8Wa\x0E\xB7a\x0E[V[[\x92\x91PPV[`\0a\x0E\xC9\x82a\t\xEFV[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03a\x0E\xFBWa\x0E\xFAa\x0E[V[[`\x01\x82\x01\x90P\x91\x90PV[\x7FThis choice could still be overt`\0\x82\x01R\x7Faken if remaining voters vote\0\0\0` \x82\x01RPV[`\0a\x0Fb`=\x83a\x0CNV[\x91Pa\x0Fm\x82a\x0F\x06V[`@\x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x0F\x91\x81a\x0FUV[\x90P\x91\x90PV[`\0\x81\x90P\x92\x91PPV[`\0\x81\x90P\x91\x90PV[a\x0F\xB6\x81a\n\x85V[\x82RPPV[`\0a\x0F\xC8\x83\x83a\x0F\xADV[` \x83\x01\x90P\x92\x91PPV[`\0a\x0F\xE3` \x84\x01\x84a\n\xAEV[\x90P\x92\x91PPV[`\0` \x82\x01\x90P\x91\x90PV[`\0a\x10\x04\x83\x85a\x0F\x98V[\x93Pa\x10\x0F\x82a\x0F\xA3V[\x80`\0[\x85\x81\x10\x15a\x10HWa\x10%\x82\x84a\x0F\xD4V[a\x10/\x88\x82a\x0F\xBCV[\x97Pa\x10:\x83a\x0F\xEBV[\x92PP`\x01\x81\x01\x90Pa\x10\x13V[P\x85\x92PPP\x93\x92PPPV[`\0a\x10b\x82\x84\x86a\x0F\xF8V[\x91P\x81\x90P\x93\x92PPPV[a\x10w\x81a\t\xEFV[\x82RPPV[a\x10\x86\x81a\n\x85V[\x82RPPV[`\0`\x80\x82\x01\x90Pa\x10\xA1`\0\x83\x01\x87a\x10nV[a\x10\xAE` \x83\x01\x86a\x10nV[a\x10\xBB`@\x83\x01\x85a\x10}V[a\x10\xC8``\x83\x01\x84a\x0B\xB0V[\x95\x94PPPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`!`\x04R`$`\0\xFD[\x7Fsender can't vote\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x116`\x11\x83a\x0CNV[\x91Pa\x11A\x82a\x11\0V[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x11e\x81a\x11)V[\x90P\x91\x90PV[\x7FMaxChoice must be greater than z`\0\x82\x01R\x7Fero\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01RPV[`\0a\x11\xC8`#\x83a\x0CNV[\x91Pa\x11\xD3\x82a\x11lV[`@\x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x11\xF7\x81a\x11\xBBV[\x90P\x91\x90PV[\x7FThere must be at least one voter`\0\x82\x01RPV[`\0a\x124` \x83a\x0CNV[\x91Pa\x12?\x82a\x11\xFEV[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x12c\x81a\x12'V[\x90P\x91\x90PV[\x7Fpoll already exists\0\0\0\0\0\0\0\0\0\0\0\0\0`\0\x82\x01RPV[`\0a\x12\xA0`\x13\x83a\x0CNV[\x91Pa\x12\xAB\x82a\x12jV[` \x82\x01\x90P\x91\x90PV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x12\xCF\x81a\x12\x93V[\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\0R`2`\x04R`$`\0\xFD[`\0` \x82\x84\x03\x12\x15a\x13\x1BWa\x13\x1Aa\t\xAFV[[`\0a\x13)\x84\x82\x85\x01a\n\xAEV[\x91PP\x92\x91PPV[`\0` \x82\x01\x90Pa\x13G`\0\x83\x01\x84a\x10nV[\x92\x91PPV[`\0\x81\x15\x15\x90P\x91\x90PV[a\x13b\x81a\x13MV[\x82RPPV[`\0` \x82\x01\x90Pa\x13}`\0\x83\x01\x84a\x13YV[\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0\x81\x90P\x92\x91PPV[`\0[\x83\x81\x10\x15a\x13\xB7W\x80\x82\x01Q\x81\x84\x01R` \x81\x01\x90Pa\x13\x9CV[`\0\x84\x84\x01RPPPPV[`\0a\x13\xCE\x82a\x13\x83V[a\x13\xD8\x81\x85a\x13\x8EV[\x93Pa\x13\xE8\x81\x85` \x86\x01a\x13\x99V[\x80\x84\x01\x91PP\x92\x91PPV[`\0a\x14\0\x82\x84a\x13\xC3V[\x91P\x81\x90P\x92\x91PPV[`\0\x81Q\x90P\x91\x90PV[`\0`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[`\0a\x142\x82a\x14\x0BV[a\x14<\x81\x85a\x0CNV[\x93Pa\x14L\x81\x85` \x86\x01a\x13\x99V[a\x14U\x81a\x14\x16V[\x84\x01\x91PP\x92\x91PPV[`\0` \x82\x01\x90P\x81\x81\x03`\0\x83\x01Ra\x14z\x81\x84a\x14'V[\x90P\x92\x91PPV\xFEPoll deadline has passed or poll does not exist",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `PollCreated(bytes32,uint256)` and selector `0xf859041d4addf085c6226b2e8735a155ae2a4c0213a96a2cfcb97d4fe4d38171`.
```solidity
event PollCreated(bytes32 indexed pollId, uint256 deadline);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct PollCreated {
        #[allow(missing_docs)]
        pub pollId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub deadline: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for PollCreated {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "PollCreated(bytes32,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                248u8, 89u8, 4u8, 29u8, 74u8, 221u8, 240u8, 133u8, 198u8, 34u8, 107u8,
                46u8, 135u8, 53u8, 161u8, 85u8, 174u8, 42u8, 76u8, 2u8, 19u8, 169u8,
                106u8, 44u8, 252u8, 185u8, 125u8, 79u8, 228u8, 211u8, 129u8, 113u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    pollId: topics.1,
                    deadline: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deadline),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.pollId.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.pollId);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for PollCreated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&PollCreated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &PollCreated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Voted(bytes32,address,uint256)` and selector `0xe4abc5380fa6939d1dc23b5e90b3a8a0e328f0f1a82a5f42bfb795bf9c717505`.
```solidity
event Voted(bytes32 indexed pollId, address indexed voter, uint256 indexed choice);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Voted {
        #[allow(missing_docs)]
        pub pollId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub voter: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub choice: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Voted {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "Voted(bytes32,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                228u8, 171u8, 197u8, 56u8, 15u8, 166u8, 147u8, 157u8, 29u8, 194u8, 59u8,
                94u8, 144u8, 179u8, 168u8, 160u8, 227u8, 40u8, 240u8, 241u8, 168u8, 42u8,
                95u8, 66u8, 191u8, 183u8, 149u8, 191u8, 156u8, 113u8, 117u8, 5u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    pollId: topics.1,
                    voter: topics.2,
                    choice: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.pollId.clone(),
                    self.voter.clone(),
                    self.choice.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.pollId);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.voter,
                );
                out[3usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.choice);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Voted {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Voted> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Voted) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `Winner(bytes32,uint256)` and selector `0x269d3a24712436f77df15d63de7d2337a060c9102dee6f46c909fb0fa2d52f0c`.
```solidity
event Winner(bytes32 indexed pollId, uint256 indexed choice);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Winner {
        #[allow(missing_docs)]
        pub pollId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub choice: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Winner {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "Winner(bytes32,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                38u8, 157u8, 58u8, 36u8, 113u8, 36u8, 54u8, 247u8, 125u8, 241u8, 93u8,
                99u8, 222u8, 125u8, 35u8, 55u8, 160u8, 96u8, 201u8, 16u8, 45u8, 238u8,
                111u8, 70u8, 201u8, 9u8, 251u8, 15u8, 162u8, 213u8, 47u8, 12u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    pollId: topics.1,
                    choice: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.pollId.clone(), self.choice.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.pollId);
                out[2usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.choice);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Winner {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Winner> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Winner) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `createPoll(uint256,uint256,address[])` and selector `0xa4ed285a`.
```solidity
function createPoll(uint256 deadline, uint256 maxChoice, address[] memory voters) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createPollCall {
        #[allow(missing_docs)]
        pub deadline: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub maxChoice: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub voters: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    ///Container type for the return parameters of the [`createPoll(uint256,uint256,address[])`](createPollCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createPollReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createPollCall> for UnderlyingRustTuple<'_> {
                fn from(value: createPollCall) -> Self {
                    (value.deadline, value.maxChoice, value.voters)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for createPollCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        deadline: tuple.0,
                        maxChoice: tuple.1,
                        voters: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createPollReturn> for UnderlyingRustTuple<'_> {
                fn from(value: createPollReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for createPollReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for createPollCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = createPollReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "createPoll(uint256,uint256,address[])";
            const SELECTOR: [u8; 4] = [164u8, 237u8, 40u8, 90u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deadline),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxChoice),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.voters),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `getPollId(uint256,uint256,address,address[])` and selector `0x5fe5c1ec`.
```solidity
function getPollId(uint256 deadline, uint256 maxChoice, address owner, address[] memory voters) external pure returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPollIdCall {
        #[allow(missing_docs)]
        pub deadline: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub maxChoice: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub voters: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`getPollId(uint256,uint256,address,address[])`](getPollIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getPollIdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPollIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: getPollIdCall) -> Self {
                    (value.deadline, value.maxChoice, value.owner, value.voters)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getPollIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        deadline: tuple.0,
                        maxChoice: tuple.1,
                        owner: tuple.2,
                        voters: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getPollIdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getPollIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getPollIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getPollIdCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getPollIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getPollId(uint256,uint256,address,address[])";
            const SELECTOR: [u8; 4] = [95u8, 229u8, 193u8, 236u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.deadline),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxChoice),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.voters),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `setWinningChoice(bytes32,uint256)` and selector `0x098cf966`.
```solidity
function setWinningChoice(bytes32 pollId, uint256 choice) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setWinningChoiceCall {
        #[allow(missing_docs)]
        pub pollId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub choice: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`setWinningChoice(bytes32,uint256)`](setWinningChoiceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setWinningChoiceReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setWinningChoiceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setWinningChoiceCall) -> Self {
                    (value.pollId, value.choice)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setWinningChoiceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        pollId: tuple.0,
                        choice: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setWinningChoiceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setWinningChoiceReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setWinningChoiceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setWinningChoiceCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setWinningChoiceReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setWinningChoice(bytes32,uint256)";
            const SELECTOR: [u8; 4] = [9u8, 140u8, 249u8, 102u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.pollId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.choice),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `vote(bytes32,uint256)` and selector `0x9ef1204c`.
```solidity
function vote(bytes32 pollId, uint256 choice) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct voteCall {
        #[allow(missing_docs)]
        pub pollId: alloy::sol_types::private::FixedBytes<32>,
        #[allow(missing_docs)]
        pub choice: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`vote(bytes32,uint256)`](voteCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct voteReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<voteCall> for UnderlyingRustTuple<'_> {
                fn from(value: voteCall) -> Self {
                    (value.pollId, value.choice)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for voteCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        pollId: tuple.0,
                        choice: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<voteReturn> for UnderlyingRustTuple<'_> {
                fn from(value: voteReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for voteReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for voteCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = voteReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "vote(bytes32,uint256)";
            const SELECTOR: [u8; 4] = [158u8, 241u8, 32u8, 76u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.pollId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.choice),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`Voting`](self) function calls.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum VotingCalls {
        #[allow(missing_docs)]
        createPoll(createPollCall),
        #[allow(missing_docs)]
        getPollId(getPollIdCall),
        #[allow(missing_docs)]
        setWinningChoice(setWinningChoiceCall),
        #[allow(missing_docs)]
        vote(voteCall),
    }
    #[automatically_derived]
    impl VotingCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [9u8, 140u8, 249u8, 102u8],
            [95u8, 229u8, 193u8, 236u8],
            [158u8, 241u8, 32u8, 76u8],
            [164u8, 237u8, 40u8, 90u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for VotingCalls {
        const NAME: &'static str = "VotingCalls";
        const MIN_DATA_LENGTH: usize = 64usize;
        const COUNT: usize = 4usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::createPoll(_) => {
                    <createPollCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getPollId(_) => {
                    <getPollIdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setWinningChoice(_) => {
                    <setWinningChoiceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::vote(_) => <voteCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<VotingCalls>] = &[
                {
                    fn setWinningChoice(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<VotingCalls> {
                        <setWinningChoiceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(VotingCalls::setWinningChoice)
                    }
                    setWinningChoice
                },
                {
                    fn getPollId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<VotingCalls> {
                        <getPollIdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(VotingCalls::getPollId)
                    }
                    getPollId
                },
                {
                    fn vote(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<VotingCalls> {
                        <voteCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(VotingCalls::vote)
                    }
                    vote
                },
                {
                    fn createPoll(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<VotingCalls> {
                        <createPollCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(VotingCalls::createPoll)
                    }
                    createPoll
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::createPoll(inner) => {
                    <createPollCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::getPollId(inner) => {
                    <getPollIdCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setWinningChoice(inner) => {
                    <setWinningChoiceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::vote(inner) => {
                    <voteCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::createPoll(inner) => {
                    <createPollCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getPollId(inner) => {
                    <getPollIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setWinningChoice(inner) => {
                    <setWinningChoiceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::vote(inner) => {
                    <voteCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`Voting`](self) events.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum VotingEvents {
        #[allow(missing_docs)]
        PollCreated(PollCreated),
        #[allow(missing_docs)]
        Voted(Voted),
        #[allow(missing_docs)]
        Winner(Winner),
    }
    #[automatically_derived]
    impl VotingEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                38u8, 157u8, 58u8, 36u8, 113u8, 36u8, 54u8, 247u8, 125u8, 241u8, 93u8,
                99u8, 222u8, 125u8, 35u8, 55u8, 160u8, 96u8, 201u8, 16u8, 45u8, 238u8,
                111u8, 70u8, 201u8, 9u8, 251u8, 15u8, 162u8, 213u8, 47u8, 12u8,
            ],
            [
                228u8, 171u8, 197u8, 56u8, 15u8, 166u8, 147u8, 157u8, 29u8, 194u8, 59u8,
                94u8, 144u8, 179u8, 168u8, 160u8, 227u8, 40u8, 240u8, 241u8, 168u8, 42u8,
                95u8, 66u8, 191u8, 183u8, 149u8, 191u8, 156u8, 113u8, 117u8, 5u8,
            ],
            [
                248u8, 89u8, 4u8, 29u8, 74u8, 221u8, 240u8, 133u8, 198u8, 34u8, 107u8,
                46u8, 135u8, 53u8, 161u8, 85u8, 174u8, 42u8, 76u8, 2u8, 19u8, 169u8,
                106u8, 44u8, 252u8, 185u8, 125u8, 79u8, 228u8, 211u8, 129u8, 113u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for VotingEvents {
        const NAME: &'static str = "VotingEvents";
        const COUNT: usize = 3usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<PollCreated as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <PollCreated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::PollCreated)
                }
                Some(<Voted as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Voted as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Voted)
                }
                Some(<Winner as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Winner as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Winner)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for VotingEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::PollCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Voted(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Winner(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::PollCreated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Voted(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Winner(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Voting`](self) contract instance.

See the [wrapper's documentation](`VotingInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> VotingInstance<T, P, N> {
        VotingInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<VotingInstance<T, P, N>>,
    > {
        VotingInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        VotingInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`Voting`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Voting`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct VotingInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for VotingInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("VotingInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > VotingInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`Voting`](self) contract instance.

See the [wrapper's documentation](`VotingInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<VotingInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> VotingInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> VotingInstance<T, P, N> {
            VotingInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > VotingInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`createPoll`] function.
        pub fn createPoll(
            &self,
            deadline: alloy::sol_types::private::primitives::aliases::U256,
            maxChoice: alloy::sol_types::private::primitives::aliases::U256,
            voters: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::SolCallBuilder<T, &P, createPollCall, N> {
            self.call_builder(
                &createPollCall {
                    deadline,
                    maxChoice,
                    voters,
                },
            )
        }
        ///Creates a new call builder for the [`getPollId`] function.
        pub fn getPollId(
            &self,
            deadline: alloy::sol_types::private::primitives::aliases::U256,
            maxChoice: alloy::sol_types::private::primitives::aliases::U256,
            owner: alloy::sol_types::private::Address,
            voters: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::SolCallBuilder<T, &P, getPollIdCall, N> {
            self.call_builder(
                &getPollIdCall {
                    deadline,
                    maxChoice,
                    owner,
                    voters,
                },
            )
        }
        ///Creates a new call builder for the [`setWinningChoice`] function.
        pub fn setWinningChoice(
            &self,
            pollId: alloy::sol_types::private::FixedBytes<32>,
            choice: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, setWinningChoiceCall, N> {
            self.call_builder(
                &setWinningChoiceCall {
                    pollId,
                    choice,
                },
            )
        }
        ///Creates a new call builder for the [`vote`] function.
        pub fn vote(
            &self,
            pollId: alloy::sol_types::private::FixedBytes<32>,
            choice: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, voteCall, N> {
            self.call_builder(&voteCall { pollId, choice })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > VotingInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`PollCreated`] event.
        pub fn PollCreated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, PollCreated, N> {
            self.event_filter::<PollCreated>()
        }
        ///Creates a new event filter for the [`Voted`] event.
        pub fn Voted_filter(&self) -> alloy_contract::Event<T, &P, Voted, N> {
            self.event_filter::<Voted>()
        }
        ///Creates a new event filter for the [`Winner`] event.
        pub fn Winner_filter(&self) -> alloy_contract::Event<T, &P, Winner, N> {
            self.event_filter::<Winner>()
        }
    }
}
